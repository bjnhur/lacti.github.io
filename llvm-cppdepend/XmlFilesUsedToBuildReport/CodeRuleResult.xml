<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<RuleResult NbQueries="66" NbErrors="0" NbWarns="45">
  <Group Name="Code Quality" FullName="Code Quality" GroupId="GroupOfRules1650634298" NbQueries="13" NbErrors="0" NbWarns="13" Status="Warn">
    <Query Status="Warn" Name="Types too big - critical" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Types too big - critical" QueryId="Query2498439866" NbNodeMatched="133" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;too&amp;#0160;big&amp;#0160;-&amp;#0160;critical&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;500&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethods&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbFields&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;where&amp;#0160;NbLinesOfCode&amp;#0160;&amp;gt;&amp;#0160;500&amp;#0160;are&amp;#0160;extremely&amp;#0160;complex&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;should&amp;#0160;be&amp;#0160;split&amp;#0160;in&amp;#0160;a&amp;#0160;smaller&amp;#0160;group&amp;#0160;of&amp;#0160;types.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NbLinesOfCode&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column># lines of code (LOC)</Column>
        <Column># Methods</Column>
        <Column># Fields</Column>
      </Columns>
      <Rows>
        <Row Name="InstCombiner" FullName="llvm.InstCombiner">
          <Val>8 816</Val>
          <Val>138</Val>
          <Val>8</Val>
        </Row>
        <Row Name="X86TargetLowering" FullName="llvm.X86TargetLowering">
          <Val>5 901</Val>
          <Val>135</Val>
          <Val>6</Val>
        </Row>
        <Row Name="DAGTypeLegalizer" FullName="llvm.DAGTypeLegalizer">
          <Val>5 476</Val>
          <Val>378</Val>
          <Val>12</Val>
        </Row>
        <Row Name="NVPTXDAGToDAGISel" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel">
          <Val>5 321</Val>
          <Val>35</Val>
          <Val>2</Val>
        </Row>
        <Row Name="DAGCombiner" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner">
          <Val>5 204</Val>
          <Val>141</Val>
          <Val>11</Val>
        </Row>
        <Row Name="ARMTargetLowering" FullName="llvm.ARMTargetLowering">
          <Val>3 708</Val>
          <Val>107</Val>
          <Val>4</Val>
        </Row>
        <Row Name="PPCTargetLowering" FullName="llvm.PPCTargetLowering">
          <Val>3 692</Val>
          <Val>96</Val>
          <Val>1</Val>
        </Row>
        <Row Name="SelectionDAGBuilder" FullName="llvm.SelectionDAGBuilder">
          <Val>3 481</Val>
          <Val>124</Val>
          <Val>24</Val>
        </Row>
        <Row Name="SelectionDAG" FullName="llvm.SelectionDAG">
          <Val>3 254</Val>
          <Val>243</Val>
          <Val>23</Val>
        </Row>
        <Row Name="ARMAsmParser" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser">
          <Val>3 151</Val>
          <Val>96</Val>
          <Val>8</Val>
        </Row>
        <Row Name="ScalarEvolution" FullName="llvm.ScalarEvolution">
          <Val>3 078</Val>
          <Val>121</Val>
          <Val>19</Val>
        </Row>
        <Row Name="AArch64TargetLowering" FullName="llvm.AArch64TargetLowering">
          <Val>3 051</Val>
          <Val>108</Val>
          <Val>2</Val>
        </Row>
        <Row Name="LLParser" FullName="llvm.LLParser">
          <Val>3 047</Val>
          <Val>121</Val>
          <Val>16</Val>
        </Row>
        <Row Name="SelectionDAGLegalize" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize">
          <Val>2 541</Val>
          <Val>45</Val>
          <Val>5</Val>
        </Row>
        <Row Name="AsmParser" FullName="anonymous_namespace{asmparser.cpp}.AsmParser">
          <Val>2 482</Val>
          <Val>124</Val>
          <Val>28</Val>
        </Row>
        <Row Name="CppWriter" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter">
          <Val>2 141</Val>
          <Val>43</Val>
          <Val>12</Val>
        </Row>
        <Row Name="ScaledNumberHelpersTest_matchScales_Test" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_matchScales_Test">
          <Val>2 102</Val>
          <Val>5</Val>
          <Val>1</Val>
        </Row>
        <Row Name="BitcodeReader" FullName="llvm.BitcodeReader">
          <Val>2 101</Val>
          <Val>47</Val>
          <Val>28</Val>
        </Row>
        <Row Name="NVPTXTargetLowering" FullName="llvm.NVPTXTargetLowering">
          <Val>2 063</Val>
          <Val>38</Val>
          <Val>2</Val>
        </Row>
        <Row Name="X86FastISel" FullName="anonymous_namespace{x86fastisel.cpp}.X86FastISel">
          <Val>1 983</Val>
          <Val>42</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMDAGToDAGISel" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel">
          <Val>1 941</Val>
          <Val>72</Val>
          <Val>1</Val>
        </Row>
        <Row Name="DependenceAnalysis" FullName="llvm.DependenceAnalysis">
          <Val>1 876</Val>
          <Val>56</Val>
          <Val>8</Val>
        </Row>
        <Row Name="TargetLowering" FullName="llvm.TargetLowering">
          <Val>1 766</Val>
          <Val>63</Val>
          <Val>0</Val>
        </Row>
        <Row Name="ARMFastISel" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel">
          <Val>1 691</Val>
          <Val>62</Val>
          <Val>8</Val>
        </Row>
        <Row Name="X86DAGToDAGISel" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel">
          <Val>1 663</Val>
          <Val>36</Val>
          <Val>2</Val>
        </Row>
        <Row Name="APFloat" FullName="llvm.APFloat">
          <Val>1 644</Val>
          <Val>125</Val>
          <Val>12</Val>
        </Row>
        <Row Name="X86InstrInfo" FullName="llvm.X86InstrInfo">
          <Val>1 590</Val>
          <Val>61</Val>
          <Val>8</Val>
        </Row>
        <Row Name="APInt" FullName="llvm.APInt">
          <Val>1 516</Val>
          <Val>218</Val>
          <Val>1</Val>
        </Row>
        <Row Name="ARMOperand" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand">
          <Val>1 507</Val>
          <Val>298</Val>
          <Val>5</Val>
        </Row>
        <Row Name="MipsTargetLowering" FullName="llvm.MipsTargetLowering">
          <Val>1 500</Val>
          <Val>75</Val>
          <Val>2</Val>
        </Row>
        <Row Name="TGParser" FullName="llvm.TGParser">
          <Val>1 478</Val>
          <Val>51</Val>
          <Val>7</Val>
        </Row>
        <Row Name="LSRInstance" FullName="anonymous_namespace{loopstrengthreduce.cpp}.LSRInstance">
          <Val>1 463</Val>
          <Val>59</Val>
          <Val>17</Val>
        </Row>
        <Row Name="ConstantsTest_AsInstructionsTest_Test" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_AsInstructionsTest_Test">
          <Val>1 400</Val>
          <Val>5</Val>
          <Val>1</Val>
        </Row>
        <Row Name="BBVectorize" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize">
          <Val>1 366</Val>
          <Val>42</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ARMBaseInstrInfo" FullName="llvm.ARMBaseInstrInfo">
          <Val>1 359</Val>
          <Val>74</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SparcTargetLowering" FullName="llvm.SparcTargetLowering">
          <Val>1 333</Val>
          <Val>39</Val>
          <Val>1</Val>
        </Row>
        <Row Name="SelectionDAGISel" FullName="llvm.SelectionDAGISel">
          <Val>1 294</Val>
          <Val>42</Val>
          <Val>13</Val>
        </Row>
        <Row Name="NVPTXAsmPrinter" FullName="llvm.NVPTXAsmPrinter">
          <Val>1 259</Val>
          <Val>59</Val>
          <Val>13</Val>
        </Row>
        <Row Name="PPCDAGToDAGISel" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel">
          <Val>1 226</Val>
          <Val>29</Val>
          <Val>4</Val>
        </Row>
        <Row Name="R600TargetLowering" FullName="llvm.R600TargetLowering">
          <Val>1 223</Val>
          <Val>28</Val>
          <Val>1</Val>
        </Row>
        <Row Name="SystemZTargetLowering" FullName="llvm.SystemZTargetLowering">
          <Val>1 189</Val>
          <Val>61</Val>
          <Val>1</Val>
        </Row>
        <Row Name="Interpreter" FullName="llvm.Interpreter">
          <Val>1 167</Val>
          <Val>78</Val>
          <Val>5</Val>
        </Row>
        <Row Name="AMDGPUTargetLowering" FullName="llvm.AMDGPUTargetLowering">
          <Val>1 167</Val>
          <Val>68</Val>
          <Val>1</Val>
        </Row>
        <Row Name="DwarfDebug" FullName="llvm.DwarfDebug">
          <Val>1 125</Val>
          <Val>100</Val>
          <Val>66</Val>
        </Row>
        <Row Name="Verifier" FullName="anonymous_namespace{verifier.cpp}.Verifier">
          <Val>1 115</Val>
          <Val>75</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ObjCARCOpt" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt">
          <Val>1 075</Val>
          <Val>24</Val>
          <Val>13</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>1 067</Val>
          <Val>75</Val>
          <Val>15</Val>
        </Row>
        <Row Name="MipsAsmParser" FullName="anonymous_namespace{mipsasmparser.cpp}.MipsAsmParser">
          <Val>1 051</Val>
          <Val>99</Val>
          <Val>3</Val>
        </Row>
        <Row Name="FunctionAttrs" FullName="anonymous_namespace{functionattrs.cpp}.FunctionAttrs">
          <Val>1 040</Val>
          <Val>18</Val>
          <Val>3</Val>
        </Row>
        <Row Name="PPCFastISel" FullName="anonymous_namespace{ppcfastisel.cpp}.PPCFastISel">
          <Val>1 021</Val>
          <Val>44</Val>
          <Val>5</Val>
        </Row>
        <Row Name="AsmPrinter" FullName="llvm.AsmPrinter">
          <Val>1 012</Val>
          <Val>84</Val>
          <Val>20</Val>
        </Row>
        <Row Name="BoUpSLP" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP">
          <Val>1 011</Val>
          <Val>29</Val>
          <Val>18</Val>
        </Row>
        <Row Name="AArch64FastISel" FullName="anonymous_namespace{aarch64fastisel.cpp}.AArch64FastISel">
          <Val>996</Val>
          <Val>41</Val>
          <Val>2</Val>
        </Row>
        <Row Name="Emitter&lt;CodeEmitter&gt;" FullName="anonymous_namespace{x86codeemitter.cpp}.Emitter&lt;CodeEmitter&gt;">
          <Val>950</Val>
          <Val>21</Val>
          <Val>9</Val>
        </Row>
        <Row Name="MemorySanitizerVisitor" FullName="anonymous_namespace{memorysanitizer.cpp}.MemorySanitizerVisitor">
          <Val>935</Val>
          <Val>121</Val>
          <Val>15</Val>
        </Row>
        <Row Name="RAGreedy" FullName="anonymous_namespace{regallocgreedy.cpp}.RAGreedy">
          <Val>923</Val>
          <Val>47</Val>
          <Val>26</Val>
        </Row>
        <Row Name="SITargetLowering" FullName="llvm.SITargetLowering">
          <Val>918</Val>
          <Val>39</Val>
          <Val>0</Val>
        </Row>
        <Row Name="MachineInstr" FullName="llvm.MachineInstr">
          <Val>910</Val>
          <Val>165</Val>
          <Val>10</Val>
        </Row>
        <Row Name="SDNode" FullName="llvm.SDNode">
          <Val>910</Val>
          <Val>74</Val>
          <Val>12</Val>
        </Row>
        <Row Name="X86AsmParser" FullName="anonymous_namespace{x86asmparser.cpp}.X86AsmParser">
          <Val>904</Val>
          <Val>40</Val>
          <Val>5</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>885</Val>
          <Val>112</Val>
          <Val>24</Val>
        </Row>
        <Row Name="XCoreTargetLowering" FullName="llvm.XCoreTargetLowering">
          <Val>884</Val>
          <Val>47</Val>
          <Val>2</Val>
        </Row>
        <Row Name="MachOObjectFile" FullName="llvm.object.MachOObjectFile">
          <Val>875</Val>
          <Val>100</Val>
          <Val>6</Val>
        </Row>
        <Row Name="LLLexer" FullName="llvm.LLLexer">
          <Val>869</Val>
          <Val>36</Val>
          <Val>12</Val>
        </Row>
        <Row Name="RuntimeDyldELF" FullName="llvm.RuntimeDyldELF">
          <Val>869</Val>
          <Val>28</Val>
          <Val>4</Val>
        </Row>
        <Row Name="RecognizableInstr" FullName="llvm.X86Disassembler.RecognizableInstr">
          <Val>868</Val>
          <Val>19</Val>
          <Val>30</Val>
        </Row>
        <Row Name="ARMCodeEmitter" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter">
          <Val>866</Val>
          <Val>109</Val>
          <Val>12</Val>
        </Row>
        <Row Name="ARMConstantIslands" FullName="anonymous_namespace{armconstantislandpass.cpp}.ARMConstantIslands">
          <Val>860</Val>
          <Val>41</Val>
          <Val>18</Val>
        </Row>
        <Row Name="ARMAsmPrinter" FullName="llvm.ARMAsmPrinter">
          <Val>856</Val>
          <Val>30</Val>
          <Val>4</Val>
        </Row>
        <Row Name="AArch64AsmParser" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64AsmParser">
          <Val>852</Val>
          <Val>45</Val>
          <Val>4</Val>
        </Row>
        <Row Name="AArch64DAGToDAGISel" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}.AArch64DAGToDAGISel">
          <Val>846</Val>
          <Val>52</Val>
          <Val>3</Val>
        </Row>
        <Row Name="X86MCCodeEmitter" FullName="anonymous_namespace{x86mccodeemitter.cpp}.X86MCCodeEmitter">
          <Val>846</Val>
          <Val>22</Val>
          <Val>2</Val>
        </Row>
        <Row Name="AArch64Operand" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand">
          <Val>830</Val>
          <Val>181</Val>
          <Val>4</Val>
        </Row>
        <Row Name="MipsSETargetLowering" FullName="llvm.MipsSETargetLowering">
          <Val>817</Val>
          <Val>34</Val>
          <Val>0</Val>
        </Row>
        <Row Name="MachineVerifier" FullName="anonymous_namespace{machineverifier.cpp}.MachineVerifier">
          <Val>813</Val>
          <Val>39</Val>
          <Val>25</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>811</Val>
          <Val>172</Val>
          <Val>55</Val>
        </Row>
        <Row Name="InnerLoopVectorizer" FullName="anonymous_namespace{loopvectorize.cpp}.InnerLoopVectorizer">
          <Val>802</Val>
          <Val>21</Val>
          <Val>23</Val>
        </Row>
        <Row Name="ExecutionEngine" FullName="llvm.ExecutionEngine">
          <Val>797</Val>
          <Val>57</Val>
          <Val>12</Val>
        </Row>
        <Row Name="ARMFrameLowering" FullName="llvm.ARMFrameLowering">
          <Val>780</Val>
          <Val>19</Val>
          <Val>1</Val>
        </Row>
        <Row Name="PPCAsmParser" FullName="anonymous_namespace{ppcasmparser.cpp}.PPCAsmParser">
          <Val>766</Val>
          <Val>28</Val>
          <Val>5</Val>
        </Row>
        <Row Name="ARMInstPrinter" FullName="llvm.ARMInstPrinter">
          <Val>765</Val>
          <Val>89</Val>
          <Val>0</Val>
        </Row>
        <Row Name="SCEVExpander" FullName="llvm.SCEVExpander">
          <Val>761</Val>
          <Val>42</Val>
          <Val>14</Val>
        </Row>
        <Row Name="AMDGPUCFGStructurizer" FullName="anonymous_namespace{amdilcfgstructurizer.cpp}.AMDGPUCFGStructurizer">
          <Val>760</Val>
          <Val>78</Val>
          <Val>11</Val>
        </Row>
        <Row Name="HexagonTargetLowering" FullName="llvm.HexagonTargetLowering">
          <Val>751</Val>
          <Val>35</Val>
          <Val>2</Val>
        </Row>
        <Row Name="TwoAddressInstructionPass" FullName="anonymous_namespace{twoaddressinstructionpass.cpp} .TwoAddressInstructionPass">
          <Val>750</Val>
          <Val>21</Val>
          <Val>15</Val>
        </Row>
        <Row Name="AArch64InstrInfo" FullName="llvm.AArch64InstrInfo">
          <Val>723</Val>
          <Val>39</Val>
          <Val>2</Val>
        </Row>
        <Row Name="GVN" FullName="anonymous_namespace{gvn.cpp}.GVN">
          <Val>712</Val>
          <Val>32</Val>
          <Val>12</Val>
        </Row>
        <Row Name="CodeGenPrepare" FullName="anonymous_namespace{codegenprepare.cpp}.CodeGenPrepare">
          <Val>707</Val>
          <Val>23</Val>
          <Val>11</Val>
        </Row>
        <Row Name="IfConverter" FullName="anonymous_namespace{ifconversion.cpp}.IfConverter">
          <Val>700</Val>
          <Val>26</Val>
          <Val>13</Val>
        </Row>
        <Row Name="SubtargetEmitter" FullName="anonymous_namespace{subtargetemitter.cpp}.SubtargetEmitter">
          <Val>698</Val>
          <Val>26</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MCAsmStreamer" FullName="anonymous_namespace{mcasmstreamer.cpp}.MCAsmStreamer">
          <Val>696</Val>
          <Val>90</Val>
          <Val>10</Val>
        </Row>
        <Row Name="MSP430TargetLowering" FullName="llvm.MSP430TargetLowering">
          <Val>696</Val>
          <Val>36</Val>
          <Val>0</Val>
        </Row>
        <Row Name="MipsConstantIslands" FullName="anonymous_namespace{mipsconstantislandpass.cpp}.MipsConstantIslands">
          <Val>695</Val>
          <Val>36</Val>
          <Val>18</Val>
        </Row>
        <Row Name="FPS" FullName="anonymous_namespace{x86floatingpoint.cpp}.FPS">
          <Val>693</Val>
          <Val>37</Val>
          <Val>10</Val>
        </Row>
        <Row Name="Triple" FullName="llvm.Triple">
          <Val>672</Val>
          <Val>71</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ELFObjectWriter" FullName="anonymous_namespace{elfobjectwriter.cpp}.ELFObjectWriter">
          <Val>671</Val>
          <Val>40</Val>
          <Val>17</Val>
        </Row>
        <Row Name="HexagonHardwareLoops" FullName="anonymous_namespace{hexagonhardwareloops.cpp}.HexagonHardwareLoops">
          <Val>662</Val>
          <Val>21</Val>
          <Val>8</Val>
        </Row>
        <Row Name="AssemblyWriter" FullName="llvm.AssemblyWriter">
          <Val>654</Val>
          <Val>26</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ARMMCCodeEmitter" FullName="anonymous_namespace{armmccodeemitter.cpp}.ARMMCCodeEmitter">
          <Val>651</Val>
          <Val>72</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineBasicBlock" FullName="llvm.MachineBasicBlock">
          <Val>646</Val>
          <Val>133</Val>
          <Val>12</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>173 003</Val>
          <Val>8 438</Val>
          <Val>1 286</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>1 300</Val>
          <Val>63.44</Val>
          <Val>9.67</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>506</Val>
          <Val>5</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>8 816</Val>
          <Val>378</Val>
          <Val>66</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>1 218</Val>
          <Val>55.68</Val>
          <Val>9.77</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>1 484 691</Val>
          <Val>3 100</Val>
          <Val>95.39</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods too complex - critical" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods too complex - critical" QueryId="Query3744799336" NbNodeMatched="274" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;too&amp;#0160;complex&amp;#0160;-&amp;#0160;critical&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;with&amp;#0160;CyclomaticComplexity&amp;#0160;&amp;gt;&amp;#0160;20&amp;#0160;and&amp;#0160;NestingDepth&amp;#0160;&amp;#0160;&amp;gt;&amp;#0160;5&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;are&amp;#0160;really&amp;#0160;too&amp;#0160;complex&amp;#0160;and&amp;#0160;should&amp;#0160;be&amp;#0160;split&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;in&amp;#0160;smaller&amp;#0160;methods,&amp;#0160;or&amp;#0160;even&amp;#0160;types.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;CyclomaticComplexity&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#CC" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#CC&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NestingDepth&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NestingDepth" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NestingDepth&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>Cyclomatic Complexity (CC)</Column>
        <Column>NestingDepth</Column>
      </Columns>
      <Rows>
        <Row Name="SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value*,constQuery&amp; ,unsignedint)" FullName="__Globals.SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value* ,constQuery&amp;,unsignedint)">
          <Val>262</Val>
          <Val>8</Val>
        </Row>
        <Row Name="visitICmpInst(llvm::ICmpInst&amp;)" FullName="llvm.InstCombiner.visitICmpInst(llvm::ICmpInst&amp;)">
          <Val>241</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SelectLDGLDU(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectLDGLDU(llvm::SDNode*)">
          <Val>234</Val>
          <Val>6</Val>
        </Row>
        <Row Name="SelectCodeCommon(llvm::SDNode*,constunsignedchar*,unsignedint)" FullName="llvm.SelectionDAGISel.SelectCodeCommon(llvm::SDNode* ,constunsignedchar*,unsignedint)">
          <Val>223</Val>
          <Val>8</Val>
        </Row>
        <Row Name="ParseFunctionBody(llvm::Function*)" FullName="llvm.BitcodeReader.ParseFunctionBody(llvm::Function*)">
          <Val>200</Val>
          <Val>8</Val>
        </Row>
        <Row Name="SimplifySetCC(llvm::EVT,llvm::SDValue,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)" FullName="llvm.TargetLowering.SimplifySetCC(llvm::EVT,llvm::SDValue ,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)">
          <Val>198</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ExpandNode(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandNode (llvm::SDNode*)">
          <Val>192</Val>
          <Val>7</Val>
        </Row>
        <Row Name="printInstruction(constllvm::Instruction*,conststd::string&amp;)" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter.printInstruction (constllvm::Instruction*,conststd::string&amp;)">
          <Val>164</Val>
          <Val>6</Val>
        </Row>
        <Row Name="visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp;,llvm::Instruction* ,llvm::ConstantInt*)" FullName="llvm.InstCombiner.visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp; ,llvm::Instruction*,llvm::ConstantInt*)">
          <Val>153</Val>
          <Val>7</Val>
        </Row>
        <Row Name="getConstantValue(constllvm::Constant*)" FullName="llvm.ExecutionEngine.getConstantValue(constllvm::Constant*)">
          <Val>131</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ConstantFoldBinaryInstruction(unsignedint,llvm::Constant* ,llvm::Constant*)" FullName="llvm.__Globals.ConstantFoldBinaryInstruction(unsignedint ,llvm::Constant*,llvm::Constant*)">
          <Val>124</Val>
          <Val>6</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>121</Val>
          <Val>11</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>121</Val>
          <Val>7</Val>
        </Row>
        <Row Name="buildTree_rec(ArrayRef&lt;llvm::Value*&gt;,unsignedint)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.buildTree_rec(ArrayRef &lt;llvm::Value*&gt;,unsignedint)">
          <Val>121</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SimplifyDemandedBits(llvm::SDValue,constllvm::APInt&amp;,llvm::APInt&amp; ,llvm::APInt&amp;,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)" FullName="llvm.TargetLowering.SimplifyDemandedBits(llvm::SDValue ,constllvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)">
          <Val>120</Val>
          <Val>8</Val>
        </Row>
        <Row Name="SimplifyDemandedUseBits(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedUseBits(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)">
          <Val>118</Val>
          <Val>8</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel.Select (llvm::SDNode*)">
          <Val>115</Val>
          <Val>12</Val>
        </Row>
        <Row Name="emitInstructionSpecifier()" FullName="llvm.X86Disassembler.RecognizableInstr.emitInstructionSpecifier()">
          <Val>115</Val>
          <Val>6</Val>
        </Row>
        <Row Name="PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)" FullName="__Globals.PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)">
          <Val>114</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ParseConstants()" FullName="llvm.BitcodeReader.ParseConstants()">
          <Val>112</Val>
          <Val>7</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="llvm.__Globals.computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>108</Val>
          <Val>8</Val>
        </Row>
        <Row Name="resetOperationActions()" FullName="llvm.X86TargetLowering.resetOperationActions()">
          <Val>105</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitCallInst(llvm::CallInst&amp;)" FullName="llvm.InstCombiner.visitCallInst(llvm::CallInst&amp;)">
          <Val>103</Val>
          <Val>10</Val>
        </Row>
        <Row Name="readPrefixes(structInternalInstruction*)" FullName="__Globals.readPrefixes(structInternalInstruction*)">
          <Val>87</Val>
          <Val>9</Val>
        </Row>
        <Row Name="ResolvedUndefsIn(llvm::Function&amp;)" FullName="anonymous_namespace{sccp.cpp}.SCCPSolver.ResolvedUndefsIn (llvm::Function&amp;)">
          <Val>87</Val>
          <Val>6</Val>
        </Row>
        <Row Name="EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)" FullName="anonymous_namespace{dagiselmatcheremitter.cpp}.MatcherTableEmitter .EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)">
          <Val>87</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ParseOperation(llvm::Record*,llvm::RecTy*)" FullName="llvm.TGParser.ParseOperation(llvm::Record*,llvm::RecTy*)">
          <Val>86</Val>
          <Val>7</Val>
        </Row>
        <Row Name="PerformDAGCombine(llvm::SDNode*,llvm::TargetLowering::DAGCombinerInfo&amp; )" FullName="llvm.PPCTargetLowering.PerformDAGCombine(llvm::SDNode* ,llvm::TargetLowering::DAGCombinerInfo&amp;)">
          <Val>85</Val>
          <Val>8</Val>
        </Row>
        <Row Name="LegalizeOp(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.LegalizeOp (llvm::SDNode*)">
          <Val>83</Val>
          <Val>6</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue)">
          <Val>82</Val>
          <Val>6</Val>
        </Row>
        <Row Name="getReplacementInput(llvm::LLVMContext&amp;,llvm::Instruction* ,llvm::Instruction*,unsignedint,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.getReplacementInput (llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction*,unsignedint ,bool)">
          <Val>80</Val>
          <Val>7</Val>
        </Row>
        <Row Name="PrintFileSectionSizes(llvm::StringRef)" FullName="__Globals.PrintFileSectionSizes(llvm::StringRef)">
          <Val>79</Val>
          <Val>11</Val>
        </Row>
        <Row Name="vectorizeTree(&lt;anonymous&gt;::BoUpSLP::TreeEntry*)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.vectorizeTree( &lt;anonymous&gt;::BoUpSLP::TreeEntry*)">
          <Val>79</Val>
          <Val>6</Val>
        </Row>
        <Row Name="SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,unsignedint)">
          <Val>78</Val>
          <Val>7</Val>
        </Row>
        <Row Name="findBestDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.findBestDAGFor (DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector &lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)">
          <Val>76</Val>
          <Val>8</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::SDValue,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)" FullName="llvm.SelectionDAG.computeKnownBits(llvm::SDValue,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)">
          <Val>76</Val>
          <Val>7</Val>
        </Row>
        <Row Name="getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp;,SCEV::NoWrapFlags)" FullName="llvm.ScalarEvolution.getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp; ,SCEV::NoWrapFlags)">
          <Val>75</Val>
          <Val>7</Val>
        </Row>
        <Row Name="evaluateICmpRelation(llvm::Constant*,llvm::Constant*,bool)" FullName="__Globals.evaluateICmpRelation(llvm::Constant*,llvm::Constant*,bool)">
          <Val>74</Val>
          <Val>8</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.NVPTXTargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>71</Val>
          <Val>8</Val>
        </Row>
        <Row Name="LexToken()" FullName="llvm.TGLexer.LexToken()">
          <Val>71</Val>
          <Val>6</Val>
        </Row>
        <Row Name="buildSchedGraph(llvm::AliasAnalysis*,llvm::RegPressureTracker* ,llvm::PressureDiffs*)" FullName="llvm.ScheduleDAGInstrs.buildSchedGraph(llvm::AliasAnalysis* ,llvm::RegPressureTracker*,llvm::PressureDiffs*)">
          <Val>70</Val>
          <Val>7</Val>
        </Row>
        <Row Name="UnrollLoop(llvm::Loop*,unsignedint,unsignedint,bool,unsignedint ,llvm::LoopInfo*,llvm::Pass*,llvm::LPPassManager*)" FullName="llvm.__Globals.UnrollLoop(llvm::Loop*,unsignedint,unsignedint,bool ,unsignedint,llvm::LoopInfo*,llvm::Pass*,llvm::LPPassManager*)">
          <Val>70</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitXor(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitXor(llvm::BinaryOperator&amp;)">
          <Val>70</Val>
          <Val>6</Val>
        </Row>
        <Row Name="visitGetElementPtrInst(llvm::GetElementPtrInst&amp;)" FullName="llvm.InstCombiner.visitGetElementPtrInst(llvm::GetElementPtrInst&amp;)">
          <Val>69</Val>
          <Val>7</Val>
        </Row>
        <Row Name="depends(llvm::Instruction*,llvm::Instruction*,bool)" FullName="llvm.DependenceAnalysis.depends(llvm::Instruction*,llvm::Instruction* ,bool)">
          <Val>67</Val>
          <Val>13</Val>
        </Row>
        <Row Name="visitAND(llvm::SDNode*)" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner.visitAND (llvm::SDNode*)">
          <Val>67</Val>
          <Val>7</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.X86TargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>67</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitSelectInst(llvm::SelectInst&amp;)" FullName="llvm.InstCombiner.visitSelectInst(llvm::SelectInst&amp;)">
          <Val>67</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ParseSimpleValue(llvm::Record*,llvm::RecTy* ,llvm::TGParser::IDParseMode)" FullName="llvm.TGParser.ParseSimpleValue(llvm::Record*,llvm::RecTy* ,llvm::TGParser::IDParseMode)">
          <Val>67</Val>
          <Val>6</Val>
        </Row>
        <Row Name="parseSysAlias(llvm::StringRef,llvm::SMLoc,OperandVector&amp;)" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64AsmParser .parseSysAlias(llvm::StringRef,llvm::SMLoc,OperandVector&amp;)">
          <Val>66</Val>
          <Val>58</Val>
        </Row>
        <Row Name="insnContext()" FullName="llvm.X86Disassembler.RecognizableInstr.insnContext()">
          <Val>66</Val>
          <Val>18</Val>
        </Row>
        <Row Name="print(llvm::raw_ostream&amp;,constllvm::TargetMachine*,bool)" FullName="llvm.MachineInstr.print(llvm::raw_ostream&amp;,constllvm::TargetMachine* ,bool)">
          <Val>66</Val>
          <Val>7</Val>
        </Row>
        <Row Name="AllocateBasicBlock()" FullName="anonymous_namespace{regallocfast.cpp}.RAFast.AllocateBasicBlock()">
          <Val>66</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitAnd(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitAnd(llvm::BinaryOperator&amp;)">
          <Val>66</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ConstantFoldScalarCall(llvm::StringRef,unsignedint,llvm::Type* ,ArrayRef&lt;llvm::Constant*&gt;,constllvm::TargetLibraryInfo*)" FullName="__Globals.ConstantFoldScalarCall(llvm::StringRef,unsignedint ,llvm::Type*,ArrayRef&lt;llvm::Constant*&gt;,constllvm::TargetLibraryInfo*)">
          <Val>64</Val>
          <Val>8</Val>
        </Row>
        <Row Name="reroll(llvm::Instruction*,llvm::Loop*,llvm::BasicBlock* ,constllvm::SCEV*,&lt;anonymous&gt;::LoopReroll::ReductionTracker&amp;)" FullName="anonymous_namespace{looprerollpass.cpp}.LoopReroll.reroll (llvm::Instruction*,llvm::Loop*,llvm::BasicBlock*,constllvm::SCEV*, &lt;anonymous&gt;::LoopReroll::ReductionTracker&amp;)">
          <Val>64</Val>
          <Val>7</Val>
        </Row>
        <Row Name="LowerCall_64SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_64SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>64</Val>
          <Val>6</Val>
        </Row>
        <Row Name="vectorizeBlockInLoop(llvm::BasicBlock*,PhiVector*)" FullName="anonymous_namespace{loopvectorize.cpp}.InnerLoopVectorizer .vectorizeBlockInLoop(llvm::BasicBlock*,PhiVector*)">
          <Val>63</Val>
          <Val>8</Val>
        </Row>
        <Row Name="LowerScalarVariableShift(llvm::SDValue,llvm::SelectionDAG&amp; ,constllvm::X86Subtarget*)" FullName="__Globals.LowerScalarVariableShift(llvm::SDValue,llvm::SelectionDAG&amp; ,constllvm::X86Subtarget*)">
          <Val>62</Val>
          <Val>6</Val>
        </Row>
        <Row Name="DisassembleObject(constllvm::object::ObjectFile*,bool)" FullName="__Globals.DisassembleObject(constllvm::object::ObjectFile*,bool)">
          <Val>62</Val>
          <Val>6</Val>
        </Row>
        <Row Name="visitInlineAsm(llvm::ImmutableCallSite)" FullName="llvm.SelectionDAGBuilder.visitInlineAsm(llvm::ImmutableCallSite)">
          <Val>61</Val>
          <Val>8</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}.AArch64DAGToDAGISel .Select(llvm::SDNode*)">
          <Val>61</Val>
          <Val>7</Val>
        </Row>
        <Row Name="run()" FullName="llvm.DAGTypeLegalizer.run()">
          <Val>61</Val>
          <Val>6</Val>
        </Row>
        <Row Name="handleSpecialFP(MachineBasicBlock::iterator&amp;)" FullName="anonymous_namespace{x86floatingpoint.cpp}.FPS.handleSpecialFP (MachineBasicBlock::iterator&amp;)">
          <Val>61</Val>
          <Val>6</Val>
        </Row>
        <Row Name="dumpSymbolNamesFromFile(std::string&amp;)" FullName="__Globals.dumpSymbolNamesFromFile(std::string&amp;)">
          <Val>60</Val>
          <Val>11</Val>
        </Row>
        <Row Name="mightUseCTR(constllvm::Triple&amp;,llvm::BasicBlock*)" FullName="anonymous_namespace{ppcctrloops.cpp}.PPCCTRLoops.mightUseCTR (constllvm::Triple&amp;,llvm::BasicBlock*)">
          <Val>59</Val>
          <Val>7</Val>
        </Row>
        <Row Name="OptimizeMemoryInst(llvm::Instruction*,llvm::Value*,llvm::Type*)" FullName="anonymous_namespace{codegenprepare.cpp}.CodeGenPrepare .OptimizeMemoryInst(llvm::Instruction*,llvm::Value*,llvm::Type*)">
          <Val>59</Val>
          <Val>6</Val>
        </Row>
        <Row Name="FoldBranchToCommonDest(llvm::BranchInst*,constllvm::DataLayout*)" FullName="llvm.__Globals.FoldBranchToCommonDest(llvm::BranchInst* ,constllvm::DataLayout*)">
          <Val>59</Val>
          <Val>6</Val>
        </Row>
        <Row Name="LowerFormalArguments_Darwin(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerFormalArguments_Darwin(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>58</Val>
          <Val>6</Val>
        </Row>
        <Row Name="getEntryCost(&lt;anonymous&gt;::BoUpSLP::TreeEntry*)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.getEntryCost(&lt;anonymous &gt;::BoUpSLP::TreeEntry*)">
          <Val>58</Val>
          <Val>6</Val>
        </Row>
        <Row Name="main()" FullName="__Globals.main()">
          <Val>58</Val>
          <Val>6</Val>
        </Row>
        <Row Name="LowerCall_Darwin(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_Darwin(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>57</Val>
          <Val>6</Val>
        </Row>
        <Row Name="FoldShiftByConstant(llvm::Value*,llvm::Constant*,llvm::BinaryOperator&amp; )" FullName="llvm.InstCombiner.FoldShiftByConstant(llvm::Value*,llvm::Constant* ,llvm::BinaryOperator&amp;)">
          <Val>56</Val>
          <Val>6</Val>
        </Row>
        <Row Name="OptimizeBlock(llvm::MachineBasicBlock*)" FullName="llvm.BranchFolder.OptimizeBlock(llvm::MachineBasicBlock*)">
          <Val>55</Val>
          <Val>9</Val>
        </Row>
        <Row Name="runOnModule(llvm::Module&amp;)" FullName="anonymous_namespace{sccp.cpp}.IPSCCP.runOnModule(llvm::Module&amp;)">
          <Val>55</Val>
          <Val>8</Val>
        </Row>
        <Row Name="GetInstructionClass(constllvm::Value*)" FullName="llvm.objcarc.__Globals.GetInstructionClass(constllvm::Value*)">
          <Val>55</Val>
          <Val>6</Val>
        </Row>
        <Row Name="processRelocationRef(unsignedint,relocation_iterator ,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp;,constSymbolTableMap&amp;,StubMap&amp;)" FullName="llvm.RuntimeDyldELF.processRelocationRef(unsignedint ,relocation_iterator,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp; ,constSymbolTableMap&amp;,StubMap&amp;)">
          <Val>54</Val>
          <Val>11</Val>
        </Row>
        <Row Name="visitFCmpInst(llvm::FCmpInst&amp;)" FullName="llvm.InstCombiner.visitFCmpInst(llvm::FCmpInst&amp;)">
          <Val>54</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ParseCommandLineOptions(int,constchar*const*,constchar*)" FullName="llvm.cl.__Globals.ParseCommandLineOptions(int,constchar*const* ,constchar*)">
          <Val>53</Val>
          <Val>8</Val>
        </Row>
        <Row Name="getMulExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp;,SCEV::NoWrapFlags)" FullName="llvm.ScalarEvolution.getMulExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp; ,SCEV::NoWrapFlags)">
          <Val>53</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitMachineBasicBlockBefore(constllvm::MachineBasicBlock*)" FullName="anonymous_namespace{machineverifier.cpp}.MachineVerifier .visitMachineBasicBlockBefore(constllvm::MachineBasicBlock*)">
          <Val>53</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ConstantFoldCastInstruction(unsignedint,llvm::Constant*,llvm::Type*)" FullName="llvm.__Globals.ConstantFoldCastInstruction(unsignedint,llvm::Constant* ,llvm::Type*)">
          <Val>53</Val>
          <Val>6</Val>
        </Row>
        <Row Name="visitLandingPadInst(llvm::LandingPadInst&amp;)" FullName="llvm.InstCombiner.visitLandingPadInst(llvm::LandingPadInst&amp;)">
          <Val>53</Val>
          <Val>6</Val>
        </Row>
        <Row Name="EvaluateBlock(BasicBlock::iterator,llvm::BasicBlock*&amp;)" FullName="anonymous_namespace{globalopt.cpp}.Evaluator.EvaluateBlock (BasicBlock::iterator,llvm::BasicBlock*&amp;)">
          <Val>52</Val>
          <Val>21</Val>
        </Row>
        <Row Name="DoPromotion(llvm::Function*,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp; ,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp;)" FullName="anonymous_namespace{argumentpromotion.cpp}.ArgPromotion.DoPromotion (llvm::Function*,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp;,SmallPtrSet &lt;llvm::Argument*,8&gt;&amp;)">
          <Val>51</Val>
          <Val>8</Val>
        </Row>
        <Row Name="AddArgumentAttrs(constllvm::CallGraphSCC&amp;)" FullName="anonymous_namespace{functionattrs.cpp}.FunctionAttrs.AddArgumentAttrs (constllvm::CallGraphSCC&amp;)">
          <Val>50</Val>
          <Val>7</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{amdgpuiseldagtodag.cpp}.AMDGPUDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>49</Val>
          <Val>11</Val>
        </Row>
        <Row Name="RemoveDeadStuffFromFunction(llvm::Function*)" FullName="anonymous_namespace{deadargumentelimination.cpp}.DAE .RemoveDeadStuffFromFunction(llvm::Function*)">
          <Val>49</Val>
          <Val>9</Val>
        </Row>
        <Row Name="LowerFormalArguments(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.NVPTXTargetLowering.LowerFormalArguments(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>49</Val>
          <Val>7</Val>
        </Row>
        <Row Name="printModuleLevelGV(constllvm::GlobalVariable*,llvm::raw_ostream&amp;,bool)" FullName="llvm.NVPTXAsmPrinter.printModuleLevelGV(constllvm::GlobalVariable* ,llvm::raw_ostream&amp;,bool)">
          <Val>49</Val>
          <Val>7</Val>
        </Row>
        <Row Name="OptimizeWeakCalls(llvm::Function&amp;)" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt.OptimizeWeakCalls (llvm::Function&amp;)">
          <Val>49</Val>
          <Val>7</Val>
        </Row>
        <Row Name="visitMachineOperand(constllvm::MachineOperand*,unsignedint)" FullName="anonymous_namespace{machineverifier.cpp}.MachineVerifier .visitMachineOperand(constllvm::MachineOperand*,unsignedint)">
          <Val>48</Val>
          <Val>8</Val>
        </Row>
        <Row Name="OptimizeIndividualCalls(llvm::Function&amp;)" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt .OptimizeIndividualCalls(llvm::Function&amp;)">
          <Val>48</Val>
          <Val>8</Val>
        </Row>
        <Row Name="VisitInstructionBottomUp(llvm::Instruction*,llvm::BasicBlock* ,MapVector&lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,&lt;anonymous&gt;::BBState&amp;)" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt .VisitInstructionBottomUp(llvm::Instruction*,llvm::BasicBlock* ,MapVector&lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,&lt;anonymous&gt;::BBState&amp;)">
          <Val>48</Val>
          <Val>8</Val>
        </Row>
        <Row Name="main(int,char**)" FullName="__Globals.main(int,char**)">
          <Val>47</Val>
          <Val>15</Val>
        </Row>
        <Row Name="filterProcessor(bool,bool)" FullName="anonymous_namespace{fixedlendecoderemitter.cpp}.FilterChooser .filterProcessor(bool,bool)">
          <Val>47</Val>
          <Val>8</Val>
        </Row>
        <Row Name="WriteConstants(unsignedint,unsignedint,constllvm::ValueEnumerator&amp; ,llvm::BitstreamWriter&amp;,bool)" FullName="__Globals.WriteConstants(unsignedint,unsignedint ,constllvm::ValueEnumerator&amp;,llvm::BitstreamWriter&amp;,bool)">
          <Val>47</Val>
          <Val>7</Val>
        </Row>
        <Row Name="LowerFormalArguments_64SVR4(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerFormalArguments_64SVR4(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>47</Val>
          <Val>6</Val>
        </Row>
        <Row Name="TailMergeBlocks(llvm::MachineFunction&amp;)" FullName="llvm.BranchFolder.TailMergeBlocks(llvm::MachineFunction&amp;)">
          <Val>46</Val>
          <Val>6</Val>
        </Row>
        <Row Name="WriteConstantInternal(llvm::raw_ostream&amp;,constllvm::Constant* ,llvm::TypePrinting&amp;,llvm::SlotTracker*,constllvm::Module*)" FullName="llvm.__Globals.WriteConstantInternal(llvm::raw_ostream&amp; ,constllvm::Constant*,llvm::TypePrinting&amp;,llvm::SlotTracker* ,constllvm::Module*)">
          <Val>46</Val>
          <Val>6</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>13 768</Val>
          <Val>2 013</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>50.25</Val>
          <Val>7.35</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>21</Val>
          <Val>6</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>262</Val>
          <Val>58</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>37.53</Val>
          <Val>3.69</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>1 408</Val>
          <Val>13.6</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods with too many parameters - critical" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods with too many parameters - critical" QueryId="Query2985029041" NbNodeMatched="171" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;parameters&amp;#0160;-&amp;#0160;critical&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;8&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;with&amp;#0160;more&amp;#0160;than&amp;#0160;8&amp;#0160;parameters&amp;#0160;might&amp;#0160;be&amp;#0160;painful&amp;#0160;to&amp;#0160;call&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;might&amp;#0160;degrade&amp;#0160;performance.&amp;#0160;You&amp;#0160;should&amp;#0160;prefer&amp;#0160;using&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;additional&amp;#0160;properties/fields&amp;#0160;to&amp;#0160;the&amp;#0160;declaring&amp;#0160;type&amp;#0160;to&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;handle&amp;#0160;numerous&amp;#0160;states.&amp;#0160;Another&amp;#0160;alternative&amp;#0160;is&amp;#0160;to&amp;#0160;provide&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;a&amp;#0160;class&amp;#0160;or&amp;#0160;structure&amp;#0160;dedicated&amp;#0160;to&amp;#0160;handle&amp;#0160;arguments&amp;#0160;passing&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;(for&amp;#0160;example&amp;#0160;see&amp;#0160;the&amp;#0160;class&amp;#0160;System.Diagnostics.ProcessStartInfo&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;and&amp;#0160;the&amp;#0160;method&amp;#0160;System.Diagnostics.Process.Start(ProcessStartInfo))&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NbParameters&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbParameters" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbParameters&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># Parameters</Column>
      </Columns>
      <Rows>
        <Row Name="InsertLDR_STR(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator&amp; ,int,bool,llvm::DebugLoc,unsignedint,unsignedint,bool,bool,unsignedint ,bool,bool,bool,bool,ARMCC::CondCodes,unsignedint ,constllvm::TargetInstrInfo*,bool)" FullName="__Globals.InsertLDR_STR(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,int,bool,llvm::DebugLoc,unsignedint ,unsignedint,bool,bool,unsignedint,bool,bool,bool,bool ,ARMCC::CondCodes,unsignedint,constllvm::TargetInstrInfo*,bool)">
          <Val>18</Val>
        </Row>
        <Row Name="findBestDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.findBestDAGFor (DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector &lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)">
          <Val>18</Val>
        </Row>
        <Row Name="createMethod(llvm::DIDescriptor,llvm::StringRef,llvm::StringRef ,llvm::DIFile,unsignedint,llvm::DICompositeType,bool,bool,unsignedint ,unsignedint,llvm::DIType,unsignedint,bool,llvm::Function* ,llvm::MDNode*)" FullName="llvm.DIBuilder.createMethod(llvm::DIDescriptor,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,llvm::DIType,unsignedint,bool ,llvm::Function*,llvm::MDNode*)">
          <Val>15</Val>
        </Row>
        <Row Name="getLoad(ISD::MemIndexedMode,ISD::LoadExtType,llvm::EVT,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo ,llvm::EVT,bool,bool,bool,unsignedint,constllvm::AAMDNodes&amp; ,constllvm::MDNode*)" FullName="llvm.SelectionDAG.getLoad(ISD::MemIndexedMode,ISD::LoadExtType ,llvm::EVT,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,llvm::EVT,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)">
          <Val>15</Val>
        </Row>
        <Row Name="MergeOpsUpdate(llvm::MachineBasicBlock&amp;,MemOpQueue&amp;,unsignedint ,unsignedint,unsignedint,int,unsignedint,bool,int,ARMCC::CondCodes ,unsignedint,unsignedint,llvm::DebugLoc,SmallVectorImpl &lt;MachineBasicBlock::iterator&gt;&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeOpsUpdate(llvm::MachineBasicBlock&amp;,MemOpQueue&amp;,unsignedint ,unsignedint,unsignedint,int,unsignedint,bool,int,ARMCC::CondCodes ,unsignedint,unsignedint,llvm::DebugLoc,SmallVectorImpl &lt;MachineBasicBlock::iterator&gt;&amp;)">
          <Val>14</Val>
        </Row>
        <Row Name="createFunction(llvm::DIDescriptor,llvm::StringRef,llvm::StringRef ,llvm::DIFile,unsignedint,llvm::DICompositeType,bool,bool,unsignedint ,unsignedint,bool,llvm::Function*,llvm::MDNode*,llvm::MDNode*)" FullName="llvm.DIBuilder.createFunction(llvm::DIDescriptor,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,bool,llvm::Function*,llvm::MDNode* ,llvm::MDNode*)">
          <Val>14</Val>
        </Row>
        <Row Name="createFunction(DIScopeRef,llvm::StringRef,llvm::StringRef,llvm::DIFile ,unsignedint,llvm::DICompositeType,bool,bool,unsignedint,unsignedint ,bool,llvm::Function*,llvm::MDNode*,llvm::MDNode*)" FullName="llvm.DIBuilder.createFunction(DIScopeRef,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,bool,llvm::Function*,llvm::MDNode* ,llvm::MDNode*)">
          <Val>14</Val>
        </Row>
        <Row Name="InitMCRegisterInfo(constllvm::MCRegisterDesc*,unsignedint,unsignedint ,unsignedint,constllvm::MCRegisterClass*,unsignedint,constMCPhysReg(* )[2],unsignedint,constMCPhysReg*,constchar*,constuint16_t*,unsignedint ,constllvm::MCRegisterInfo::SubRegCoveredBits*,constuint16_t*)" FullName="llvm.MCRegisterInfo.InitMCRegisterInfo(constllvm::MCRegisterDesc* ,unsignedint,unsignedint,unsignedint,constllvm::MCRegisterClass* ,unsignedint,constMCPhysReg(*)[2],unsignedint,constMCPhysReg* ,constchar*,constuint16_t*,unsignedint ,constllvm::MCRegisterInfo::SubRegCoveredBits*,constuint16_t*)">
          <Val>14</Val>
        </Row>
        <Row Name="DumpSectionData(constllvm::object::MachOObjectFile&amp;,unsignedint ,llvm::StringRef,llvm::StringRef,uint64_t,uint64_t,uint32_t,uint32_t ,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint64_t)" FullName="__Globals.DumpSectionData(constllvm::object::MachOObjectFile&amp; ,unsignedint,llvm::StringRef,llvm::StringRef,uint64_t,uint64_t ,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t ,uint64_t)">
          <Val>14</Val>
        </Row>
        <Row Name="createClassType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,uint64_t,unsignedint,llvm::DIType ,llvm::DIArray,llvm::DIType,llvm::MDNode*,llvm::StringRef)" FullName="llvm.DIBuilder.createClassType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,uint64_t,unsignedint ,llvm::DIType,llvm::DIArray,llvm::DIType,llvm::MDNode*,llvm::StringRef )">
          <Val>13</Val>
        </Row>
        <Row Name="LLVMDisasmContext(std::string,void*,int,LLVMOpInfoCallback ,LLVMSymbolLookupCallback,constllvm::Target*,constllvm::MCAsmInfo* ,constllvm::MCRegisterInfo*,constllvm::MCSubtargetInfo* ,constllvm::MCInstrInfo*,llvm::MCContext*,constllvm::MCDisassembler* ,llvm::MCInstPrinter*)" FullName="llvm.LLVMDisasmContext.LLVMDisasmContext(std::string,void*,int ,LLVMOpInfoCallback,LLVMSymbolLookupCallback,constllvm::Target* ,constllvm::MCAsmInfo*,constllvm::MCRegisterInfo* ,constllvm::MCSubtargetInfo*,constllvm::MCInstrInfo*,llvm::MCContext* ,constllvm::MCDisassembler*,llvm::MCInstPrinter*)">
          <Val>13</Val>
        </Row>
        <Row Name="LowerMemOpCallTo(llvm::SelectionDAG&amp;,llvm::MachineFunction&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,int,unsignedint,bool,bool ,bool,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,SmallVectorImpl&lt;&lt;anonymous &gt;::TailCallArgumentInfo&gt;&amp;,llvm::SDLoc)" FullName="__Globals.LowerMemOpCallTo(llvm::SelectionDAG&amp;,llvm::MachineFunction&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,int,unsignedint,bool,bool ,bool,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,SmallVectorImpl&lt;&lt;anonymous &gt;::TailCallArgumentInfo&gt;&amp;,llvm::SDLoc)">
          <Val>13</Val>
        </Row>
        <Row Name="FinishCall(CallingConv::ID,llvm::SDLoc,bool,bool,llvm::SelectionDAG&amp; ,SmallVector&lt;std::pair&lt;unsignedint,SDValue&gt;,8&gt;&amp;,llvm::SDValue ,llvm::SDValue,llvm::SDValue&amp;,int,unsignedint,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.FinishCall(CallingConv::ID,llvm::SDLoc,bool ,bool,llvm::SelectionDAG&amp;,SmallVector&lt;std::pair&lt;unsignedint,SDValue&gt;,8 &gt;&amp;,llvm::SDValue,llvm::SDValue,llvm::SDValue&amp;,int,unsignedint ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>13</Val>
        </Row>
        <Row Name="getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,unsignedint,llvm::AtomicOrdering ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDVTList,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,unsignedint ,llvm::AtomicOrdering,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>13</Val>
        </Row>
        <Row Name="StoreByValRegs(llvm::CCState&amp;,llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue&amp;,constllvm::Value*,unsignedint,unsignedint,unsignedint ,unsignedint,bool,unsignedint,unsignedint)" FullName="llvm.ARMTargetLowering.StoreByValRegs(llvm::CCState&amp; ,llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue&amp;,constllvm::Value* ,unsignedint,unsignedint,unsignedint,unsignedint,bool,unsignedint ,unsignedint)">
          <Val>12</Val>
        </Row>
        <Row Name="MergeOps(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator,int ,unsignedint,bool,int,ARMCC::CondCodes,unsignedint,unsignedint ,llvm::DebugLoc,ArrayRef&lt;std::pair&lt;unsignedint,bool&gt;&gt;,ArrayRef &lt;unsignedint&gt;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeOps(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator,int ,unsignedint,bool,int,ARMCC::CondCodes,unsignedint,unsignedint ,llvm::DebugLoc,ArrayRef&lt;std::pair&lt;unsignedint,bool&gt;&gt;,ArrayRef &lt;unsignedint&gt;)">
          <Val>12</Val>
        </Row>
        <Row Name="createObjCIVar(llvm::StringRef,llvm::DIFile,unsignedint,uint64_t ,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::StringRef ,llvm::StringRef,llvm::StringRef,unsignedint)" FullName="llvm.DIBuilder.createObjCIVar(llvm::StringRef,llvm::DIFile,unsignedint ,uint64_t,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::StringRef ,llvm::StringRef,llvm::StringRef,unsignedint)">
          <Val>12</Val>
        </Row>
        <Row Name="createStructType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::DIArray ,unsignedint,llvm::DIType,llvm::StringRef)" FullName="llvm.DIBuilder.createStructType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIType ,llvm::DIArray,unsignedint,llvm::DIType,llvm::StringRef)">
          <Val>12</Val>
        </Row>
        <Row Name="InitMCSubtargetInfo(llvm::StringRef,llvm::StringRef,llvm::StringRef ,ArrayRef&lt;llvm::SubtargetFeatureKV&gt;,ArrayRef&lt;llvm::SubtargetFeatureKV&gt; ,constllvm::SubtargetInfoKV*,constllvm::MCWriteProcResEntry* ,constllvm::MCWriteLatencyEntry*,constllvm::MCReadAdvanceEntry* ,constllvm::InstrStage*,constunsignedint*,constunsignedint*)" FullName="llvm.MCSubtargetInfo.InitMCSubtargetInfo(llvm::StringRef ,llvm::StringRef,llvm::StringRef,ArrayRef&lt;llvm::SubtargetFeatureKV&gt; ,ArrayRef&lt;llvm::SubtargetFeatureKV&gt;,constllvm::SubtargetInfoKV* ,constllvm::MCWriteProcResEntry*,constllvm::MCWriteLatencyEntry* ,constllvm::MCReadAdvanceEntry*,constllvm::InstrStage* ,constunsignedint*,constunsignedint*)">
          <Val>12</Val>
        </Row>
        <Row Name="passByValArg(llvm::SDValue,llvm::SDLoc,std::deque&lt;std::pair &lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,llvm::SDValue ,llvm::MachineFrameInfo*,llvm::SelectionDAG&amp;,llvm::SDValue ,constllvm::MipsTargetLowering::MipsCC&amp; ,constllvm::MipsTargetLowering::ByValArgInfo&amp;,constISD::ArgFlagsTy&amp; ,bool)" FullName="llvm.MipsTargetLowering.passByValArg(llvm::SDValue,llvm::SDLoc ,std::deque&lt;std::pair&lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;,llvm::SDValue,llvm::MachineFrameInfo* ,llvm::SelectionDAG&amp;,llvm::SDValue ,constllvm::MipsTargetLowering::MipsCC&amp; ,constllvm::MipsTargetLowering::ByValArgInfo&amp;,constISD::ArgFlagsTy&amp; ,bool)">
          <Val>12</Val>
        </Row>
        <Row Name="ConnectTDBUTraversals(DenseMap&lt;constllvm::BasicBlock*,&lt;anonymous &gt;::BBState&gt;&amp;,MapVector&lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,DenseMap &lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,llvm::Module*,SmallVectorImpl &lt;llvm::Instruction*&gt;&amp;,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,&lt;anonymous&gt;::RRInfo&amp;,&lt;anonymous &gt;::RRInfo&amp;,llvm::Value*,bool,bool&amp;)" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt.ConnectTDBUTraversals (DenseMap&lt;constllvm::BasicBlock*,&lt;anonymous&gt;::BBState&gt;&amp;,MapVector &lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,DenseMap&lt;llvm::Value*,&lt;anonymous &gt;::RRInfo&gt;&amp;,llvm::Module*,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,SmallVectorImpl &lt;llvm::Instruction*&gt;&amp;,&lt;anonymous&gt;::RRInfo&amp;,&lt;anonymous&gt;::RRInfo&amp; ,llvm::Value*,bool,bool&amp;)">
          <Val>12</Val>
        </Row>
        <Row Name="LoopPromoter(llvm::Value*,constSmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,llvm::SSAUpdater&amp;,SmallPtrSet&lt;llvm::Value*,4&gt;&amp;,SmallVectorImpl &lt;llvm::BasicBlock*&gt;&amp;,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,llvm::PredIteratorCache&amp;,llvm::AliasSetTracker&amp;,llvm::LoopInfo&amp; ,llvm::DebugLoc,int,constllvm::AAMDNodes&amp;)" FullName="anonymous_namespace{licm.cpp}.LoopPromoter.LoopPromoter(llvm::Value* ,constSmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,llvm::SSAUpdater&amp; ,SmallPtrSet&lt;llvm::Value*,4&gt;&amp;,SmallVectorImpl&lt;llvm::BasicBlock*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,llvm::PredIteratorCache&amp; ,llvm::AliasSetTracker&amp;,llvm::LoopInfo&amp;,llvm::DebugLoc,int ,constllvm::AAMDNodes&amp;)">
          <Val>12</Val>
        </Row>
        <Row Name="getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDVTList,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,constllvm::SDValue*,llvm::SDUse*,unsignedint ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,constllvm::SDValue*,llvm::SDUse*,unsignedint ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="emitRegPlusImmediate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,unsignedint,unsignedint,int,unsignedint ,ARMCC::CondCodes,unsignedint)" FullName="__Globals.emitRegPlusImmediate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,unsignedint,unsignedint,int,unsignedint ,ARMCC::CondCodes,unsignedint)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.ARMSelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="CanFormLdStDWord(llvm::MachineInstr*,llvm::MachineInstr* ,llvm::DebugLoc&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int&amp;,unsignedint&amp;,ARMCC::CondCodes&amp;,bool&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMPreAllocLoadStoreOpt .CanFormLdStDWord(llvm::MachineInstr*,llvm::MachineInstr* ,llvm::DebugLoc&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int&amp;,unsignedint&amp;,ARMCC::CondCodes&amp;,bool&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.HexagonSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCCCCallTo(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.MSP430TargetLowering.LowerCCCCallTo(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="PrepareTailCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDLoc,bool,int,unsignedint,llvm::SDValue,llvm::SDValue,bool ,SmallVectorImpl&lt;&lt;anonymous&gt;::TailCallArgumentInfo&gt;&amp;)" FullName="__Globals.PrepareTailCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDLoc,bool,int,unsignedint,llvm::SDValue ,llvm::SDValue,bool,SmallVectorImpl&lt;&lt;anonymous&gt;::TailCallArgumentInfo &gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="PrepareCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDLoc,int,bool,SmallVectorImpl&lt;std::pair &lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,std::vector &lt;EVT&gt;&amp;,constllvm::PPCSubtarget&amp;)" FullName="__Globals.PrepareCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDLoc,int,bool,SmallVectorImpl &lt;std::pair&lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,std::vector&lt;EVT&gt;&amp;,constllvm::PPCSubtarget&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_Darwin(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_Darwin(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_64SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_64SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_32SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_32SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="AllocaSliceRewriter(constllvm::DataLayout&amp;,&lt;anonymous&gt;::AllocaSlices&amp;, &lt;anonymous&gt;::SROA&amp;,llvm::AllocaInst&amp;,llvm::AllocaInst&amp;,uint64_t ,uint64_t,bool,bool,SmallPtrSetImpl&lt;llvm::PHINode*&gt;&amp;,SmallPtrSetImpl &lt;llvm::SelectInst*&gt;&amp;)" FullName="anonymous_namespace{sroa.cpp}.AllocaSliceRewriter.AllocaSliceRewriter (constllvm::DataLayout&amp;,&lt;anonymous&gt;::AllocaSlices&amp;,&lt;anonymous&gt;::SROA&amp; ,llvm::AllocaInst&amp;,llvm::AllocaInst&amp;,uint64_t,uint64_t,bool,bool ,SmallPtrSetImpl&lt;llvm::PHINode*&gt;&amp;,SmallPtrSetImpl&lt;llvm::SelectInst*&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="FindOptimalMemOpLowering(std::vector&lt;EVT&gt;&amp;,unsignedint,uint64_t ,unsignedint,unsignedint,bool,bool,bool,bool,llvm::SelectionDAG&amp; ,constllvm::TargetLowering&amp;)" FullName="__Globals.FindOptimalMemOpLowering(std::vector&lt;EVT&gt;&amp;,unsignedint ,uint64_t,unsignedint,unsignedint,bool,bool,bool,bool ,llvm::SelectionDAG&amp;,constllvm::TargetLowering&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="getMemcpyLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="__Globals.getMemcpyLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool ,bool,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="getMemmoveLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="__Globals.getMemmoveLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool ,bool,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="getLoad(llvm::EVT,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)" FullName="llvm.SelectionDAG.getLoad(llvm::EVT,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)">
          <Val>11</Val>
        </Row>
        <Row Name="getExtLoad(ISD::LoadExtType,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool,bool ,unsignedint,constllvm::AAMDNodes&amp;)" FullName="llvm.SelectionDAG.getExtLoad(ISD::LoadExtType,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool ,bool,unsignedint,constllvm::AAMDNodes&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.TargetSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.SystemZSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="pruneDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,std::vector &lt;Value*&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseMap&lt;ValuePair ,size_t&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,ValuePair,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.pruneDAGFor(DenseMap &lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseMap &lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;VPPair&gt;&amp;,DenseMap &lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseMap&lt;ValuePair,size_t&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,ValuePair,bool)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.X86SelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCCCCallTo(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.XCoreTargetLowering.LowerCCCCallTo(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.XCoreSelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool,llvm::SDValue)" FullName="llvm.AArch64TargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool ,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMem(unsignedint,constllvm::MCConstantExpr*,unsignedint ,ARM_AM::ShiftOpc,unsignedint,unsignedint,bool,llvm::SMLoc,llvm::SMLoc ,llvm::SMLoc)" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand.CreateMem(unsignedint ,constllvm::MCConstantExpr*,unsignedint,ARM_AM::ShiftOpc,unsignedint ,unsignedint,bool,llvm::SMLoc,llvm::SMLoc,llvm::SMLoc)">
          <Val>10</Val>
        </Row>
        <Row Name="emitPostLd(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)" FullName="__Globals.emitPostLd(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="emitPostSt(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)" FullName="__Globals.emitPostSt(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="emitThumbRegPlusImmInReg(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,bool,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)" FullName="__Globals.emitThumbRegPlusImmInReg(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,bool,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="emitARMRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitARMRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="emitT2RegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitT2RegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="PassF64ArgInRegs(llvm::SDLoc,llvm::SelectionDAG&amp;,llvm::SDValue ,llvm::SDValue&amp;,RegsToPassVector&amp;,llvm::CCValAssign&amp; ,llvm::CCValAssign&amp;,llvm::SDValue&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,ISD::ArgFlagsTy)" FullName="llvm.ARMTargetLowering.PassF64ArgInRegs(llvm::SDLoc ,llvm::SelectionDAG&amp;,llvm::SDValue,llvm::SDValue&amp;,RegsToPassVector&amp; ,llvm::CCValAssign&amp;,llvm::CCValAssign&amp;,llvm::SDValue&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;,ISD::ArgFlagsTy)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool,llvm::SDValue)" FullName="llvm.ARMTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool ,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="MergeLDR_STR(llvm::MachineBasicBlock&amp;,unsignedint,unsignedint,int ,unsignedint,ARMCC::CondCodes,unsignedint,unsignedint,MemOpQueue&amp; ,SmallVectorImpl&lt;MachineBasicBlock::iterator&gt;&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeLDR_STR(llvm::MachineBasicBlock&amp;,unsignedint,unsignedint,int ,unsignedint,ARMCC::CondCodes,unsignedint,unsignedint,MemOpQueue&amp; ,SmallVectorImpl&lt;MachineBasicBlock::iterator&gt;&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="computeKnownBitsAddSub(bool,llvm::Value*,llvm::Value*,bool ,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="__Globals.computeKnownBitsAddSub(bool,llvm::Value*,llvm::Value*,bool ,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateReg(unsignedint,bool,bool,bool,bool,bool,bool,unsignedint,bool ,bool)" FullName="llvm.MachineOperand.CreateReg(unsignedint,bool,bool,bool,bool,bool ,bool,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="createCompileUnit(unsignedint,llvm::StringRef,llvm::StringRef ,llvm::StringRef,bool,llvm::StringRef,unsignedint,llvm::StringRef ,llvm::DIBuilder::DebugEmissionKind,bool)" FullName="llvm.DIBuilder.createCompileUnit(unsignedint,llvm::StringRef ,llvm::StringRef,llvm::StringRef,bool,llvm::StringRef,unsignedint ,llvm::StringRef,llvm::DIBuilder::DebugEmissionKind,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="createUnionType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIArray,unsignedint ,llvm::StringRef)" FullName="llvm.DIBuilder.createUnionType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIArray ,unsignedint,llvm::StringRef)">
          <Val>10</Val>
        </Row>
        <Row Name="GlobalVariable(llvm::Module&amp;,llvm::Type*,bool ,llvm::GlobalValue::LinkageTypes,llvm::Constant*,constllvm::Twine&amp; ,llvm::GlobalVariable*,llvm::GlobalValue::ThreadLocalMode,unsignedint ,bool)" FullName="llvm.GlobalVariable.GlobalVariable(llvm::Module&amp;,llvm::Type*,bool ,llvm::GlobalValue::LinkageTypes,llvm::Constant*,constllvm::Twine&amp; ,llvm::GlobalVariable*,llvm::GlobalValue::ThreadLocalMode,unsignedint ,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,llvm::SDValue)" FullName="llvm.HexagonTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="WriteSecHdrEntry(uint32_t,uint32_t,uint64_t,uint64_t,uint64_t,uint64_t ,uint32_t,uint32_t,uint64_t,uint64_t)" FullName="anonymous_namespace{elfobjectwriter.cpp}.ELFObjectWriter .WriteSecHdrEntry(uint32_t,uint32_t,uint64_t,uint64_t,uint64_t ,uint64_t,uint32_t,uint32_t,uint64_t,uint64_t)">
          <Val>10</Val>
        </Row>
        <Row Name="parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp;,unsignedint&amp; ,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp; ,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)" FullName="llvm.MCAsmParser.parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp; ,unsignedint&amp;,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl &lt;std::string&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp;,unsignedint&amp; ,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp; ,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)" FullName="anonymous_namespace{asmparser.cpp}.AsmParser.parseMSInlineAsm(void* ,std::string&amp;,unsignedint&amp;,unsignedint&amp;,SmallVectorImpl&lt;std::pair &lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp;,SmallVectorImpl &lt;std::string&gt;&amp;,constllvm::MCInstrInfo*,constllvm::MCInstPrinter* ,llvm::MCAsmParserSemaCallback&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constllvm::SDNode*,constllvm::Type*)" FullName="llvm.MipsTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constllvm::SDNode*,constllvm::Type*)">
          <Val>10</Val>
        </Row>
        <Row Name="SelectMUBUFAddr32(llvm::SDValue,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;)" FullName="anonymous_namespace{amdgpuiseldagtodag.cpp}.AMDGPUDAGToDAGISel .SelectMUBUFAddr32(llvm::SDValue,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="RelocationEntry(unsignedint,uint64_t,uint32_t,int64_t,unsignedint ,uint64_t,unsignedint,uint64_t,bool,unsignedint)" FullName="llvm.RelocationEntry.RelocationEntry(unsignedint,uint64_t,uint32_t ,int64_t,unsignedint,uint64_t,unsignedint,uint64_t,bool,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="RateFormula(constllvm::TargetTransformInfo&amp;,const&lt;anonymous&gt;::Formula&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;&amp;,constDenseSet&lt;constllvm::SCEV*&gt;&amp; ,constllvm::Loop*,constSmallVectorImpl&lt;int64_t&gt;&amp; ,llvm::ScalarEvolution&amp;,llvm::DominatorTree&amp;,const&lt;anonymous&gt;::LSRUse&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;*)" FullName="anonymous_namespace{loopstrengthreduce.cpp}.Cost.RateFormula (constllvm::TargetTransformInfo&amp;,const&lt;anonymous&gt;::Formula&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;&amp;,constDenseSet&lt;constllvm::SCEV*&gt;&amp; ,constllvm::Loop*,constSmallVectorImpl&lt;int64_t&gt;&amp; ,llvm::ScalarEvolution&amp;,llvm::DominatorTree&amp;,const&lt;anonymous&gt;::LSRUse&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;*)">
          <Val>10</Val>
        </Row>
        <Row Name="getMemcpy(llvm::SDValue,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)" FullName="llvm.SelectionDAG.getMemcpy(llvm::SDValue,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>10</Val>
        </Row>
        <Row Name="getAtomic(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue,llvm::SDValue,constllvm::Value*,unsignedint ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomic(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue,constllvm::Value* ,unsignedint,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>10</Val>
        </Row>
        <Row Name="getMemIntrinsicNode(unsignedint,llvm::SDLoc,llvm::SDVTList,ArrayRef &lt;llvm::SDValue&gt;,llvm::EVT,llvm::MachinePointerInfo,unsignedint,bool ,bool,bool)" FullName="llvm.SelectionDAG.getMemIntrinsicNode(unsignedint,llvm::SDLoc ,llvm::SDVTList,ArrayRef&lt;llvm::SDValue&gt;,llvm::EVT ,llvm::MachinePointerInfo,unsignedint,bool,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="getTruncStore(llvm::SDValue,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,llvm::EVT,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;)" FullName="llvm.SelectionDAG.getTruncStore(llvm::SDValue,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool ,bool,unsignedint,constllvm::AAMDNodes&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::MachineMemOperand* ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>10</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemmove(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.TargetSelectionDAGInfo.EmitTargetCodeForMemmove (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>10</Val>
        </Row>
        <Row Name="SMDiagnostic(constllvm::SourceMgr&amp;,llvm::SMLoc,llvm::StringRef,int,int ,SourceMgr::DiagKind,llvm::StringRef,llvm::StringRef,ArrayRef &lt;std::pair&lt;unsignedint,unsignedint&gt;&gt;,ArrayRef&lt;llvm::SMFixIt&gt;)" FullName="llvm.SMDiagnostic.SMDiagnostic(constllvm::SourceMgr&amp;,llvm::SMLoc ,llvm::StringRef,int,int,SourceMgr::DiagKind,llvm::StringRef ,llvm::StringRef,ArrayRef&lt;std::pair&lt;unsignedint,unsignedint&gt;&gt;,ArrayRef &lt;llvm::SMFixIt&gt;)">
          <Val>10</Val>
        </Row>
        <Row Name="choosePairs(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.choosePairs(DenseMap &lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="expandIEChain(llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction* ,unsignedint,llvm::Value*&amp;,unsignedint,llvm::Type*,llvm::Type*,bool ,unsignedint)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.expandIEChain (llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction*,unsignedint ,llvm::Value*&amp;,unsignedint,llvm::Type*,llvm::Type*,bool,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="getPairPtrInfo(llvm::Instruction*,llvm::Instruction*,llvm::Value*&amp; ,llvm::Value*&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int64_t&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.getPairPtrInfo (llvm::Instruction*,llvm::Instruction*,llvm::Value*&amp;,llvm::Value*&amp; ,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,int64_t&amp;,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMem(unsignedint,constllvm::MCExpr*,unsignedint,unsignedint ,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint,llvm::StringRef,void* )" FullName="llvm.X86Operand.CreateMem(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,void*)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMemForInlineAsm(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,llvm::InlineAsmIdentifierInfo&amp;)" FullName="anonymous_namespace{x86asmparser.cpp}.X86AsmParser .CreateMemForInlineAsm(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,llvm::InlineAsmIdentifierInfo&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="getGatherNode(unsignedint,llvm::SDValue,llvm::SelectionDAG&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,constllvm::X86Subtarget*)" FullName="__Globals.getGatherNode(unsignedint,llvm::SDValue,llvm::SelectionDAG&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,constllvm::X86Subtarget*)">
          <Val>10</Val>
        </Row>
        <Row Name="IsEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,llvm::Type*,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.IsEligibleForTailCallOptimization(llvm::SDValue ,CallingConv::ID,bool,bool,bool,llvm::Type*,constSmallVectorImpl &lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="emitFrameOffset(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,llvm::DebugLoc,unsignedint,unsignedint,int ,constllvm::TargetInstrInfo*,MachineInstr::MIFlag,bool)" FullName="llvm.__Globals.emitFrameOffset(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo*,MachineInstr::MIFlag,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="isEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp; ,llvm::SelectionDAG&amp;)" FullName="llvm.AArch64TargetLowering.isEligibleForTailCallOptimization (llvm::SDValue,CallingConv::ID,bool,bool,bool,constSmallVectorImpl &lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>9</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemset(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo)" FullName="llvm.AArch64SelectionDAGInfo.EmitTargetCodeForMemset (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,llvm::MachinePointerInfo )">
          <Val>9</Val>
        </Row>
        <Row Name="AArch64TargetMachine(constllvm::Target&amp;,llvm::StringRef ,llvm::StringRef,llvm::StringRef,constllvm::TargetOptions&amp; ,Reloc::Model,CodeModel::Model,CodeGenOpt::Level,bool)" FullName="llvm.AArch64TargetMachine.AArch64TargetMachine(constllvm::Target&amp; ,llvm::StringRef,llvm::StringRef,llvm::StringRef ,constllvm::TargetOptions&amp;,Reloc::Model,CodeModel::Model ,CodeGenOpt::Level,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="createMCStreamer(constllvm::Target&amp;,llvm::StringRef,llvm::MCContext&amp; ,llvm::MCAsmBackend&amp;,llvm::raw_ostream&amp;,llvm::MCCodeEmitter* ,constllvm::MCSubtargetInfo&amp;,bool,bool)" FullName="__Globals.createMCStreamer(constllvm::Target&amp;,llvm::StringRef ,llvm::MCContext&amp;,llvm::MCAsmBackend&amp;,llvm::raw_ostream&amp; ,llvm::MCCodeEmitter*,constllvm::MCSubtargetInfo&amp;,bool,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="emitSPUpdate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,int,unsignedint,ARMCC::CondCodes ,unsignedint)" FullName="__Globals.emitSPUpdate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,int,unsignedint,ARMCC::CondCodes ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitThumbRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitThumbRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.ARMBaseRegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitPushInst(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,conststd::vector&lt;CalleeSavedInfo&gt;&amp;,unsignedint,unsignedint,bool,bool (*)(unsignedint,bool),unsignedint,unsignedint)" FullName="llvm.ARMFrameLowering.emitPushInst(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,conststd::vector&lt;CalleeSavedInfo&gt;&amp; ,unsignedint,unsignedint,bool,bool(*)(unsignedint,bool),unsignedint ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitPopInst(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,conststd::vector&lt;CalleeSavedInfo&gt;&amp;,unsignedint,unsignedint,bool,bool ,bool(*)(unsignedint,bool),unsignedint)" FullName="llvm.ARMFrameLowering.emitPopInst(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,conststd::vector&lt;CalleeSavedInfo&gt;&amp; ,unsignedint,unsignedint,bool,bool,bool(*)(unsignedint,bool) ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="IsEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp; ,llvm::SelectionDAG&amp;)" FullName="llvm.ARMTargetLowering.IsEligibleForTailCallOptimization(llvm::SDValue ,CallingConv::ID,bool,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>9</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemset(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo)" FullName="llvm.ARMSelectionDAGInfo.EmitTargetCodeForMemset(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,llvm::MachinePointerInfo)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.Thumb1RegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.Thumb2RegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="ARMBaseTargetMachine(constllvm::Target&amp;,llvm::StringRef ,llvm::StringRef,llvm::StringRef,constllvm::TargetOptions&amp; ,Reloc::Model,CodeModel::Model,CodeGenOpt::Level,bool)" FullName="llvm.ARMBaseTargetMachine.ARMBaseTargetMachine(constllvm::Target&amp; ,llvm::StringRef,llvm::StringRef,llvm::StringRef ,constllvm::TargetOptions&amp;,Reloc::Model,CodeModel::Model ,CodeGenOpt::Level,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>1 730</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>10.12</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>9</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>18</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>1.63</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>2.65</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Quick summary of methods to refactor" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Quick summary of methods to refactor" QueryId="Query4115833988" NbNodeMatched="5860" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Quick&amp;#0160;summary&amp;#0160;of&amp;#0160;methods&amp;#0160;to&amp;#0160;refactor&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Code&amp;#0160;Metrics'&amp;#0160;definitions&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;30&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MaxNestedLoop&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;3&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbILInstructions" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbILInstructions&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#CC" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#CC&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#ILNestingDepth" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#ILNestingDepth&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbParameters" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbParameters&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbVariables&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;8&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbVariables" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbVariables&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbOverloads&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;6&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbOverloads" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbOverloads&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MaxNestedLoop&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbVariables&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbOverloads&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&amp;#0160;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># lines of code (LOC)</Column>
        <Column>MaxNestedLoop</Column>
        <Column>Cyclomatic Complexity (CC)</Column>
        <Column>NestingDepth</Column>
        <Column># Parameters</Column>
        <Column># Variables</Column>
        <Column># Overloads</Column>
      </Columns>
      <Rows>
        <Row Name="TestBody()" FullName="MapVectorTest_insert_pop_Test.TestBody()">
          <Val>64</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="SmallPtrSetTest_GrowthTest_Test.TestBody()">
          <Val>178</Val>
          <Val>3</Val>
          <Val>11</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>12</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="SmallPtrSetTest_CopyAndMoveTest_Test.TestBody()">
          <Val>124</Val>
          <Val>6</Val>
          <Val>12</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>11</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="SmallPtrSetTest_SwapTest_Test.TestBody()">
          <Val>105</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test.TestBody()">
          <Val>642</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test.TestBody()">
          <Val>51</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>8</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test .TestBody()">
          <Val>117</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>5</Val>
          <Val>0</Val>
          <Val>13</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test.TestBody()">
          <Val>43</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test.TestBody()">
          <Val>41</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test.TestBody()">
          <Val>77</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test.TestBody()">
          <Val>91</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test.TestBody()">
          <Val>57</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test.TestBody()">
          <Val>115</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test .TestBody()">
          <Val>46</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test.TestBody ()">
          <Val>31</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test.TestBody()">
          <Val>39</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test.TestBody()">
          <Val>51</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test.TestBody()">
          <Val>41</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test.TestBody()">
          <Val>71</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test .TestBody()">
          <Val>164</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test .TestBody()">
          <Val>60</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test.TestBody()">
          <Val>60</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test.TestBody ()">
          <Val>19</Val>
          <Val>2</Val>
          <Val>4</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>9</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test.TestBody ()">
          <Val>124</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test .TestBody()">
          <Val>54</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test.TestBody()">
          <Val>27</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>23</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test .TestBody()">
          <Val>27</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>23</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test .TestBody()">
          <Val>28</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>24</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test.TestBody( )">
          <Val>28</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>24</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test.TestBody()">
          <Val>34</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test .TestBody()">
          <Val>82</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i1_Test.TestBody()">
          <Val>153</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>11</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test.TestBody( )">
          <Val>137</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test .TestBody()">
          <Val>31</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test.TestBody()">
          <Val>164</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test.TestBody()">
          <Val>58</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_tcDecrement_Test.TestBody ()">
          <Val>162</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>8</Val>
          <Val>0</Val>
          <Val>18</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_arrayAccess_Test.TestBody ()">
          <Val>34</Val>
          <Val>3</Val>
          <Val>4</Val>
          <Val>4</Val>
          <Val>0</Val>
          <Val>8</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_nearestLogBase2_Test .TestBody()">
          <Val>129</Val>
          <Val>0</Val>
          <Val>7</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>17</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apsinttest.cpp}.APSIntTest_MoveTest_Test.TestBody( )">
          <Val>70</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>6</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.SCCIteratorTest_AllSmallGraphs_Test.TestBody()">
          <Val>77</Val>
          <Val>5</Val>
          <Val>17</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>20</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>343</Val>
          <Val>2</Val>
          <Val>3</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>7</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>62</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>93</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_BinOps_Test &lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>50</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_RangeOps_Test &lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>126</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>7</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>62</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp} .DAGDeltaAlgorithmTest_Basic_Test.TestBody()">
          <Val>46</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_SwapTest_Test &lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>61</Val>
          <Val>2</Val>
          <Val>4</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashValueBasicTest_Test.TestBody()">
          <Val>30</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>9</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp}.HashingTest_HashValueStdPair_Test .TestBody()">
          <Val>36</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeBasicTest_Test.TestBody()">
          <Val>135</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>17</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeLengthDiff_Test.TestBody()">
          <Val>106</Val>
          <Val>4</Val>
          <Val>5</Val>
          <Val>5</Val>
          <Val>0</Val>
          <Val>21</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineBasicTest_Test.TestBody()">
          <Val>139</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>18</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_SpliceOne_Test.TestBody()">
          <Val>38</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_UnsafeClear_Test.TestBody ()">
          <Val>55</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_OneElemIntSetTest_Test.TestBody()">
          <Val>43</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_MultiElemIntSetTest_Test.TestBody()">
          <Val>52</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>5</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_Callback2CharSetTest_Test.TestBody()">
          <Val>35</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>7</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_IterLongSetTest_Test.TestBody()">
          <Val>57</Val>
          <Val>3</Val>
          <Val>4</Val>
          <Val>4</Val>
          <Val>0</Val>
          <Val>11</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{inteqclassestest.cpp}.IntEqClasses_Simple_Test .TestBody()">
          <Val>142</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp}.IntervalMapTest_EmptyMap_Test .TestBody()">
          <Val>59</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>5</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_SingleEntryMap_Test.TestBody()">
          <Val>133</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RootCoalescing_Test.TestBody()">
          <Val>128</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RootMultiCoalescing_Test.TestBody()">
          <Val>232</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp}.IntervalMapTest_Branched_Test .TestBody()">
          <Val>233</Val>
          <Val>4</Val>
          <Val>6</Val>
          <Val>5</Val>
          <Val>0</Val>
          <Val>8</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_Branched2_Test.TestBody()">
          <Val>117</Val>
          <Val>2</Val>
          <Val>5</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>7</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_SmallMaps_Test.TestBody()">
          <Val>76</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>6</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_BigMaps_Test.TestBody()">
          <Val>184</Val>
          <Val>1</Val>
          <Val>4</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>11</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{makeuniquetest.cpp} .MakeUniqueTest_SingleObject_Test.TestBody()">
          <Val>74</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>11</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyConstructionTest_Test.TestBody()">
          <Val>31</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_Operation_Test.TestBody()">
          <Val>114</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_UnsignedValues_Test.TestBody()">
          <Val>34</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_SignedValues_Test.TestBody()">
          <Val>34</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallstringtest.cpp}.SmallStringTest_Find_Test .TestBody()">
          <Val>57</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallstringtest.cpp} .StringRefTest_Comparisons_Test.TestBody()">
          <Val>57</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_PushPopTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>73</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>3</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_IterationTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>53</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_DirectVectorTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>45</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsebitvectortest.cpp} .SparseBitVectorTest_TrivialOperation_Test.TestBody()">
          <Val>35</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_SingleEntrySet_Test.TestBody()">
          <Val>77</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_MultipleEntrySet_Test.TestBody()">
          <Val>159</Val>
          <Val>1</Val>
          <Val>4</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>5</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_Iterators_Test.TestBody()">
          <Val>74</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>6</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_AltStructSet_Test.TestBody()">
          <Val>42</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsesettest.cpp}.SparseSetTest_EmptySet_Test .TestBody()">
          <Val>34</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsesettest.cpp} .SparseSetTest_SingleEntrySet_Test.TestBody()">
          <Val>55</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsesettest.cpp} .SparseSetTest_MultipleEntrySet_Test.TestBody()">
          <Val>131</Val>
          <Val>1</Val>
          <Val>4</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>6</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsesettest.cpp}.SparseSetTest_AltStructSet_Test .TestBody()">
          <Val>31</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="assertSingleItemMap()" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest .assertSingleItemMap()">
          <Val>32</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_InsertPairTest_Test.TestBody()">
          <Val>35</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest_MoveDtor_Test .TestBody()">
          <Val>47</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>4</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_StringOps_Test .TestBody()">
          <Val>70</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Split2_Test .TestBody()">
          <Val>496</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Trim_Test .TestBody()">
          <Val>32</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>3</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Find_Test .TestBody()">
          <Val>62</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>2</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_getAsInteger_Test .TestBody()">
          <Val>154</Val>
          <Val>2</Val>
          <Val>11</Val>
          <Val>19</Val>
          <Val>0</Val>
          <Val>18</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_joinStrings_Test .TestBody()">
          <Val>32</Val>
          <Val>1</Val>
          <Val>2</Val>
          <Val>2</Val>
          <Val>0</Val>
          <Val>9</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_PushPopBack_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>32</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_CopyAndMoveTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>109</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_BasicParsing_Test .TestBody()">
          <Val>105</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>1</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>288 195</Val>
          <Val>3 747</Val>
          <Val>80 119</Val>
          <Val>16 913</Val>
          <Val>17 024</Val>
          <Val>68 174</Val>
          <Val>13 805</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>49.18</Val>
          <Val>0.64</Val>
          <Val>13.67</Val>
          <Val>2.89</Val>
          <Val>2.91</Val>
          <Val>11.63</Val>
          <Val>2.36</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>2 102</Val>
          <Val>11</Val>
          <Val>741</Val>
          <Val>58</Val>
          <Val>18</Val>
          <Val>384</Val>
          <Val>21</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>79.18</Val>
          <Val>0.93</Val>
          <Val>23.12</Val>
          <Val>2.1</Val>
          <Val>2.5</Val>
          <Val>14.78</Val>
          <Val>3.95</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>6 269</Val>
          <Val>0.86</Val>
          <Val>534.49</Val>
          <Val>4.39</Val>
          <Val>6.24</Val>
          <Val>218.47</Val>
          <Val>15.59</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods too big" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods too big" QueryId="Query2087485368" NbNodeMatched="3292" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;too&amp;#0160;big&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;30&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;NbLinesOfCode&amp;#0160;&amp;gt;&amp;#0160;30&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;are&amp;#0160;extremely&amp;#0160;complex&amp;#0160;and&amp;#0160;should&amp;#0160;be&amp;#0160;split&amp;#0160;in&amp;#0160;smaller&amp;#0160;methods.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NbLinesOfCode&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbLinesOfCode&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># lines of code (LOC)</Column>
      </Columns>
      <Rows>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_matchScales_Test.TestBody()">
          <Val>2 102</Val>
        </Row>
        <Row Name="processInstruction(llvm::MCInst&amp;,constOperandVector&amp;)" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser.processInstruction (llvm::MCInst&amp;,constOperandVector&amp;)">
          <Val>1 524</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_AsInstructionsTest_Test.TestBody()">
          <Val>1 400</Val>
        </Row>
        <Row Name="visitIntrinsicCall(constllvm::CallInst&amp;,unsignedint)" FullName="llvm.SelectionDAGBuilder.visitIntrinsicCall(constllvm::CallInst&amp; ,unsignedint)">
          <Val>1 224</Val>
        </Row>
        <Row Name="SelectSurfaceIntrinsic(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectSurfaceIntrinsic(llvm::SDNode*)">
          <Val>1 201</Val>
        </Row>
        <Row Name="SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value*,constQuery&amp; ,unsignedint)" FullName="__Globals.SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value* ,constQuery&amp;,unsignedint)">
          <Val>1 051</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel.Select (llvm::SDNode*)">
          <Val>1 011</Val>
        </Row>
        <Row Name="resetOperationActions()" FullName="llvm.X86TargetLowering.resetOperationActions()">
          <Val>953</Val>
        </Row>
        <Row Name="printInstruction(constllvm::Instruction*,conststd::string&amp;)" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter.printInstruction (constllvm::Instruction*,conststd::string&amp;)">
          <Val>885</Val>
        </Row>
        <Row Name="SelectLDGLDU(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectLDGLDU(llvm::SDNode*)">
          <Val>832</Val>
        </Row>
        <Row Name="getELFRelocationTypeName(uint32_t,uint32_t)" FullName="llvm.object.__Globals.getELFRelocationTypeName(uint32_t,uint32_t)">
          <Val>797</Val>
        </Row>
        <Row Name="LowerINTRINSIC_WO_CHAIN(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="__Globals.LowerINTRINSIC_WO_CHAIN(llvm::SDValue,llvm::SelectionDAG&amp;)">
          <Val>774</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.NVPTXTargetLowering.getTargetNodeName(unsignedint)">
          <Val>761</Val>
        </Row>
        <Row Name="inferPrototypeAttributes(llvm::Function&amp;)" FullName="anonymous_namespace{functionattrs.cpp}.FunctionAttrs .inferPrototypeAttributes(llvm::Function&amp;)">
          <Val>740</Val>
        </Row>
        <Row Name="ExpandNode(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandNode (llvm::SDNode*)">
          <Val>721</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>684</Val>
        </Row>
        <Row Name="visitICmpInst(llvm::ICmpInst&amp;)" FullName="llvm.InstCombiner.visitICmpInst(llvm::ICmpInst&amp;)">
          <Val>681</Val>
        </Row>
        <Row Name="ParseFunctionBody(llvm::Function*)" FullName="llvm.BitcodeReader.ParseFunctionBody(llvm::Function*)">
          <Val>667</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test.TestBody()">
          <Val>642</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>638</Val>
        </Row>
        <Row Name="TestBody()" FullName="ConvertUTFTest_UTF8ToUTF32Lenient_Test.TestBody()">
          <Val>563</Val>
        </Row>
        <Row Name="emitInstruction(llvm::MachineInstr&amp;,constllvm::MCInstrDesc*)" FullName="anonymous_namespace{x86codeemitter.cpp}.Emitter&lt;CodeEmitter&gt; .emitInstruction(llvm::MachineInstr&amp;,constllvm::MCInstrDesc*)">
          <Val>558</Val>
        </Row>
        <Row Name="LexIdentifier()" FullName="llvm.LLLexer.LexIdentifier()">
          <Val>522</Val>
        </Row>
        <Row Name="SelectCodeCommon(llvm::SDNode*,constunsignedchar*,unsignedint)" FullName="llvm.SelectionDAGISel.SelectCodeCommon(llvm::SDNode* ,constunsignedchar*,unsignedint)">
          <Val>518</Val>
        </Row>
        <Row Name="SelectTextureIntrinsic(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectTextureIntrinsic(llvm::SDNode*)">
          <Val>516</Val>
        </Row>
        <Row Name="getOperationName(constllvm::SelectionDAG*)" FullName="llvm.SDNode.getOperationName(constllvm::SelectionDAG*)">
          <Val>516</Val>
        </Row>
        <Row Name="SelectLoadVector(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectLoadVector(llvm::SDNode*)">
          <Val>513</Val>
        </Row>
        <Row Name="enumeration(llvm::yaml::IO&amp;,ELFYAML::ELF_REL&amp;)" FullName="llvm.yaml.ScalarEnumerationTraits&lt;llvm::ELFYAML::ELF_REL&gt;.enumeration (llvm::yaml::IO&amp;,ELFYAML::ELF_REL&amp;)">
          <Val>497</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Split2_Test .TestBody()">
          <Val>496</Val>
        </Row>
        <Row Name="SimplifySetCC(llvm::EVT,llvm::SDValue,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)" FullName="llvm.TargetLowering.SimplifySetCC(llvm::EVT,llvm::SDValue ,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)">
          <Val>473</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{lazycallgraphtest.cpp} .LazyCallGraphTest_BasicGraphFormation_Test.TestBody()">
          <Val>461</Val>
        </Row>
        <Row Name="getConstantValue(constllvm::Constant*)" FullName="llvm.ExecutionEngine.getConstantValue(constllvm::Constant*)">
          <Val>461</Val>
        </Row>
        <Row Name="visitCallInst(llvm::CallInst&amp;)" FullName="llvm.InstCombiner.visitCallInst(llvm::CallInst&amp;)">
          <Val>440</Val>
        </Row>
        <Row Name="PPCTargetLowering(llvm::PPCTargetMachine&amp;)" FullName="llvm.PPCTargetLowering.PPCTargetLowering(llvm::PPCTargetMachine&amp;)">
          <Val>425</Val>
        </Row>
        <Row Name="SimplifyDemandedBits(llvm::SDValue,constllvm::APInt&amp;,llvm::APInt&amp; ,llvm::APInt&amp;,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)" FullName="llvm.TargetLowering.SimplifyDemandedBits(llvm::SDValue ,constllvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)">
          <Val>422</Val>
        </Row>
        <Row Name="SelectStoreVector(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectStoreVector(llvm::SDNode*)">
          <Val>417</Val>
        </Row>
        <Row Name="EncodeInstruction(constllvm::MCInst&amp;,llvm::raw_ostream&amp; ,SmallVectorImpl&lt;llvm::MCFixup&gt;&amp;,constllvm::MCSubtargetInfo&amp;)" FullName="anonymous_namespace{x86mccodeemitter.cpp}.X86MCCodeEmitter .EncodeInstruction(constllvm::MCInst&amp;,llvm::raw_ostream&amp; ,SmallVectorImpl&lt;llvm::MCFixup&gt;&amp;,constllvm::MCSubtargetInfo&amp;)">
          <Val>409</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="llvm.__Globals.computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>404</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>399</Val>
        </Row>
        <Row Name="ARMTargetLowering(llvm::TargetMachine&amp;)" FullName="llvm.ARMTargetLowering.ARMTargetLowering(llvm::TargetMachine&amp;)">
          <Val>396</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,bool,bool,bool)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,bool,bool,bool)">
          <Val>388</Val>
        </Row>
        <Row Name="SimplifyDemandedUseBits(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedUseBits(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)">
          <Val>387</Val>
        </Row>
        <Row Name="readPrefixes(structInternalInstruction*)" FullName="__Globals.readPrefixes(structInternalInstruction*)">
          <Val>386</Val>
        </Row>
        <Row Name="visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp;,llvm::Instruction* ,llvm::ConstantInt*)" FullName="llvm.InstCombiner.visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp; ,llvm::Instruction*,llvm::ConstantInt*)">
          <Val>385</Val>
        </Row>
        <Row Name="getRealVLDOpcode(unsignedint,unsignedint&amp;)" FullName="__Globals.getRealVLDOpcode(unsignedint,unsignedint&amp;)">
          <Val>381</Val>
        </Row>
        <Row Name="printConstant(constllvm::Constant*)" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter.printConstant (constllvm::Constant*)">
          <Val>380</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.NVPTXTargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>377</Val>
        </Row>
        <Row Name="parseStatement(&lt;anonymous&gt;::ParseStatementInfo&amp;)" FullName="anonymous_namespace{asmparser.cpp}.AsmParser.parseStatement(&lt;anonymous &gt;::ParseStatementInfo&amp;)">
          <Val>367</Val>
        </Row>
        <Row Name="InitLibcallNames(constchar**,constllvm::Triple&amp;)" FullName="__Globals.InitLibcallNames(constchar**,constllvm::Triple&amp;)">
          <Val>360</Val>
        </Row>
        <Row Name="ParseValID(llvm::ValID&amp;,llvm::LLParser::PerFunctionState*)" FullName="llvm.LLParser.ParseValID(llvm::ValID&amp; ,llvm::LLParser::PerFunctionState*)">
          <Val>357</Val>
        </Row>
        <Row Name="SelectLoad(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel.SelectLoad (llvm::SDNode*)">
          <Val>353</Val>
        </Row>
        <Row Name="SelectStore(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel.SelectStore (llvm::SDNode*)">
          <Val>350</Val>
        </Row>
        <Row Name="ParseConstants()" FullName="llvm.BitcodeReader.ParseConstants()">
          <Val>348</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>343</Val>
        </Row>
        <Row Name="processRelocationRef(unsignedint,relocation_iterator ,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp;,constSymbolTableMap&amp;,StubMap&amp;)" FullName="llvm.RuntimeDyldELF.processRelocationRef(unsignedint ,relocation_iterator,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp; ,constSymbolTableMap&amp;,StubMap&amp;)">
          <Val>340</Val>
        </Row>
        <Row Name="getOpcForTextureInstr(unsignedint)" FullName="__Globals.getOpcForTextureInstr(unsignedint)">
          <Val>339</Val>
        </Row>
        <Row Name="getOpcForSurfaceInstr(unsignedint)" FullName="__Globals.getOpcForSurfaceInstr(unsignedint)">
          <Val>333</Val>
        </Row>
        <Row Name="ConstantFoldScalarCall(llvm::StringRef,unsignedint,llvm::Type* ,ArrayRef&lt;llvm::Constant*&gt;,constllvm::TargetLibraryInfo*)" FullName="__Globals.ConstantFoldScalarCall(llvm::StringRef,unsignedint ,llvm::Type*,ArrayRef&lt;llvm::Constant*&gt;,constllvm::TargetLibraryInfo*)">
          <Val>330</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.X86TargetLowering.getTargetNodeName(unsignedint)">
          <Val>327</Val>
        </Row>
        <Row Name="emitPrologue(llvm::MachineFunction&amp;)" FullName="llvm.ARMFrameLowering.emitPrologue(llvm::MachineFunction&amp;)">
          <Val>325</Val>
        </Row>
        <Row Name="PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)" FullName="__Globals.PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)">
          <Val>325</Val>
        </Row>
        <Row Name="OperationEncodingString(unsignedint)" FullName="llvm.dwarf.__Globals.OperationEncodingString(unsignedint)">
          <Val>317</Val>
        </Row>
        <Row Name="buildTree_rec(ArrayRef&lt;llvm::Value*&gt;,unsignedint)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.buildTree_rec(ArrayRef &lt;llvm::Value*&gt;,unsignedint)">
          <Val>317</Val>
        </Row>
        <Row Name="EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)" FullName="anonymous_namespace{dagiselmatcheremitter.cpp}.MatcherTableEmitter .EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)">
          <Val>316</Val>
        </Row>
        <Row Name="handleSpecialFP(MachineBasicBlock::iterator&amp;)" FullName="anonymous_namespace{x86floatingpoint.cpp}.FPS.handleSpecialFP (MachineBasicBlock::iterator&amp;)">
          <Val>315</Val>
        </Row>
        <Row Name="getHostCPUName()" FullName="llvm.sys.__Globals.getHostCPUName()">
          <Val>314</Val>
        </Row>
        <Row Name="enumeration(llvm::yaml::IO&amp;,ELFYAML::ELF_EM&amp;)" FullName="llvm.yaml.ScalarEnumerationTraits&lt;llvm::ELFYAML::ELF_EM&gt;.enumeration (llvm::yaml::IO&amp;,ELFYAML::ELF_EM&amp;)">
          <Val>309</Val>
        </Row>
        <Row Name="getRelocTypeInner(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)" FullName="anonymous_namespace{ppcelfobjectwriter.cpp}.PPCELFObjectWriter .getRelocTypeInner(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)">
          <Val>308</Val>
        </Row>
        <Row Name="ConstantFoldCompareInstruction(unsignedshort,llvm::Constant* ,llvm::Constant*)" FullName="llvm.__Globals.ConstantFoldCompareInstruction(unsignedshort ,llvm::Constant*,llvm::Constant*)">
          <Val>301</Val>
        </Row>
        <Row Name="ConstantFoldBinaryInstruction(unsignedint,llvm::Constant* ,llvm::Constant*)" FullName="llvm.__Globals.ConstantFoldBinaryInstruction(unsignedint ,llvm::Constant*,llvm::Constant*)">
          <Val>299</Val>
        </Row>
        <Row Name="AttributeString(unsignedint)" FullName="llvm.dwarf.__Globals.AttributeString(unsignedint)">
          <Val>299</Val>
        </Row>
        <Row Name="ReplaceNodeResults(llvm::SDNode*,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.ReplaceNodeResults(llvm::SDNode* ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>297</Val>
        </Row>
        <Row Name="printSysAlias(constllvm::MCInst*,llvm::raw_ostream&amp;)" FullName="llvm.AArch64InstPrinter.printSysAlias(constllvm::MCInst* ,llvm::raw_ostream&amp;)">
          <Val>296</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{instructionstest.cpp} .InstructionsTest_VectorGep_Test.TestBody()">
          <Val>295</Val>
        </Row>
        <Row Name="EmitInstruction(constllvm::MachineInstr*)" FullName="llvm.ARMAsmPrinter.EmitInstruction(constllvm::MachineInstr*)">
          <Val>295</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{amdgpuiseldagtodag.cpp}.AMDGPUDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>294</Val>
        </Row>
        <Row Name="initialize(llvm::TargetLibraryInfo&amp;,constllvm::Triple&amp;,constchar**)" FullName="__Globals.initialize(llvm::TargetLibraryInfo&amp;,constllvm::Triple&amp; ,constchar**)">
          <Val>293</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jitmemorymanagertest.cpp} .JITMemoryManagerTest_TestCodeAllocation_Test.TestBody()">
          <Val>288</Val>
        </Row>
        <Row Name="EmitTest(llvm::SDValue,unsignedint,llvm::SDLoc,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.EmitTest(llvm::SDValue,unsignedint,llvm::SDLoc ,llvm::SelectionDAG&amp;)">
          <Val>284</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::SDValue,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)" FullName="llvm.SelectionDAG.computeKnownBits(llvm::SDValue,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)">
          <Val>283</Val>
        </Row>
        <Row Name="depends(llvm::Instruction*,llvm::Instruction*,bool)" FullName="llvm.DependenceAnalysis.depends(llvm::Instruction*,llvm::Instruction* ,bool)">
          <Val>282</Val>
        </Row>
        <Row Name="FastLowerIntrinsicCall(constllvm::IntrinsicInst*)" FullName="anonymous_namespace{x86fastisel.cpp}.X86FastISel .FastLowerIntrinsicCall(constllvm::IntrinsicInst*)">
          <Val>282</Val>
        </Row>
        <Row Name="performNEONPostLDSTCombine(llvm::SDNode* ,TargetLowering::DAGCombinerInfo&amp;,llvm::SelectionDAG&amp;)" FullName="__Globals.performNEONPostLDSTCombine(llvm::SDNode* ,TargetLowering::DAGCombinerInfo&amp;,llvm::SelectionDAG&amp;)">
          <Val>281</Val>
        </Row>
        <Row Name="ParseModule(bool)" FullName="llvm.BitcodeReader.ParseModule(bool)">
          <Val>280</Val>
        </Row>
        <Row Name="getRealVSTOpcode(unsignedint,unsignedint&amp;)" FullName="__Globals.getRealVSTOpcode(unsignedint,unsignedint&amp;)">
          <Val>273</Val>
        </Row>
        <Row Name="AArch64TargetLowering(llvm::TargetMachine&amp;)" FullName="llvm.AArch64TargetLowering.AArch64TargetLowering(llvm::TargetMachine&amp;)">
          <Val>272</Val>
        </Row>
        <Row Name="HexagonTargetLowering(constllvm::TargetMachine&amp;)" FullName="llvm.HexagonTargetLowering.HexagonTargetLowering (constllvm::TargetMachine&amp;)">
          <Val>269</Val>
        </Row>
        <Row Name="ParseOperation(llvm::Record*,llvm::RecTy*)" FullName="llvm.TGParser.ParseOperation(llvm::Record*,llvm::RecTy*)">
          <Val>268</Val>
        </Row>
        <Row Name="ExpandAtomic(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandAtomic (llvm::SDNode*)">
          <Val>266</Val>
        </Row>
        <Row Name="LowerOperation(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.R600TargetLowering.LowerOperation(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>265</Val>
        </Row>
        <Row Name="EmitAnyX86InstComments(constllvm::MCInst*,llvm::raw_ostream&amp; ,constchar*(*)(unsignedint))" FullName="llvm.__Globals.EmitAnyX86InstComments(constllvm::MCInst* ,llvm::raw_ostream&amp;,constchar*(*)(unsignedint))">
          <Val>264</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_compare_Test.TestBody()">
          <Val>264</Val>
        </Row>
        <Row Name="GetCodeName(unsignedint,unsignedint,constllvm::BitstreamReader&amp;)" FullName="__Globals.GetCodeName(unsignedint,unsignedint ,constllvm::BitstreamReader&amp;)">
          <Val>263</Val>
        </Row>
        <Row Name="WriteInstruction(constllvm::Instruction&amp;,unsignedint ,llvm::ValueEnumerator&amp;,llvm::BitstreamWriter&amp;,SmallVectorImpl &lt;unsignedint&gt;&amp;)" FullName="__Globals.WriteInstruction(constllvm::Instruction&amp;,unsignedint ,llvm::ValueEnumerator&amp;,llvm::BitstreamWriter&amp;,SmallVectorImpl &lt;unsignedint&gt;&amp;)">
          <Val>260</Val>
        </Row>
        <Row Name="SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,unsignedint)">
          <Val>260</Val>
        </Row>
        <Row Name="GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)" FullName="anonymous_namespace{x86elfobjectwriter.cpp}.X86ELFObjectWriter .GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)">
          <Val>259</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}.AArch64DAGToDAGISel .Select(llvm::SDNode*)">
          <Val>257</Val>
        </Row>
        <Row Name="LowerCall_64SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_64SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>255</Val>
        </Row>
        <Row Name="visitInlineAsm(llvm::ImmutableCallSite)" FullName="llvm.SelectionDAGBuilder.visitInlineAsm(llvm::ImmutableCallSite)">
          <Val>254</Val>
        </Row>
        <Row Name="run(llvm::raw_ostream&amp;)" FullName="anonymous_namespace{asmmatcheremitter.cpp}.AsmMatcherEmitter.run (llvm::raw_ostream&amp;)">
          <Val>253</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>255 159</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>77.51</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>31</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>2 102</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>96.17</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>9 249</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods too complex" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods too complex" QueryId="Query4258690579" NbNodeMatched="1267" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;too&amp;#0160;complex&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MaxNestedLoop&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;3&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MaxNestedLoop&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;CyclomaticComplexity&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MaxNestedLoop&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NestingDepth&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;CyclomaticComplexity&amp;#0160;&amp;gt;&amp;#0160;20&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;or&amp;#0160;MaxNestedLoop&amp;#0160;&amp;gt;&amp;#0160;40&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;or&amp;#0160;NestingDepth&amp;#0160;&amp;gt;&amp;#0160;4&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;are&amp;#0160;hard&amp;#0160;to&amp;#0160;understand&amp;#0160;and&amp;#0160;maintain&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;should&amp;#0160;be&amp;#0160;split&amp;#0160;in&amp;#0160;smaller&amp;#0160;methods.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;complexity&amp;#0160;metrics&amp;#0160;here:&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#CC" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#CC&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#ILCC" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#ILCC&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#ILNestingDepth" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#ILNestingDepth&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>Cyclomatic Complexity (CC)</Column>
        <Column>MaxNestedLoop</Column>
        <Column>NestingDepth</Column>
      </Columns>
      <Rows>
        <Row Name="getELFRelocationTypeName(uint32_t,uint32_t)" FullName="llvm.object.__Globals.getELFRelocationTypeName(uint32_t,uint32_t)">
          <Val>741</Val>
          <Val>0</Val>
          <Val>3</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_matchScales_Test.TestBody()">
          <Val>545</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.NVPTXTargetLowering.getTargetNodeName(unsignedint)">
          <Val>381</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>364</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value*,constQuery&amp; ,unsignedint)" FullName="__Globals.SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value* ,constQuery&amp;,unsignedint)">
          <Val>262</Val>
          <Val>0</Val>
          <Val>8</Val>
        </Row>
        <Row Name="inferPrototypeAttributes(llvm::Function&amp;)" FullName="anonymous_namespace{functionattrs.cpp}.FunctionAttrs .inferPrototypeAttributes(llvm::Function&amp;)">
          <Val>262</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="getOperationName(constllvm::SelectionDAG*)" FullName="llvm.SDNode.getOperationName(constllvm::SelectionDAG*)">
          <Val>243</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="visitICmpInst(llvm::ICmpInst&amp;)" FullName="llvm.InstCombiner.visitICmpInst(llvm::ICmpInst&amp;)">
          <Val>241</Val>
          <Val>0</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SelectLDGLDU(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectLDGLDU(llvm::SDNode*)">
          <Val>234</Val>
          <Val>0</Val>
          <Val>6</Val>
        </Row>
        <Row Name="emitInstruction(llvm::MachineInstr&amp;,constllvm::MCInstrDesc*)" FullName="anonymous_namespace{x86codeemitter.cpp}.Emitter&lt;CodeEmitter&gt; .emitInstruction(llvm::MachineInstr&amp;,constllvm::MCInstrDesc*)">
          <Val>232</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="SelectCodeCommon(llvm::SDNode*,constunsignedchar*,unsignedint)" FullName="llvm.SelectionDAGISel.SelectCodeCommon(llvm::SDNode* ,constunsignedchar*,unsignedint)">
          <Val>223</Val>
          <Val>2</Val>
          <Val>8</Val>
        </Row>
        <Row Name="ParseFunctionBody(llvm::Function*)" FullName="llvm.BitcodeReader.ParseFunctionBody(llvm::Function*)">
          <Val>200</Val>
          <Val>4</Val>
          <Val>8</Val>
        </Row>
        <Row Name="SimplifySetCC(llvm::EVT,llvm::SDValue,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)" FullName="llvm.TargetLowering.SimplifySetCC(llvm::EVT,llvm::SDValue ,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)">
          <Val>198</Val>
          <Val>2</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ExpandNode(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandNode (llvm::SDNode*)">
          <Val>192</Val>
          <Val>2</Val>
          <Val>7</Val>
        </Row>
        <Row Name="EncodeInstruction(constllvm::MCInst&amp;,llvm::raw_ostream&amp; ,SmallVectorImpl&lt;llvm::MCFixup&gt;&amp;,constllvm::MCSubtargetInfo&amp;)" FullName="anonymous_namespace{x86mccodeemitter.cpp}.X86MCCodeEmitter .EncodeInstruction(constllvm::MCInst&amp;,llvm::raw_ostream&amp; ,SmallVectorImpl&lt;llvm::MCFixup&gt;&amp;,constllvm::MCSubtargetInfo&amp;)">
          <Val>172</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="SelectTextureIntrinsic(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectTextureIntrinsic(llvm::SDNode*)">
          <Val>171</Val>
          <Val>1</Val>
          <Val>2</Val>
        </Row>
        <Row Name="SelectSurfaceIntrinsic(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectSurfaceIntrinsic(llvm::SDNode*)">
          <Val>167</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="printInstruction(constllvm::Instruction*,conststd::string&amp;)" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter.printInstruction (constllvm::Instruction*,conststd::string&amp;)">
          <Val>164</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.X86TargetLowering.getTargetNodeName(unsignedint)">
          <Val>164</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="OperationEncodingString(unsignedint)" FullName="llvm.dwarf.__Globals.OperationEncodingString(unsignedint)">
          <Val>158</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="parseStatement(&lt;anonymous&gt;::ParseStatementInfo&amp;)" FullName="anonymous_namespace{asmparser.cpp}.AsmParser.parseStatement(&lt;anonymous &gt;::ParseStatementInfo&amp;)">
          <Val>153</Val>
          <Val>1</Val>
          <Val>4</Val>
        </Row>
        <Row Name="visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp;,llvm::Instruction* ,llvm::ConstantInt*)" FullName="llvm.InstCombiner.visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp; ,llvm::Instruction*,llvm::ConstantInt*)">
          <Val>153</Val>
          <Val>0</Val>
          <Val>7</Val>
        </Row>
        <Row Name="AttributeString(unsignedint)" FullName="llvm.dwarf.__Globals.AttributeString(unsignedint)">
          <Val>149</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="ParseValID(llvm::ValID&amp;,llvm::LLParser::PerFunctionState*)" FullName="llvm.LLParser.ParseValID(llvm::ValID&amp; ,llvm::LLParser::PerFunctionState*)">
          <Val>141</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,bool,bool,bool)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,bool,bool,bool)">
          <Val>139</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="ConstantFoldCompareInstruction(unsignedshort,llvm::Constant* ,llvm::Constant*)" FullName="llvm.__Globals.ConstantFoldCompareInstruction(unsignedshort ,llvm::Constant*,llvm::Constant*)">
          <Val>133</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="getConstantValue(constllvm::Constant*)" FullName="llvm.ExecutionEngine.getConstantValue(constllvm::Constant*)">
          <Val>131</Val>
          <Val>1</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ConstantFoldBinaryInstruction(unsignedint,llvm::Constant* ,llvm::Constant*)" FullName="llvm.__Globals.ConstantFoldBinaryInstruction(unsignedint ,llvm::Constant*,llvm::Constant*)">
          <Val>124</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="buildTree_rec(ArrayRef&lt;llvm::Value*&gt;,unsignedint)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.buildTree_rec(ArrayRef &lt;llvm::Value*&gt;,unsignedint)">
          <Val>121</Val>
          <Val>2</Val>
          <Val>7</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>121</Val>
          <Val>1</Val>
          <Val>11</Val>
        </Row>
        <Row Name="GetCodeName(unsignedint,unsignedint,constllvm::BitstreamReader&amp;)" FullName="__Globals.GetCodeName(unsignedint,unsignedint ,constllvm::BitstreamReader&amp;)">
          <Val>121</Val>
          <Val>1</Val>
          <Val>4</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>121</Val>
          <Val>0</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SimplifyDemandedBits(llvm::SDValue,constllvm::APInt&amp;,llvm::APInt&amp; ,llvm::APInt&amp;,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)" FullName="llvm.TargetLowering.SimplifyDemandedBits(llvm::SDValue ,constllvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)">
          <Val>120</Val>
          <Val>0</Val>
          <Val>8</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.ARMTargetLowering.getTargetNodeName(unsignedint)">
          <Val>120</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="inheritsFrom(llvm::X86Disassembler::InstructionContext ,llvm::X86Disassembler::InstructionContext,bool)" FullName="__Globals.inheritsFrom(llvm::X86Disassembler::InstructionContext ,llvm::X86Disassembler::InstructionContext,bool)">
          <Val>120</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="SimplifyDemandedUseBits(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedUseBits(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)">
          <Val>118</Val>
          <Val>0</Val>
          <Val>8</Val>
        </Row>
        <Row Name="emitInstructionSpecifier()" FullName="llvm.X86Disassembler.RecognizableInstr.emitInstructionSpecifier()">
          <Val>115</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel.Select (llvm::SDNode*)">
          <Val>115</Val>
          <Val>0</Val>
          <Val>12</Val>
        </Row>
        <Row Name="PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)" FullName="__Globals.PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)">
          <Val>114</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ParseConstants()" FullName="llvm.BitcodeReader.ParseConstants()">
          <Val>112</Val>
          <Val>2</Val>
          <Val>7</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.AArch64TargetLowering.getTargetNodeName(unsignedint)">
          <Val>111</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="getVariantKindName(llvm::MCSymbolRefExpr::VariantKind)" FullName="llvm.MCSymbolRefExpr.getVariantKindName (llvm::MCSymbolRefExpr::VariantKind)">
          <Val>111</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="getHostCPUName()" FullName="llvm.sys.__Globals.getHostCPUName()">
          <Val>109</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="llvm.__Globals.computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>108</Val>
          <Val>1</Val>
          <Val>8</Val>
        </Row>
        <Row Name="resetOperationActions()" FullName="llvm.X86TargetLowering.resetOperationActions()">
          <Val>105</Val>
          <Val>2</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SelectLoadVector(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectLoadVector(llvm::SDNode*)">
          <Val>105</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="lookupOptimization(llvm::CallInst*)" FullName="llvm.LibCallSimplifierImpl.lookupOptimization(llvm::CallInst*)">
          <Val>105</Val>
          <Val>0</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SelectStoreVector(llvm::SDNode*)" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel .SelectStoreVector(llvm::SDNode*)">
          <Val>104</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="visitCallInst(llvm::CallInst&amp;)" FullName="llvm.InstCombiner.visitCallInst(llvm::CallInst&amp;)">
          <Val>103</Val>
          <Val>1</Val>
          <Val>10</Val>
        </Row>
        <Row Name="getRelocTypeInner(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)" FullName="anonymous_namespace{ppcelfobjectwriter.cpp}.PPCELFObjectWriter .getRelocTypeInner(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)">
          <Val>103</Val>
          <Val>0</Val>
          <Val>4</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_AsInstructionsTest_Test.TestBody()">
          <Val>103</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="printSysAlias(constllvm::MCInst*,llvm::raw_ostream&amp;)" FullName="llvm.AArch64InstPrinter.printSysAlias(constllvm::MCInst* ,llvm::raw_ostream&amp;)">
          <Val>100</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="typeFromString(conststd::string&amp;,bool,uint8_t)" FullName="llvm.X86Disassembler.RecognizableInstr.typeFromString (conststd::string&amp;,bool,uint8_t)">
          <Val>100</Val>
          <Val>0</Val>
          <Val>4</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_compare_Test.TestBody()">
          <Val>100</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="ParseModule(bool)" FullName="llvm.BitcodeReader.ParseModule(bool)">
          <Val>96</Val>
          <Val>2</Val>
          <Val>5</Val>
        </Row>
        <Row Name="LexIdentifier()" FullName="llvm.LLLexer.LexIdentifier()">
          <Val>95</Val>
          <Val>1</Val>
          <Val>3</Val>
        </Row>
        <Row Name="printConstant(constllvm::Constant*)" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter.printConstant (constllvm::Constant*)">
          <Val>92</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="LegalizeOp(llvm::SDValue)" FullName="anonymous_namespace{legalizevectorops.cpp}.VectorLegalizer.LegalizeOp (llvm::SDValue)">
          <Val>91</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_getLg_Test.TestBody()">
          <Val>91</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="EmitVEXOpcodePrefix(uint64_t,unsignedint&amp;,int,constllvm::MCInst&amp; ,constllvm::MCInstrDesc&amp;,llvm::raw_ostream&amp;)" FullName="anonymous_namespace{x86mccodeemitter.cpp}.X86MCCodeEmitter .EmitVEXOpcodePrefix(uint64_t,unsignedint&amp;,int,constllvm::MCInst&amp; ,constllvm::MCInstrDesc&amp;,llvm::raw_ostream&amp;)">
          <Val>90</Val>
          <Val>0</Val>
          <Val>4</Val>
        </Row>
        <Row Name="getMemoryOperandNo(uint64_t,unsignedint)" FullName="llvm.X86II.__Globals.getMemoryOperandNo(uint64_t,unsignedint)">
          <Val>89</Val>
          <Val>0</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ResolvedUndefsIn(llvm::Function&amp;)" FullName="anonymous_namespace{sccp.cpp}.SCCPSolver.ResolvedUndefsIn (llvm::Function&amp;)">
          <Val>87</Val>
          <Val>3</Val>
          <Val>6</Val>
        </Row>
        <Row Name="readPrefixes(structInternalInstruction*)" FullName="__Globals.readPrefixes(structInternalInstruction*)">
          <Val>87</Val>
          <Val>1</Val>
          <Val>9</Val>
        </Row>
        <Row Name="EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)" FullName="anonymous_namespace{dagiselmatcheremitter.cpp}.MatcherTableEmitter .EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)">
          <Val>87</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="ParseOperation(llvm::Record*,llvm::RecTy*)" FullName="llvm.TGParser.ParseOperation(llvm::Record*,llvm::RecTy*)">
          <Val>86</Val>
          <Val>1</Val>
          <Val>7</Val>
        </Row>
        <Row Name="ExpandAtomic(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandAtomic (llvm::SDNode*)">
          <Val>86</Val>
          <Val>0</Val>
          <Val>3</Val>
        </Row>
        <Row Name="getTargetNodeName(unsignedint)" FullName="llvm.MipsTargetLowering.getTargetNodeName(unsignedint)">
          <Val>86</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="PerformDAGCombine(llvm::SDNode*,llvm::TargetLowering::DAGCombinerInfo&amp; )" FullName="llvm.PPCTargetLowering.PerformDAGCombine(llvm::SDNode* ,llvm::TargetLowering::DAGCombinerInfo&amp;)">
          <Val>85</Val>
          <Val>2</Val>
          <Val>8</Val>
        </Row>
        <Row Name="GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)" FullName="anonymous_namespace{aarch64elfobjectwriter.cpp}.AArch64ELFObjectWriter .GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)">
          <Val>84</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="LegalizeOp(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.LegalizeOp (llvm::SDNode*)">
          <Val>83</Val>
          <Val>3</Val>
          <Val>6</Val>
        </Row>
        <Row Name="FoldOrOfICmps(llvm::ICmpInst*,llvm::ICmpInst*)" FullName="llvm.InstCombiner.FoldOrOfICmps(llvm::ICmpInst*,llvm::ICmpInst*)">
          <Val>83</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue)">
          <Val>82</Val>
          <Val>1</Val>
          <Val>6</Val>
        </Row>
        <Row Name="LowerOperation(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.LowerOperation(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>82</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="visitCall(constllvm::CallInst&amp;)" FullName="llvm.SelectionDAGBuilder.visitCall(constllvm::CallInst&amp;)">
          <Val>81</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)" FullName="anonymous_namespace{x86elfobjectwriter.cpp}.X86ELFObjectWriter .GetRelocType(constllvm::MCValue&amp;,constllvm::MCFixup&amp;,bool)">
          <Val>81</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="getReplacementInput(llvm::LLVMContext&amp;,llvm::Instruction* ,llvm::Instruction*,unsignedint,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.getReplacementInput (llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction*,unsignedint ,bool)">
          <Val>80</Val>
          <Val>1</Val>
          <Val>7</Val>
        </Row>
        <Row Name="PrintFileSectionSizes(llvm::StringRef)" FullName="__Globals.PrintFileSectionSizes(llvm::StringRef)">
          <Val>79</Val>
          <Val>3</Val>
          <Val>11</Val>
        </Row>
        <Row Name="vectorizeTree(&lt;anonymous&gt;::BoUpSLP::TreeEntry*)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.vectorizeTree( &lt;anonymous&gt;::BoUpSLP::TreeEntry*)">
          <Val>79</Val>
          <Val>2</Val>
          <Val>6</Val>
        </Row>
        <Row Name="createSCEV(llvm::Value*)" FullName="llvm.ScalarEvolution.createSCEV(llvm::Value*)">
          <Val>79</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_getLgFloor_Test.TestBody()">
          <Val>79</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_getLgCeiling_Test.TestBody()">
          <Val>79</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedVectorElts(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,unsignedint)">
          <Val>78</Val>
          <Val>1</Val>
          <Val>7</Val>
        </Row>
        <Row Name="LowerBUILD_VECTOR(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.AArch64TargetLowering.LowerBUILD_VECTOR(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>77</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="visit(llvm::SDNode*)" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner.visit(llvm::SDNode*)">
          <Val>77</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="findBestDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.findBestDAGFor (DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector &lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)">
          <Val>76</Val>
          <Val>3</Val>
          <Val>8</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::SDValue,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)" FullName="llvm.SelectionDAG.computeKnownBits(llvm::SDValue,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)">
          <Val>76</Val>
          <Val>0</Val>
          <Val>7</Val>
        </Row>
        <Row Name="SimplifyICmpOperands(ICmpInst::Predicate&amp;,constllvm::SCEV*&amp; ,constllvm::SCEV*&amp;,unsignedint)" FullName="llvm.ScalarEvolution.SimplifyICmpOperands(ICmpInst::Predicate&amp; ,constllvm::SCEV*&amp;,constllvm::SCEV*&amp;,unsignedint)">
          <Val>76</Val>
          <Val>0</Val>
          <Val>4</Val>
        </Row>
        <Row Name="SplitVectorResult(llvm::SDNode*,unsignedint)" FullName="llvm.DAGTypeLegalizer.SplitVectorResult(llvm::SDNode*,unsignedint)">
          <Val>76</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="TagString(unsignedint)" FullName="llvm.dwarf.__Globals.TagString(unsignedint)">
          <Val>76</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp;,SCEV::NoWrapFlags)" FullName="llvm.ScalarEvolution.getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp; ,SCEV::NoWrapFlags)">
          <Val>75</Val>
          <Val>5</Val>
          <Val>7</Val>
        </Row>
        <Row Name="MergeConsecutiveStores(llvm::StoreSDNode*)" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner .MergeConsecutiveStores(llvm::StoreSDNode*)">
          <Val>75</Val>
          <Val>3</Val>
          <Val>5</Val>
        </Row>
        <Row Name="EmitTest(llvm::SDValue,unsignedint,llvm::SDLoc,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.EmitTest(llvm::SDValue,unsignedint,llvm::SDLoc ,llvm::SelectionDAG&amp;)">
          <Val>75</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="visitOr(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitOr(llvm::BinaryOperator&amp;)">
          <Val>75</Val>
          <Val>0</Val>
          <Val>5</Val>
        </Row>
        <Row Name="WidenVectorResult(llvm::SDNode*,unsignedint)" FullName="llvm.DAGTypeLegalizer.WidenVectorResult(llvm::SDNode*,unsignedint)">
          <Val>75</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="evaluateICmpRelation(llvm::Constant*,llvm::Constant*,bool)" FullName="__Globals.evaluateICmpRelation(llvm::Constant*,llvm::Constant*,bool)">
          <Val>74</Val>
          <Val>1</Val>
          <Val>8</Val>
        </Row>
        <Row Name="printInstruction(constllvm::Instruction&amp;)" FullName="llvm.AssemblyWriter.printInstruction(constllvm::Instruction&amp;)">
          <Val>74</Val>
          <Val>1</Val>
          <Val>5</Val>
        </Row>
        <Row Name="LowerBUILD_VECTOR(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.LowerBUILD_VECTOR(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>73</Val>
          <Val>2</Val>
          <Val>5</Val>
        </Row>
        <Row Name="LowerVECTOR_SHUFFLE(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.LowerVECTOR_SHUFFLE(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>73</Val>
          <Val>1</Val>
          <Val>3</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_getSum_Test.TestBody()">
          <Val>73</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="PromoteIntegerResult(llvm::SDNode*,unsignedint)" FullName="llvm.DAGTypeLegalizer.PromoteIntegerResult(llvm::SDNode*,unsignedint)">
          <Val>72</Val>
          <Val>0</Val>
          <Val>2</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>47 957</Val>
          <Val>1 421</Val>
          <Val>6 198</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>37.85</Val>
          <Val>1.12</Val>
          <Val>4.89</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>1</Val>
          <Val>0</Val>
          <Val>1</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>741</Val>
          <Val>11</Val>
          <Val>58</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>40.12</Val>
          <Val>1.25</Val>
          <Val>3.02</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>1 609</Val>
          <Val>1.57</Val>
          <Val>9.12</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods potentially poorly commented" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods potentially poorly commented" QueryId="Query3481690908" NbNodeMatched="2559" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;potentially&amp;#0160;poorly&amp;#0160;commented&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;PercentageComment&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;PercentageComment&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;ascending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;PercentageComment&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfComment&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;%Comment&amp;#0160;&amp;lt;&amp;#0160;20&amp;#0160;and&amp;#0160;that&amp;#0160;have&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;at&amp;#0160;least&amp;#0160;20&amp;#0160;lines&amp;#0160;of&amp;#0160;code&amp;#0160;might&amp;#0160;need&amp;#0160;to&amp;#0160;be&amp;#0160;more&amp;#0160;commented.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;Comments&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#PercentageComment" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#PercentageComment&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbLinesOfComment" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbLinesOfComment&lt;/a&gt;&lt;/font&gt;&amp;#0160;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>Percentage Comment</Column>
        <Column># lines of code (LOC)</Column>
        <Column># lines of comment</Column>
      </Columns>
      <Rows>
        <Row Name="TestBody()" FullName="MapVectorTest_insert_pop_Test.TestBody()">
          <Val>0</Val>
          <Val>64</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="MapVectorTest_remove_if_Test.TestBody()">
          <Val>0</Val>
          <Val>28</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="SmallPtrSetTest_GrowthTest_Test.TestBody()">
          <Val>0</Val>
          <Val>178</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="SmallPtrSetTest_SwapTest_Test.TestBody()">
          <Val>0</Val>
          <Val>105</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test.TestBody()">
          <Val>0</Val>
          <Val>51</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test.TestBody()">
          <Val>0</Val>
          <Val>41</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test.TestBody()">
          <Val>0</Val>
          <Val>77</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test.TestBody()">
          <Val>0</Val>
          <Val>23</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test.TestBody()">
          <Val>0</Val>
          <Val>91</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test.TestBody()">
          <Val>0</Val>
          <Val>115</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test .TestBody()">
          <Val>0</Val>
          <Val>25</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test .TestBody()">
          <Val>0</Val>
          <Val>46</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test.TestBody ()">
          <Val>0</Val>
          <Val>31</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>39</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>51</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>41</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test.TestBody()">
          <Val>0</Val>
          <Val>71</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test .TestBody()">
          <Val>0</Val>
          <Val>164</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test .TestBody()">
          <Val>0</Val>
          <Val>60</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test.TestBody()">
          <Val>0</Val>
          <Val>60</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test.TestBody ()">
          <Val>0</Val>
          <Val>124</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test .TestBody()">
          <Val>0</Val>
          <Val>24</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test .TestBody()">
          <Val>0</Val>
          <Val>26</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test.TestBody()">
          <Val>0</Val>
          <Val>34</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test .TestBody()">
          <Val>0</Val>
          <Val>82</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test.TestBody( )">
          <Val>0</Val>
          <Val>137</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded2_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded8_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test .TestBody()">
          <Val>0</Val>
          <Val>31</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded16_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test.TestBody()">
          <Val>0</Val>
          <Val>164</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test.TestBody()">
          <Val>0</Val>
          <Val>58</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>343</Val>
          <Val>2</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>62</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>93</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_BinOps_Test &lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>50</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_RangeOps_Test &lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>126</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>62</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashValueBasicTest_Test.TestBody()">
          <Val>0</Val>
          <Val>30</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeBasicTest_Test.TestBody()">
          <Val>0</Val>
          <Val>135</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_Basic_Test.TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_OneElemIntSetTest_Test.TestBody()">
          <Val>0</Val>
          <Val>43</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_MultiElemIntSetTest_Test.TestBody()">
          <Val>0</Val>
          <Val>52</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_RemoveIntSetTest_Test.TestBody()">
          <Val>0</Val>
          <Val>24</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_Callback2CharSetTest_Test.TestBody()">
          <Val>0</Val>
          <Val>35</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_IterLongSetTest_Test.TestBody()">
          <Val>0</Val>
          <Val>57</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{makeuniquetest.cpp} .MakeUniqueTest_SingleObject_Test.TestBody()">
          <Val>0</Val>
          <Val>74</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyConstructionTest_Test.TestBody()">
          <Val>0</Val>
          <Val>31</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_ConstructingCopyAssignmentTest_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyingCopyAssignmentTest_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_DeletingCopyAssignmentTest_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NullCopyConstructionTest_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_Operation_Test.TestBody()">
          <Val>0</Val>
          <Val>114</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_UnsignedValues_Test.TestBody()">
          <Val>0</Val>
          <Val>34</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_SignedValues_Test.TestBody()">
          <Val>0</Val>
          <Val>34</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{pointerintpairtest.cpp} .PointerIntPairTest_GetSet_Test.TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallstringtest.cpp}.SmallStringTest_Find_Test .TestBody()">
          <Val>0</Val>
          <Val>57</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{smallstringtest.cpp} .StringRefTest_Comparisons_Test.TestBody()">
          <Val>0</Val>
          <Val>57</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsebitvectortest.cpp} .SparseBitVectorTest_TrivialOperation_Test.TestBody()">
          <Val>0</Val>
          <Val>35</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_AltStructSet_Test.TestBody()">
          <Val>0</Val>
          <Val>42</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{sparsesettest.cpp}.SparseSetTest_AltStructSet_Test .TestBody()">
          <Val>0</Val>
          <Val>31</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest_MoveDtor_Test .TestBody()">
          <Val>0</Val>
          <Val>47</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_StringOps_Test .TestBody()">
          <Val>0</Val>
          <Val>70</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Operators_Test .TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Split2_Test .TestBody()">
          <Val>0</Val>
          <Val>496</Val>
          <Val>1</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Trim_Test .TestBody()">
          <Val>0</Val>
          <Val>32</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Find_Test .TestBody()">
          <Val>0</Val>
          <Val>62</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Hashing_Test .TestBody()">
          <Val>0</Val>
          <Val>30</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_getAsInteger_Test .TestBody()">
          <Val>0</Val>
          <Val>154</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_joinStrings_Test .TestBody()">
          <Val>0</Val>
          <Val>32</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_CopyAndMoveTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>109</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_EraseTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>26</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_EraseRangeTest_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_InsertRange_Test&lt;gtest_TypeParam_&gt;.TestBody()">
          <Val>0</Val>
          <Val>21</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_BasicParsing_Test .TestBody()">
          <Val>0</Val>
          <Val>105</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_ParsedIDs_Test.TestBody ()">
          <Val>0</Val>
          <Val>111</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_MutateName_Test .TestBody()">
          <Val>0</Val>
          <Val>80</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_BitWidthPredicates_Test .TestBody()">
          <Val>0</Val>
          <Val>87</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp} .TripleTest_BitWidthArchVariants_Test.TestBody()">
          <Val>0</Val>
          <Val>95</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_getOSVersion_Test .TestBody()">
          <Val>0</Val>
          <Val>226</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_FileFormat_Test .TestBody()">
          <Val>0</Val>
          <Val>55</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_NormalizeWindows_Test .TestBody()">
          <Val>0</Val>
          <Val>53</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{variadicfunctiontest.cpp} .VariadicFunction1Test_Works_Test.TestBody()">
          <Val>0</Val>
          <Val>24</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{variadicfunctiontest.cpp} .VariadicFunction3Test_Works_Test.TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{lazycallgraphtest.cpp} .LazyCallGraphTest_BasicGraphMutation_Test.TestBody()">
          <Val>0</Val>
          <Val>71</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{executionenginetest.cpp} .ExecutionEngineTest_ReverseGlobalMapping_Test.TestBody()">
          <Val>0</Val>
          <Val>68</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{attributestest.cpp}.Attributes_Uniquing_Test .TestBody()">
          <Val>0</Val>
          <Val>26</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp} .ConstantRangeTest_Basics_Test.TestBody()">
          <Val>0</Val>
          <Val>85</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp} .ConstantRangeTest_Equality_Test.TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp} .ConstantRangeTest_SignWrapped_Test.TestBody()">
          <Val>0</Val>
          <Val>23</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_SExt_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp} .ConstantRangeTest_SetDifference_Test.TestBody()">
          <Val>0</Val>
          <Val>42</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_Add_Test .TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_Sub_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_SMax_Test .TestBody()">
          <Val>0</Val>
          <Val>27</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_UDiv_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest_Lshr_Test .TestBody()">
          <Val>0</Val>
          <Val>29</Val>
          <Val>0</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_AsInstructionsTest_Test.TestBody()">
          <Val>0</Val>
          <Val>1 400</Val>
          <Val>4</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>20 292</Val>
          <Val>171 310</Val>
          <Val>15 283</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>7.93</Val>
          <Val>66.94</Val>
          <Val>5.97</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>21</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>19</Val>
          <Val>2 102</Val>
          <Val>201</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>6.43</Val>
          <Val>100.61</Val>
          <Val>10.13</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>41.31</Val>
          <Val>10 121</Val>
          <Val>102.65</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods with too many parameters" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods with too many parameters" QueryId="Query321764398" NbNodeMatched="1131" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;parameters&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbParameters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;NbParameters&amp;#0160;&amp;gt;&amp;#0160;5&amp;#0160;might&amp;#0160;be&amp;#0160;painful&amp;#0160;to&amp;#0160;call&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;might&amp;#0160;degrade&amp;#0160;performance.&amp;#0160;You&amp;#0160;should&amp;#0160;prefer&amp;#0160;using&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;additional&amp;#0160;properties/fields&amp;#0160;to&amp;#0160;the&amp;#0160;declaring&amp;#0160;type&amp;#0160;to&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;handle&amp;#0160;numerous&amp;#0160;states.&amp;#0160;Another&amp;#0160;alternative&amp;#0160;is&amp;#0160;to&amp;#0160;provide&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;a&amp;#0160;class&amp;#0160;or&amp;#0160;structure&amp;#0160;dedicated&amp;#0160;to&amp;#0160;handle&amp;#0160;arguments&amp;#0160;passing&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;(for&amp;#0160;example&amp;#0160;see&amp;#0160;the&amp;#0160;class&amp;#0160;System.Diagnostics.ProcessStartInfo&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;the&amp;#0160;method&amp;#0160;System.Diagnostics.Process.Start(ProcessStartInfo))&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NbParameters&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbParameters" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbParameters&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># Parameters</Column>
      </Columns>
      <Rows>
        <Row Name="InsertLDR_STR(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator&amp; ,int,bool,llvm::DebugLoc,unsignedint,unsignedint,bool,bool,unsignedint ,bool,bool,bool,bool,ARMCC::CondCodes,unsignedint ,constllvm::TargetInstrInfo*,bool)" FullName="__Globals.InsertLDR_STR(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,int,bool,llvm::DebugLoc,unsignedint ,unsignedint,bool,bool,unsignedint,bool,bool,bool,bool ,ARMCC::CondCodes,unsignedint,constllvm::TargetInstrInfo*,bool)">
          <Val>18</Val>
        </Row>
        <Row Name="findBestDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.findBestDAGFor (DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector &lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)">
          <Val>18</Val>
        </Row>
        <Row Name="createMethod(llvm::DIDescriptor,llvm::StringRef,llvm::StringRef ,llvm::DIFile,unsignedint,llvm::DICompositeType,bool,bool,unsignedint ,unsignedint,llvm::DIType,unsignedint,bool,llvm::Function* ,llvm::MDNode*)" FullName="llvm.DIBuilder.createMethod(llvm::DIDescriptor,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,llvm::DIType,unsignedint,bool ,llvm::Function*,llvm::MDNode*)">
          <Val>15</Val>
        </Row>
        <Row Name="getLoad(ISD::MemIndexedMode,ISD::LoadExtType,llvm::EVT,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo ,llvm::EVT,bool,bool,bool,unsignedint,constllvm::AAMDNodes&amp; ,constllvm::MDNode*)" FullName="llvm.SelectionDAG.getLoad(ISD::MemIndexedMode,ISD::LoadExtType ,llvm::EVT,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,llvm::EVT,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)">
          <Val>15</Val>
        </Row>
        <Row Name="MergeOpsUpdate(llvm::MachineBasicBlock&amp;,MemOpQueue&amp;,unsignedint ,unsignedint,unsignedint,int,unsignedint,bool,int,ARMCC::CondCodes ,unsignedint,unsignedint,llvm::DebugLoc,SmallVectorImpl &lt;MachineBasicBlock::iterator&gt;&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeOpsUpdate(llvm::MachineBasicBlock&amp;,MemOpQueue&amp;,unsignedint ,unsignedint,unsignedint,int,unsignedint,bool,int,ARMCC::CondCodes ,unsignedint,unsignedint,llvm::DebugLoc,SmallVectorImpl &lt;MachineBasicBlock::iterator&gt;&amp;)">
          <Val>14</Val>
        </Row>
        <Row Name="createFunction(llvm::DIDescriptor,llvm::StringRef,llvm::StringRef ,llvm::DIFile,unsignedint,llvm::DICompositeType,bool,bool,unsignedint ,unsignedint,bool,llvm::Function*,llvm::MDNode*,llvm::MDNode*)" FullName="llvm.DIBuilder.createFunction(llvm::DIDescriptor,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,bool,llvm::Function*,llvm::MDNode* ,llvm::MDNode*)">
          <Val>14</Val>
        </Row>
        <Row Name="createFunction(DIScopeRef,llvm::StringRef,llvm::StringRef,llvm::DIFile ,unsignedint,llvm::DICompositeType,bool,bool,unsignedint,unsignedint ,bool,llvm::Function*,llvm::MDNode*,llvm::MDNode*)" FullName="llvm.DIBuilder.createFunction(DIScopeRef,llvm::StringRef ,llvm::StringRef,llvm::DIFile,unsignedint,llvm::DICompositeType,bool ,bool,unsignedint,unsignedint,bool,llvm::Function*,llvm::MDNode* ,llvm::MDNode*)">
          <Val>14</Val>
        </Row>
        <Row Name="InitMCRegisterInfo(constllvm::MCRegisterDesc*,unsignedint,unsignedint ,unsignedint,constllvm::MCRegisterClass*,unsignedint,constMCPhysReg(* )[2],unsignedint,constMCPhysReg*,constchar*,constuint16_t*,unsignedint ,constllvm::MCRegisterInfo::SubRegCoveredBits*,constuint16_t*)" FullName="llvm.MCRegisterInfo.InitMCRegisterInfo(constllvm::MCRegisterDesc* ,unsignedint,unsignedint,unsignedint,constllvm::MCRegisterClass* ,unsignedint,constMCPhysReg(*)[2],unsignedint,constMCPhysReg* ,constchar*,constuint16_t*,unsignedint ,constllvm::MCRegisterInfo::SubRegCoveredBits*,constuint16_t*)">
          <Val>14</Val>
        </Row>
        <Row Name="DumpSectionData(constllvm::object::MachOObjectFile&amp;,unsignedint ,llvm::StringRef,llvm::StringRef,uint64_t,uint64_t,uint32_t,uint32_t ,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint64_t)" FullName="__Globals.DumpSectionData(constllvm::object::MachOObjectFile&amp; ,unsignedint,llvm::StringRef,llvm::StringRef,uint64_t,uint64_t ,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t ,uint64_t)">
          <Val>14</Val>
        </Row>
        <Row Name="createClassType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,uint64_t,unsignedint,llvm::DIType ,llvm::DIArray,llvm::DIType,llvm::MDNode*,llvm::StringRef)" FullName="llvm.DIBuilder.createClassType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,uint64_t,unsignedint ,llvm::DIType,llvm::DIArray,llvm::DIType,llvm::MDNode*,llvm::StringRef )">
          <Val>13</Val>
        </Row>
        <Row Name="LLVMDisasmContext(std::string,void*,int,LLVMOpInfoCallback ,LLVMSymbolLookupCallback,constllvm::Target*,constllvm::MCAsmInfo* ,constllvm::MCRegisterInfo*,constllvm::MCSubtargetInfo* ,constllvm::MCInstrInfo*,llvm::MCContext*,constllvm::MCDisassembler* ,llvm::MCInstPrinter*)" FullName="llvm.LLVMDisasmContext.LLVMDisasmContext(std::string,void*,int ,LLVMOpInfoCallback,LLVMSymbolLookupCallback,constllvm::Target* ,constllvm::MCAsmInfo*,constllvm::MCRegisterInfo* ,constllvm::MCSubtargetInfo*,constllvm::MCInstrInfo*,llvm::MCContext* ,constllvm::MCDisassembler*,llvm::MCInstPrinter*)">
          <Val>13</Val>
        </Row>
        <Row Name="LowerMemOpCallTo(llvm::SelectionDAG&amp;,llvm::MachineFunction&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,int,unsignedint,bool,bool ,bool,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,SmallVectorImpl&lt;&lt;anonymous &gt;::TailCallArgumentInfo&gt;&amp;,llvm::SDLoc)" FullName="__Globals.LowerMemOpCallTo(llvm::SelectionDAG&amp;,llvm::MachineFunction&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,int,unsignedint,bool,bool ,bool,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,SmallVectorImpl&lt;&lt;anonymous &gt;::TailCallArgumentInfo&gt;&amp;,llvm::SDLoc)">
          <Val>13</Val>
        </Row>
        <Row Name="FinishCall(CallingConv::ID,llvm::SDLoc,bool,bool,llvm::SelectionDAG&amp; ,SmallVector&lt;std::pair&lt;unsignedint,SDValue&gt;,8&gt;&amp;,llvm::SDValue ,llvm::SDValue,llvm::SDValue&amp;,int,unsignedint,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.FinishCall(CallingConv::ID,llvm::SDLoc,bool ,bool,llvm::SelectionDAG&amp;,SmallVector&lt;std::pair&lt;unsignedint,SDValue&gt;,8 &gt;&amp;,llvm::SDValue,llvm::SDValue,llvm::SDValue&amp;,int,unsignedint ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>13</Val>
        </Row>
        <Row Name="getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,unsignedint,llvm::AtomicOrdering ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDVTList,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,unsignedint ,llvm::AtomicOrdering,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>13</Val>
        </Row>
        <Row Name="StoreByValRegs(llvm::CCState&amp;,llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue&amp;,constllvm::Value*,unsignedint,unsignedint,unsignedint ,unsignedint,bool,unsignedint,unsignedint)" FullName="llvm.ARMTargetLowering.StoreByValRegs(llvm::CCState&amp; ,llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue&amp;,constllvm::Value* ,unsignedint,unsignedint,unsignedint,unsignedint,bool,unsignedint ,unsignedint)">
          <Val>12</Val>
        </Row>
        <Row Name="MergeOps(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator,int ,unsignedint,bool,int,ARMCC::CondCodes,unsignedint,unsignedint ,llvm::DebugLoc,ArrayRef&lt;std::pair&lt;unsignedint,bool&gt;&gt;,ArrayRef &lt;unsignedint&gt;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeOps(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator,int ,unsignedint,bool,int,ARMCC::CondCodes,unsignedint,unsignedint ,llvm::DebugLoc,ArrayRef&lt;std::pair&lt;unsignedint,bool&gt;&gt;,ArrayRef &lt;unsignedint&gt;)">
          <Val>12</Val>
        </Row>
        <Row Name="createObjCIVar(llvm::StringRef,llvm::DIFile,unsignedint,uint64_t ,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::StringRef ,llvm::StringRef,llvm::StringRef,unsignedint)" FullName="llvm.DIBuilder.createObjCIVar(llvm::StringRef,llvm::DIFile,unsignedint ,uint64_t,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::StringRef ,llvm::StringRef,llvm::StringRef,unsignedint)">
          <Val>12</Val>
        </Row>
        <Row Name="createStructType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIType,llvm::DIArray ,unsignedint,llvm::DIType,llvm::StringRef)" FullName="llvm.DIBuilder.createStructType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIType ,llvm::DIArray,unsignedint,llvm::DIType,llvm::StringRef)">
          <Val>12</Val>
        </Row>
        <Row Name="InitMCSubtargetInfo(llvm::StringRef,llvm::StringRef,llvm::StringRef ,ArrayRef&lt;llvm::SubtargetFeatureKV&gt;,ArrayRef&lt;llvm::SubtargetFeatureKV&gt; ,constllvm::SubtargetInfoKV*,constllvm::MCWriteProcResEntry* ,constllvm::MCWriteLatencyEntry*,constllvm::MCReadAdvanceEntry* ,constllvm::InstrStage*,constunsignedint*,constunsignedint*)" FullName="llvm.MCSubtargetInfo.InitMCSubtargetInfo(llvm::StringRef ,llvm::StringRef,llvm::StringRef,ArrayRef&lt;llvm::SubtargetFeatureKV&gt; ,ArrayRef&lt;llvm::SubtargetFeatureKV&gt;,constllvm::SubtargetInfoKV* ,constllvm::MCWriteProcResEntry*,constllvm::MCWriteLatencyEntry* ,constllvm::MCReadAdvanceEntry*,constllvm::InstrStage* ,constunsignedint*,constunsignedint*)">
          <Val>12</Val>
        </Row>
        <Row Name="passByValArg(llvm::SDValue,llvm::SDLoc,std::deque&lt;std::pair &lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,llvm::SDValue ,llvm::MachineFrameInfo*,llvm::SelectionDAG&amp;,llvm::SDValue ,constllvm::MipsTargetLowering::MipsCC&amp; ,constllvm::MipsTargetLowering::ByValArgInfo&amp;,constISD::ArgFlagsTy&amp; ,bool)" FullName="llvm.MipsTargetLowering.passByValArg(llvm::SDValue,llvm::SDLoc ,std::deque&lt;std::pair&lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;,llvm::SDValue,llvm::MachineFrameInfo* ,llvm::SelectionDAG&amp;,llvm::SDValue ,constllvm::MipsTargetLowering::MipsCC&amp; ,constllvm::MipsTargetLowering::ByValArgInfo&amp;,constISD::ArgFlagsTy&amp; ,bool)">
          <Val>12</Val>
        </Row>
        <Row Name="ConnectTDBUTraversals(DenseMap&lt;constllvm::BasicBlock*,&lt;anonymous &gt;::BBState&gt;&amp;,MapVector&lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,DenseMap &lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,llvm::Module*,SmallVectorImpl &lt;llvm::Instruction*&gt;&amp;,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,&lt;anonymous&gt;::RRInfo&amp;,&lt;anonymous &gt;::RRInfo&amp;,llvm::Value*,bool,bool&amp;)" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt.ConnectTDBUTraversals (DenseMap&lt;constllvm::BasicBlock*,&lt;anonymous&gt;::BBState&gt;&amp;,MapVector &lt;llvm::Value*,&lt;anonymous&gt;::RRInfo&gt;&amp;,DenseMap&lt;llvm::Value*,&lt;anonymous &gt;::RRInfo&gt;&amp;,llvm::Module*,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,SmallVectorImpl &lt;llvm::Instruction*&gt;&amp;,&lt;anonymous&gt;::RRInfo&amp;,&lt;anonymous&gt;::RRInfo&amp; ,llvm::Value*,bool,bool&amp;)">
          <Val>12</Val>
        </Row>
        <Row Name="LoopPromoter(llvm::Value*,constSmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,llvm::SSAUpdater&amp;,SmallPtrSet&lt;llvm::Value*,4&gt;&amp;,SmallVectorImpl &lt;llvm::BasicBlock*&gt;&amp;,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp; ,llvm::PredIteratorCache&amp;,llvm::AliasSetTracker&amp;,llvm::LoopInfo&amp; ,llvm::DebugLoc,int,constllvm::AAMDNodes&amp;)" FullName="anonymous_namespace{licm.cpp}.LoopPromoter.LoopPromoter(llvm::Value* ,constSmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,llvm::SSAUpdater&amp; ,SmallPtrSet&lt;llvm::Value*,4&gt;&amp;,SmallVectorImpl&lt;llvm::BasicBlock*&gt;&amp; ,SmallVectorImpl&lt;llvm::Instruction*&gt;&amp;,llvm::PredIteratorCache&amp; ,llvm::AliasSetTracker&amp;,llvm::LoopInfo&amp;,llvm::DebugLoc,int ,constllvm::AAMDNodes&amp;)">
          <Val>12</Val>
        </Row>
        <Row Name="getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomicCmpSwap(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDVTList,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,constllvm::SDValue*,llvm::SDUse*,unsignedint ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,constllvm::SDValue*,llvm::SDUse*,unsignedint ,llvm::MachineMemOperand*,llvm::AtomicOrdering,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>12</Val>
        </Row>
        <Row Name="emitRegPlusImmediate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,unsignedint,unsignedint,int,unsignedint ,ARMCC::CondCodes,unsignedint)" FullName="__Globals.emitRegPlusImmediate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,unsignedint,unsignedint,int,unsignedint ,ARMCC::CondCodes,unsignedint)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.ARMSelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="CanFormLdStDWord(llvm::MachineInstr*,llvm::MachineInstr* ,llvm::DebugLoc&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int&amp;,unsignedint&amp;,ARMCC::CondCodes&amp;,bool&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMPreAllocLoadStoreOpt .CanFormLdStDWord(llvm::MachineInstr*,llvm::MachineInstr* ,llvm::DebugLoc&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int&amp;,unsignedint&amp;,ARMCC::CondCodes&amp;,bool&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.HexagonSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCCCCallTo(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.MSP430TargetLowering.LowerCCCCallTo(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="PrepareTailCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDLoc,bool,int,unsignedint,llvm::SDValue,llvm::SDValue,bool ,SmallVectorImpl&lt;&lt;anonymous&gt;::TailCallArgumentInfo&gt;&amp;)" FullName="__Globals.PrepareTailCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDLoc,bool,int,unsignedint,llvm::SDValue ,llvm::SDValue,bool,SmallVectorImpl&lt;&lt;anonymous&gt;::TailCallArgumentInfo &gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="PrepareCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDLoc,int,bool,SmallVectorImpl&lt;std::pair &lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,std::vector &lt;EVT&gt;&amp;,constllvm::PPCSubtarget&amp;)" FullName="__Globals.PrepareCall(llvm::SelectionDAG&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDLoc,int,bool,SmallVectorImpl &lt;std::pair&lt;unsignedint,SDValue&gt;&gt;&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,std::vector&lt;EVT&gt;&amp;,constllvm::PPCSubtarget&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_Darwin(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_Darwin(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_64SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_64SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCall_32SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_32SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="AllocaSliceRewriter(constllvm::DataLayout&amp;,&lt;anonymous&gt;::AllocaSlices&amp;, &lt;anonymous&gt;::SROA&amp;,llvm::AllocaInst&amp;,llvm::AllocaInst&amp;,uint64_t ,uint64_t,bool,bool,SmallPtrSetImpl&lt;llvm::PHINode*&gt;&amp;,SmallPtrSetImpl &lt;llvm::SelectInst*&gt;&amp;)" FullName="anonymous_namespace{sroa.cpp}.AllocaSliceRewriter.AllocaSliceRewriter (constllvm::DataLayout&amp;,&lt;anonymous&gt;::AllocaSlices&amp;,&lt;anonymous&gt;::SROA&amp; ,llvm::AllocaInst&amp;,llvm::AllocaInst&amp;,uint64_t,uint64_t,bool,bool ,SmallPtrSetImpl&lt;llvm::PHINode*&gt;&amp;,SmallPtrSetImpl&lt;llvm::SelectInst*&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="FindOptimalMemOpLowering(std::vector&lt;EVT&gt;&amp;,unsignedint,uint64_t ,unsignedint,unsignedint,bool,bool,bool,bool,llvm::SelectionDAG&amp; ,constllvm::TargetLowering&amp;)" FullName="__Globals.FindOptimalMemOpLowering(std::vector&lt;EVT&gt;&amp;,unsignedint ,uint64_t,unsignedint,unsignedint,bool,bool,bool,bool ,llvm::SelectionDAG&amp;,constllvm::TargetLowering&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="getMemcpyLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="__Globals.getMemcpyLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool ,bool,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="getMemmoveLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="__Globals.getMemmoveLoadsAndStores(llvm::SelectionDAG&amp;,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::SDValue,uint64_t,unsignedint,bool ,bool,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="getLoad(llvm::EVT,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)" FullName="llvm.SelectionDAG.getLoad(llvm::EVT,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,bool,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;,constllvm::MDNode*)">
          <Val>11</Val>
        </Row>
        <Row Name="getExtLoad(ISD::LoadExtType,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool,bool ,unsignedint,constllvm::AAMDNodes&amp;)" FullName="llvm.SelectionDAG.getExtLoad(ISD::LoadExtType,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool ,bool,unsignedint,constllvm::AAMDNodes&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.TargetSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.SystemZSelectionDAGInfo.EmitTargetCodeForMemcpy (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="pruneDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,std::vector &lt;Value*&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseMap&lt;ValuePair ,size_t&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,ValuePair,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.pruneDAGFor(DenseMap &lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseMap &lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;VPPair&gt;&amp;,DenseMap &lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseMap&lt;ValuePair,size_t&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,ValuePair,bool)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.X86SelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCCCCallTo(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.XCoreTargetLowering.LowerCCCCallTo(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>11</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.XCoreSelectionDAGInfo.EmitTargetCodeForMemcpy(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>11</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool,llvm::SDValue)" FullName="llvm.AArch64TargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool ,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMem(unsignedint,constllvm::MCConstantExpr*,unsignedint ,ARM_AM::ShiftOpc,unsignedint,unsignedint,bool,llvm::SMLoc,llvm::SMLoc ,llvm::SMLoc)" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand.CreateMem(unsignedint ,constllvm::MCConstantExpr*,unsignedint,ARM_AM::ShiftOpc,unsignedint ,unsignedint,bool,llvm::SMLoc,llvm::SMLoc,llvm::SMLoc)">
          <Val>10</Val>
        </Row>
        <Row Name="emitPostLd(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)" FullName="__Globals.emitPostLd(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="emitPostSt(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)" FullName="__Globals.emitPostSt(llvm::MachineBasicBlock*,llvm::MachineInstr* ,constllvm::TargetInstrInfo*,llvm::DebugLoc,unsignedint,unsignedint ,unsignedint,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="emitThumbRegPlusImmInReg(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,bool,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)" FullName="__Globals.emitThumbRegPlusImmInReg(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,bool,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="emitARMRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitARMRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="emitT2RegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitT2RegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,constllvm::ARMBaseInstrInfo&amp; ,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="PassF64ArgInRegs(llvm::SDLoc,llvm::SelectionDAG&amp;,llvm::SDValue ,llvm::SDValue&amp;,RegsToPassVector&amp;,llvm::CCValAssign&amp; ,llvm::CCValAssign&amp;,llvm::SDValue&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,ISD::ArgFlagsTy)" FullName="llvm.ARMTargetLowering.PassF64ArgInRegs(llvm::SDLoc ,llvm::SelectionDAG&amp;,llvm::SDValue,llvm::SDValue&amp;,RegsToPassVector&amp; ,llvm::CCValAssign&amp;,llvm::CCValAssign&amp;,llvm::SDValue&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;,ISD::ArgFlagsTy)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool,llvm::SDValue)" FullName="llvm.ARMTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,bool ,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="MergeLDR_STR(llvm::MachineBasicBlock&amp;,unsignedint,unsignedint,int ,unsignedint,ARMCC::CondCodes,unsignedint,unsignedint,MemOpQueue&amp; ,SmallVectorImpl&lt;MachineBasicBlock::iterator&gt;&amp;)" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt .MergeLDR_STR(llvm::MachineBasicBlock&amp;,unsignedint,unsignedint,int ,unsignedint,ARMCC::CondCodes,unsignedint,unsignedint,MemOpQueue&amp; ,SmallVectorImpl&lt;MachineBasicBlock::iterator&gt;&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="computeKnownBitsAddSub(bool,llvm::Value*,llvm::Value*,bool ,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="__Globals.computeKnownBitsAddSub(bool,llvm::Value*,llvm::Value*,bool ,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateReg(unsignedint,bool,bool,bool,bool,bool,bool,unsignedint,bool ,bool)" FullName="llvm.MachineOperand.CreateReg(unsignedint,bool,bool,bool,bool,bool ,bool,unsignedint,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="createCompileUnit(unsignedint,llvm::StringRef,llvm::StringRef ,llvm::StringRef,bool,llvm::StringRef,unsignedint,llvm::StringRef ,llvm::DIBuilder::DebugEmissionKind,bool)" FullName="llvm.DIBuilder.createCompileUnit(unsignedint,llvm::StringRef ,llvm::StringRef,llvm::StringRef,bool,llvm::StringRef,unsignedint ,llvm::StringRef,llvm::DIBuilder::DebugEmissionKind,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="createUnionType(llvm::DIDescriptor,llvm::StringRef,llvm::DIFile ,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIArray,unsignedint ,llvm::StringRef)" FullName="llvm.DIBuilder.createUnionType(llvm::DIDescriptor,llvm::StringRef ,llvm::DIFile,unsignedint,uint64_t,uint64_t,unsignedint,llvm::DIArray ,unsignedint,llvm::StringRef)">
          <Val>10</Val>
        </Row>
        <Row Name="GlobalVariable(llvm::Module&amp;,llvm::Type*,bool ,llvm::GlobalValue::LinkageTypes,llvm::Constant*,constllvm::Twine&amp; ,llvm::GlobalVariable*,llvm::GlobalValue::ThreadLocalMode,unsignedint ,bool)" FullName="llvm.GlobalVariable.GlobalVariable(llvm::Module&amp;,llvm::Type*,bool ,llvm::GlobalValue::LinkageTypes,llvm::Constant*,constllvm::Twine&amp; ,llvm::GlobalVariable*,llvm::GlobalValue::ThreadLocalMode,unsignedint ,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,llvm::SDValue)" FullName="llvm.HexagonTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,llvm::SDValue)">
          <Val>10</Val>
        </Row>
        <Row Name="WriteSecHdrEntry(uint32_t,uint32_t,uint64_t,uint64_t,uint64_t,uint64_t ,uint32_t,uint32_t,uint64_t,uint64_t)" FullName="anonymous_namespace{elfobjectwriter.cpp}.ELFObjectWriter .WriteSecHdrEntry(uint32_t,uint32_t,uint64_t,uint64_t,uint64_t ,uint64_t,uint32_t,uint32_t,uint64_t,uint64_t)">
          <Val>10</Val>
        </Row>
        <Row Name="parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp;,unsignedint&amp; ,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp; ,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)" FullName="llvm.MCAsmParser.parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp; ,unsignedint&amp;,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl &lt;std::string&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="parseMSInlineAsm(void*,std::string&amp;,unsignedint&amp;,unsignedint&amp; ,SmallVectorImpl&lt;std::pair&lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp; ,SmallVectorImpl&lt;std::string&gt;&amp;,constllvm::MCInstrInfo* ,constllvm::MCInstPrinter*,llvm::MCAsmParserSemaCallback&amp;)" FullName="anonymous_namespace{asmparser.cpp}.AsmParser.parseMSInlineAsm(void* ,std::string&amp;,unsignedint&amp;,unsignedint&amp;,SmallVectorImpl&lt;std::pair &lt;void*,bool&gt;&gt;&amp;,SmallVectorImpl&lt;std::string&gt;&amp;,SmallVectorImpl &lt;std::string&gt;&amp;,constllvm::MCInstrInfo*,constllvm::MCInstPrinter* ,llvm::MCAsmParserSemaCallback&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="LowerCallResult(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constllvm::SDNode*,constllvm::Type*)" FullName="llvm.MipsTargetLowering.LowerCallResult(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constllvm::SDNode*,constllvm::Type*)">
          <Val>10</Val>
        </Row>
        <Row Name="SelectMUBUFAddr32(llvm::SDValue,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;)" FullName="anonymous_namespace{amdgpuiseldagtodag.cpp}.AMDGPUDAGToDAGISel .SelectMUBUFAddr32(llvm::SDValue,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp; ,llvm::SDValue&amp;,llvm::SDValue&amp;,llvm::SDValue&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="RelocationEntry(unsignedint,uint64_t,uint32_t,int64_t,unsignedint ,uint64_t,unsignedint,uint64_t,bool,unsignedint)" FullName="llvm.RelocationEntry.RelocationEntry(unsignedint,uint64_t,uint32_t ,int64_t,unsignedint,uint64_t,unsignedint,uint64_t,bool,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="RateFormula(constllvm::TargetTransformInfo&amp;,const&lt;anonymous&gt;::Formula&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;&amp;,constDenseSet&lt;constllvm::SCEV*&gt;&amp; ,constllvm::Loop*,constSmallVectorImpl&lt;int64_t&gt;&amp; ,llvm::ScalarEvolution&amp;,llvm::DominatorTree&amp;,const&lt;anonymous&gt;::LSRUse&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;*)" FullName="anonymous_namespace{loopstrengthreduce.cpp}.Cost.RateFormula (constllvm::TargetTransformInfo&amp;,const&lt;anonymous&gt;::Formula&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;&amp;,constDenseSet&lt;constllvm::SCEV*&gt;&amp; ,constllvm::Loop*,constSmallVectorImpl&lt;int64_t&gt;&amp; ,llvm::ScalarEvolution&amp;,llvm::DominatorTree&amp;,const&lt;anonymous&gt;::LSRUse&amp; ,SmallPtrSet&lt;constllvm::SCEV*,16&gt;*)">
          <Val>10</Val>
        </Row>
        <Row Name="getMemcpy(llvm::SDValue,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,unsignedint,bool,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)" FullName="llvm.SelectionDAG.getMemcpy(llvm::SDValue,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)">
          <Val>10</Val>
        </Row>
        <Row Name="getAtomic(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue,llvm::SDValue,constllvm::Value*,unsignedint ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.SelectionDAG.getAtomic(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue,constllvm::Value* ,unsignedint,llvm::AtomicOrdering,llvm::SynchronizationScope)">
          <Val>10</Val>
        </Row>
        <Row Name="getMemIntrinsicNode(unsignedint,llvm::SDLoc,llvm::SDVTList,ArrayRef &lt;llvm::SDValue&gt;,llvm::EVT,llvm::MachinePointerInfo,unsignedint,bool ,bool,bool)" FullName="llvm.SelectionDAG.getMemIntrinsicNode(unsignedint,llvm::SDLoc ,llvm::SDVTList,ArrayRef&lt;llvm::SDValue&gt;,llvm::EVT ,llvm::MachinePointerInfo,unsignedint,bool,bool,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="getTruncStore(llvm::SDValue,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::MachinePointerInfo,llvm::EVT,bool,bool,unsignedint ,constllvm::AAMDNodes&amp;)" FullName="llvm.SelectionDAG.getTruncStore(llvm::SDValue,llvm::SDLoc ,llvm::SDValue,llvm::SDValue,llvm::MachinePointerInfo,llvm::EVT,bool ,bool,unsignedint,constllvm::AAMDNodes&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc,llvm::SDVTList ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::MachineMemOperand* ,llvm::AtomicOrdering,llvm::SynchronizationScope)" FullName="llvm.AtomicSDNode.AtomicSDNode(unsignedint,unsignedint,llvm::DebugLoc ,llvm::SDVTList,llvm::EVT,llvm::SDValue,llvm::SDValue ,llvm::MachineMemOperand*,llvm::AtomicOrdering ,llvm::SynchronizationScope)">
          <Val>10</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemmove(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo,llvm::MachinePointerInfo)" FullName="llvm.TargetSelectionDAGInfo.EmitTargetCodeForMemmove (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,llvm::MachinePointerInfo ,llvm::MachinePointerInfo)">
          <Val>10</Val>
        </Row>
        <Row Name="SMDiagnostic(constllvm::SourceMgr&amp;,llvm::SMLoc,llvm::StringRef,int,int ,SourceMgr::DiagKind,llvm::StringRef,llvm::StringRef,ArrayRef &lt;std::pair&lt;unsignedint,unsignedint&gt;&gt;,ArrayRef&lt;llvm::SMFixIt&gt;)" FullName="llvm.SMDiagnostic.SMDiagnostic(constllvm::SourceMgr&amp;,llvm::SMLoc ,llvm::StringRef,int,int,SourceMgr::DiagKind,llvm::StringRef ,llvm::StringRef,ArrayRef&lt;std::pair&lt;unsignedint,unsignedint&gt;&gt;,ArrayRef &lt;llvm::SMFixIt&gt;)">
          <Val>10</Val>
        </Row>
        <Row Name="choosePairs(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.choosePairs(DenseMap &lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp;,DenseMap &lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="expandIEChain(llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction* ,unsignedint,llvm::Value*&amp;,unsignedint,llvm::Type*,llvm::Type*,bool ,unsignedint)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.expandIEChain (llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction*,unsignedint ,llvm::Value*&amp;,unsignedint,llvm::Type*,llvm::Type*,bool,unsignedint)">
          <Val>10</Val>
        </Row>
        <Row Name="getPairPtrInfo(llvm::Instruction*,llvm::Instruction*,llvm::Value*&amp; ,llvm::Value*&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp; ,int64_t&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.getPairPtrInfo (llvm::Instruction*,llvm::Instruction*,llvm::Value*&amp;,llvm::Value*&amp; ,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,unsignedint&amp;,int64_t&amp;,bool)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMem(unsignedint,constllvm::MCExpr*,unsignedint,unsignedint ,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint,llvm::StringRef,void* )" FullName="llvm.X86Operand.CreateMem(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,void*)">
          <Val>10</Val>
        </Row>
        <Row Name="CreateMemForInlineAsm(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,llvm::InlineAsmIdentifierInfo&amp;)" FullName="anonymous_namespace{x86asmparser.cpp}.X86AsmParser .CreateMemForInlineAsm(unsignedint,constllvm::MCExpr*,unsignedint ,unsignedint,unsignedint,llvm::SMLoc,llvm::SMLoc,unsignedint ,llvm::StringRef,llvm::InlineAsmIdentifierInfo&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="getGatherNode(unsignedint,llvm::SDValue,llvm::SelectionDAG&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,constllvm::X86Subtarget*)" FullName="__Globals.getGatherNode(unsignedint,llvm::SDValue,llvm::SelectionDAG&amp; ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,llvm::SDValue,constllvm::X86Subtarget*)">
          <Val>10</Val>
        </Row>
        <Row Name="IsEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,llvm::Type*,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)" FullName="llvm.X86TargetLowering.IsEligibleForTailCallOptimization(llvm::SDValue ,CallingConv::ID,bool,bool,bool,llvm::Type*,constSmallVectorImpl &lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>10</Val>
        </Row>
        <Row Name="emitFrameOffset(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,llvm::DebugLoc,unsignedint,unsignedint,int ,constllvm::TargetInstrInfo*,MachineInstr::MIFlag,bool)" FullName="llvm.__Globals.emitFrameOffset(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo*,MachineInstr::MIFlag,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="isEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp; ,llvm::SelectionDAG&amp;)" FullName="llvm.AArch64TargetLowering.isEligibleForTailCallOptimization (llvm::SDValue,CallingConv::ID,bool,bool,bool,constSmallVectorImpl &lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp; ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>9</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemset(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo)" FullName="llvm.AArch64SelectionDAGInfo.EmitTargetCodeForMemset (llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,unsignedint,bool,llvm::MachinePointerInfo )">
          <Val>9</Val>
        </Row>
        <Row Name="AArch64TargetMachine(constllvm::Target&amp;,llvm::StringRef ,llvm::StringRef,llvm::StringRef,constllvm::TargetOptions&amp; ,Reloc::Model,CodeModel::Model,CodeGenOpt::Level,bool)" FullName="llvm.AArch64TargetMachine.AArch64TargetMachine(constllvm::Target&amp; ,llvm::StringRef,llvm::StringRef,llvm::StringRef ,constllvm::TargetOptions&amp;,Reloc::Model,CodeModel::Model ,CodeGenOpt::Level,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="createMCStreamer(constllvm::Target&amp;,llvm::StringRef,llvm::MCContext&amp; ,llvm::MCAsmBackend&amp;,llvm::raw_ostream&amp;,llvm::MCCodeEmitter* ,constllvm::MCSubtargetInfo&amp;,bool,bool)" FullName="__Globals.createMCStreamer(constllvm::Target&amp;,llvm::StringRef ,llvm::MCContext&amp;,llvm::MCAsmBackend&amp;,llvm::raw_ostream&amp; ,llvm::MCCodeEmitter*,constllvm::MCSubtargetInfo&amp;,bool,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="emitSPUpdate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,int,unsignedint,ARMCC::CondCodes ,unsignedint)" FullName="__Globals.emitSPUpdate(bool,llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc ,constllvm::ARMBaseInstrInfo&amp;,int,unsignedint,ARMCC::CondCodes ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitThumbRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)" FullName="llvm.__Globals.emitThumbRegPlusImmediate(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,constllvm::TargetInstrInfo&amp;,constllvm::ARMBaseRegisterInfo&amp; ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.ARMBaseRegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitPushInst(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,conststd::vector&lt;CalleeSavedInfo&gt;&amp;,unsignedint,unsignedint,bool,bool (*)(unsignedint,bool),unsignedint,unsignedint)" FullName="llvm.ARMFrameLowering.emitPushInst(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,conststd::vector&lt;CalleeSavedInfo&gt;&amp; ,unsignedint,unsignedint,bool,bool(*)(unsignedint,bool),unsignedint ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitPopInst(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator ,conststd::vector&lt;CalleeSavedInfo&gt;&amp;,unsignedint,unsignedint,bool,bool ,bool(*)(unsignedint,bool),unsignedint)" FullName="llvm.ARMFrameLowering.emitPopInst(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator,conststd::vector&lt;CalleeSavedInfo&gt;&amp; ,unsignedint,unsignedint,bool,bool,bool(*)(unsignedint,bool) ,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="IsEligibleForTailCallOptimization(llvm::SDValue,CallingConv::ID,bool ,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp; ,llvm::SelectionDAG&amp;)" FullName="llvm.ARMTargetLowering.IsEligibleForTailCallOptimization(llvm::SDValue ,CallingConv::ID,bool,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SelectionDAG&amp;)">
          <Val>9</Val>
        </Row>
        <Row Name="EmitTargetCodeForMemset(llvm::SelectionDAG&amp;,llvm::SDLoc,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,unsignedint,bool ,llvm::MachinePointerInfo)" FullName="llvm.ARMSelectionDAGInfo.EmitTargetCodeForMemset(llvm::SelectionDAG&amp; ,llvm::SDLoc,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue ,unsignedint,bool,llvm::MachinePointerInfo)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.Thumb1RegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)" FullName="llvm.Thumb2RegisterInfo.emitLoadConstPool(llvm::MachineBasicBlock&amp; ,MachineBasicBlock::iterator&amp;,llvm::DebugLoc,unsignedint,unsignedint ,int,ARMCC::CondCodes,unsignedint,unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="ARMBaseTargetMachine(constllvm::Target&amp;,llvm::StringRef ,llvm::StringRef,llvm::StringRef,constllvm::TargetOptions&amp; ,Reloc::Model,CodeModel::Model,CodeGenOpt::Level,bool)" FullName="llvm.ARMBaseTargetMachine.ARMBaseTargetMachine(constllvm::Target&amp; ,llvm::StringRef,llvm::StringRef,llvm::StringRef ,constllvm::TargetOptions&amp;,Reloc::Model,CodeModel::Model ,CodeGenOpt::Level,bool)">
          <Val>9</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>8 089</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>7.15</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>6</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>18</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>1.56</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>2.42</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods with too many local variables" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods with too many local variables" QueryId="Query2531780720" NbNodeMatched="1391" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;local&amp;#0160;variables&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbVariables&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;15&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbVariables&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbVariables&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;NbVariables&amp;#0160;&amp;gt;&amp;#0160;8&amp;#0160;are&amp;#0160;hard&amp;#0160;to&amp;#0160;understand&amp;#0160;and&amp;#0160;maintain.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;NbVariables&amp;#0160;&amp;gt;&amp;#0160;15&amp;#0160;are&amp;#0160;extremely&amp;#0160;complex&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;should&amp;#0160;be&amp;#0160;split&amp;#0160;in&amp;#0160;smaller&amp;#0160;methods.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;Nbvariables&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#Nbvariables" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#Nbvariables&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># Variables</Column>
      </Columns>
      <Rows>
        <Row Name="TestBody()" FullName="anonymous_namespace{scalednumbertest.cpp} .ScaledNumberHelpersTest_matchScales_Test.TestBody()">
          <Val>384</Val>
        </Row>
        <Row Name="ParseFunctionBody(llvm::Function*)" FullName="llvm.BitcodeReader.ParseFunctionBody(llvm::Function*)">
          <Val>200</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>190</Val>
        </Row>
        <Row Name="visitCallInst(llvm::CallInst&amp;)" FullName="llvm.InstCombiner.visitCallInst(llvm::CallInst&amp;)">
          <Val>176</Val>
        </Row>
        <Row Name="ExpandNode(llvm::SDNode*)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize.ExpandNode (llvm::SDNode*)">
          <Val>156</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_AsInstructionsTest_Test.TestBody()">
          <Val>154</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.NVPTXTargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>151</Val>
        </Row>
        <Row Name="visitICmpInst(llvm::ICmpInst&amp;)" FullName="llvm.InstCombiner.visitICmpInst(llvm::ICmpInst&amp;)">
          <Val>144</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel.Select (llvm::SDNode*)">
          <Val>133</Val>
        </Row>
        <Row Name="processInstruction(llvm::MCInst&amp;,constOperandVector&amp;)" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser.processInstruction (llvm::MCInst&amp;,constOperandVector&amp;)">
          <Val>130</Val>
        </Row>
        <Row Name="visitIntrinsicCall(constllvm::CallInst&amp;,unsignedint)" FullName="llvm.SelectionDAGBuilder.visitIntrinsicCall(constllvm::CallInst&amp; ,unsignedint)">
          <Val>125</Val>
        </Row>
        <Row Name="Select(llvm::SDNode*)" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel.Select (llvm::SDNode*)">
          <Val>114</Val>
        </Row>
        <Row Name="vectorizeTree(&lt;anonymous&gt;::BoUpSLP::TreeEntry*)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.vectorizeTree( &lt;anonymous&gt;::BoUpSLP::TreeEntry*)">
          <Val>113</Val>
        </Row>
        <Row Name="buildTree_rec(ArrayRef&lt;llvm::Value*&gt;,unsignedint)" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP.buildTree_rec(ArrayRef &lt;llvm::Value*&gt;,unsignedint)">
          <Val>112</Val>
        </Row>
        <Row Name="SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value*,constQuery&amp; ,unsignedint)" FullName="__Globals.SimplifyICmpInst(unsignedint,llvm::Value*,llvm::Value* ,constQuery&amp;,unsignedint)">
          <Val>103</Val>
        </Row>
        <Row Name="InlineFunction(llvm::CallSite,llvm::InlineFunctionInfo&amp;,bool)" FullName="llvm.__Globals.InlineFunction(llvm::CallSite,llvm::InlineFunctionInfo&amp; ,bool)">
          <Val>99</Val>
        </Row>
        <Row Name="SimplifyDemandedBits(llvm::SDValue,constllvm::APInt&amp;,llvm::APInt&amp; ,llvm::APInt&amp;,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)" FullName="llvm.TargetLowering.SimplifyDemandedBits(llvm::SDValue ,constllvm::APInt&amp;,llvm::APInt&amp;,llvm::APInt&amp; ,llvm::TargetLowering::TargetLoweringOpt&amp;,unsignedint)">
          <Val>97</Val>
        </Row>
        <Row Name="DoPromotion(llvm::Function*,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp; ,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp;)" FullName="anonymous_namespace{argumentpromotion.cpp}.ArgPromotion.DoPromotion (llvm::Function*,SmallPtrSet&lt;llvm::Argument*,8&gt;&amp;,SmallPtrSet &lt;llvm::Argument*,8&gt;&amp;)">
          <Val>96</Val>
        </Row>
        <Row Name="visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp;,llvm::Instruction* ,llvm::ConstantInt*)" FullName="llvm.InstCombiner.visitICmpInstWithInstAndIntCst(llvm::ICmpInst&amp; ,llvm::Instruction*,llvm::ConstantInt*)">
          <Val>94</Val>
        </Row>
        <Row Name="LowerCall(TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.ARMTargetLowering.LowerCall(TargetLowering::CallLoweringInfo&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>92</Val>
        </Row>
        <Row Name="SelectCodeCommon(llvm::SDNode*,constunsignedchar*,unsignedint)" FullName="llvm.SelectionDAGISel.SelectCodeCommon(llvm::SDNode* ,constunsignedchar*,unsignedint)">
          <Val>92</Val>
        </Row>
        <Row Name="SimplifySetCC(llvm::EVT,llvm::SDValue,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)" FullName="llvm.TargetLowering.SimplifySetCC(llvm::EVT,llvm::SDValue ,llvm::SDValue,ISD::CondCode,bool ,llvm::TargetLowering::DAGCombinerInfo&amp;,llvm::SDLoc)">
          <Val>91</Val>
        </Row>
        <Row Name="MergeConsecutiveStores(llvm::StoreSDNode*)" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner .MergeConsecutiveStores(llvm::StoreSDNode*)">
          <Val>91</Val>
        </Row>
        <Row Name="EmitSjLjDispatchBlock(llvm::MachineInstr*,llvm::MachineBasicBlock*)" FullName="llvm.ARMTargetLowering.EmitSjLjDispatchBlock(llvm::MachineInstr* ,llvm::MachineBasicBlock*)">
          <Val>90</Val>
        </Row>
        <Row Name="ParseConstants()" FullName="llvm.BitcodeReader.ParseConstants()">
          <Val>90</Val>
        </Row>
        <Row Name="EmitInstruction(constllvm::MachineInstr*)" FullName="anonymous_namespace{ppcasmprinter.cpp}.PPCAsmPrinter.EmitInstruction (constllvm::MachineInstr*)">
          <Val>88</Val>
        </Row>
        <Row Name="getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp;,SCEV::NoWrapFlags)" FullName="llvm.ScalarEvolution.getAddExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp; ,SCEV::NoWrapFlags)">
          <Val>85</Val>
        </Row>
        <Row Name="UnrollLoop(llvm::Loop*,unsignedint,unsignedint,bool,unsignedint ,llvm::LoopInfo*,llvm::Pass*,llvm::LPPassManager*)" FullName="llvm.__Globals.UnrollLoop(llvm::Loop*,unsignedint,unsignedint,bool ,unsignedint,llvm::LoopInfo*,llvm::Pass*,llvm::LPPassManager*)">
          <Val>82</Val>
        </Row>
        <Row Name="DisassembleObject(constllvm::object::ObjectFile*,bool)" FullName="__Globals.DisassembleObject(constllvm::object::ObjectFile*,bool)">
          <Val>82</Val>
        </Row>
        <Row Name="visitGetElementPtrInst(llvm::GetElementPtrInst&amp;)" FullName="llvm.InstCombiner.visitGetElementPtrInst(llvm::GetElementPtrInst&amp;)">
          <Val>81</Val>
        </Row>
        <Row Name="PerformDAGCombine(llvm::SDNode*,llvm::TargetLowering::DAGCombinerInfo&amp; )" FullName="llvm.PPCTargetLowering.PerformDAGCombine(llvm::SDNode* ,llvm::TargetLowering::DAGCombinerInfo&amp;)">
          <Val>80</Val>
        </Row>
        <Row Name="PerformDAGCombine(llvm::SDNode*,llvm::TargetLowering::DAGCombinerInfo&amp; )" FullName="llvm.XCoreTargetLowering.PerformDAGCombine(llvm::SDNode* ,llvm::TargetLowering::DAGCombinerInfo&amp;)">
          <Val>80</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)" FullName="llvm.__Globals.computeKnownBits(llvm::Value*,llvm::APInt&amp;,llvm::APInt&amp; ,constllvm::DataLayout*,unsignedint)">
          <Val>79</Val>
        </Row>
        <Row Name="visitInlineAsm(llvm::ImmutableCallSite)" FullName="llvm.SelectionDAGBuilder.visitInlineAsm(llvm::ImmutableCallSite)">
          <Val>78</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.AArch64TargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>76</Val>
        </Row>
        <Row Name="LowerBUILD_VECTOR(llvm::SDValue,llvm::SelectionDAG&amp;)" FullName="llvm.AArch64TargetLowering.LowerBUILD_VECTOR(llvm::SDValue ,llvm::SelectionDAG&amp;)">
          <Val>76</Val>
        </Row>
        <Row Name="SplitCriticalEdge(llvm::MachineBasicBlock*,llvm::Pass*)" FullName="llvm.MachineBasicBlock.SplitCriticalEdge(llvm::MachineBasicBlock* ,llvm::Pass*)">
          <Val>75</Val>
        </Row>
        <Row Name="SimplifyDemandedUseBits(llvm::Value*,llvm::APInt,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)" FullName="llvm.InstCombiner.SimplifyDemandedUseBits(llvm::Value*,llvm::APInt ,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)">
          <Val>74</Val>
        </Row>
        <Row Name="createSCEV(llvm::Value*)" FullName="llvm.ScalarEvolution.createSCEV(llvm::Value*)">
          <Val>73</Val>
        </Row>
        <Row Name="buildSchedGraph(llvm::AliasAnalysis*,llvm::RegPressureTracker* ,llvm::PressureDiffs*)" FullName="llvm.ScheduleDAGInstrs.buildSchedGraph(llvm::AliasAnalysis* ,llvm::RegPressureTracker*,llvm::PressureDiffs*)">
          <Val>73</Val>
        </Row>
        <Row Name="visitAND(llvm::SDNode*)" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner.visitAND (llvm::SDNode*)">
          <Val>73</Val>
        </Row>
        <Row Name="findBestDAGFor(DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair ,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp; ,DenseSet&lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.findBestDAGFor (DenseMap&lt;llvm::Value*,std::vector&lt;Value*&gt;&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;ValuePair,int&gt;&amp;,std::vector&lt;Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,DenseMap&lt;VPPair,unsignedint&gt;&amp;,DenseMap&lt;ValuePair,std::vector &lt;ValuePair&gt;&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;ValuePair&gt;&amp;,DenseMap&lt;ValuePair,std::vector&lt;ValuePair&gt;&gt;&amp;,DenseSet &lt;VPPair&gt;&amp;,DenseMap&lt;llvm::Value*,llvm::Value*&gt;&amp;,DenseSet&lt;ValuePair&gt;&amp; ,size_t&amp;,int&amp;,llvm::Value*,std::vector&lt;Value*&gt;&amp;,bool)">
          <Val>73</Val>
        </Row>
        <Row Name="WriteObject(llvm::MCAssembler&amp;,constllvm::MCAsmLayout&amp;)" FullName="llvm.MachObjectWriter.WriteObject(llvm::MCAssembler&amp; ,constllvm::MCAsmLayout&amp;)">
          <Val>72</Val>
        </Row>
        <Row Name="LowerCall_64SVR4(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_64SVR4(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>72</Val>
        </Row>
        <Row Name="ComputeValueKnownInPredecessors(llvm::Value*,llvm::BasicBlock* ,PredValueInfo&amp;,&lt;anonymous&gt;::ConstantPreference)" FullName="anonymous_namespace{jumpthreading.cpp}.JumpThreading .ComputeValueKnownInPredecessors(llvm::Value*,llvm::BasicBlock* ,PredValueInfo&amp;,&lt;anonymous&gt;::ConstantPreference)">
          <Val>72</Val>
        </Row>
        <Row Name="LowerCall_32(TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.SparcTargetLowering.LowerCall_32 (TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>71</Val>
        </Row>
        <Row Name="LowerCall(llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)" FullName="llvm.X86TargetLowering.LowerCall (llvm::TargetLowering::CallLoweringInfo&amp;,SmallVectorImpl&lt;llvm::SDValue &gt;&amp;)">
          <Val>71</Val>
        </Row>
        <Row Name="FoldShiftByConstant(llvm::Value*,llvm::Constant*,llvm::BinaryOperator&amp; )" FullName="llvm.InstCombiner.FoldShiftByConstant(llvm::Value*,llvm::Constant* ,llvm::BinaryOperator&amp;)">
          <Val>70</Val>
        </Row>
        <Row Name="LowerFormalArguments_64SVR4(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerFormalArguments_64SVR4(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>70</Val>
        </Row>
        <Row Name="getReplacementInput(llvm::LLVMContext&amp;,llvm::Instruction* ,llvm::Instruction*,unsignedint,bool)" FullName="anonymous_namespace{bbvectorize.cpp}.BBVectorize.getReplacementInput (llvm::LLVMContext&amp;,llvm::Instruction*,llvm::Instruction*,unsignedint ,bool)">
          <Val>70</Val>
        </Row>
        <Row Name="FastLowerCall(llvm::FastISel::CallLoweringInfo&amp;)" FullName="anonymous_namespace{x86fastisel.cpp}.X86FastISel.FastLowerCall (llvm::FastISel::CallLoweringInfo&amp;)">
          <Val>70</Val>
        </Row>
        <Row Name="emitPrologue(llvm::MachineFunction&amp;)" FullName="llvm.ARMFrameLowering.emitPrologue(llvm::MachineFunction&amp;)">
          <Val>69</Val>
        </Row>
        <Row Name="visitOr(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitOr(llvm::BinaryOperator&amp;)">
          <Val>68</Val>
        </Row>
        <Row Name="LowerFormalArguments(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.NVPTXTargetLowering.LowerFormalArguments(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>68</Val>
        </Row>
        <Row Name="DisassembleInputMachO2(llvm::StringRef,llvm::object::MachOObjectFile*)" FullName="__Globals.DisassembleInputMachO2(llvm::StringRef ,llvm::object::MachOObjectFile*)">
          <Val>68</Val>
        </Row>
        <Row Name="EmitPrintAliasInstruction(llvm::raw_ostream&amp;)" FullName="anonymous_namespace{asmwriteremitter.cpp}.AsmWriterEmitter .EmitPrintAliasInstruction(llvm::raw_ostream&amp;)">
          <Val>68</Val>
        </Row>
        <Row Name="getConstantValue(constllvm::Constant*)" FullName="llvm.ExecutionEngine.getConstantValue(constllvm::Constant*)">
          <Val>67</Val>
        </Row>
        <Row Name="runTargetDesc(llvm::raw_ostream&amp;,llvm::CodeGenTarget&amp; ,llvm::CodeGenRegBank&amp;)" FullName="anonymous_namespace{registerinfoemitter.cpp}.RegisterInfoEmitter .runTargetDesc(llvm::raw_ostream&amp;,llvm::CodeGenTarget&amp; ,llvm::CodeGenRegBank&amp;)">
          <Val>67</Val>
        </Row>
        <Row Name="ExpandMI(llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator)" FullName="anonymous_namespace{armexpandpseudoinsts.cpp}.ARMExpandPseudo.ExpandMI (llvm::MachineBasicBlock&amp;,MachineBasicBlock::iterator)">
          <Val>66</Val>
        </Row>
        <Row Name="processRelocationRef(unsignedint,relocation_iterator ,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp;,constSymbolTableMap&amp;,StubMap&amp;)" FullName="llvm.RuntimeDyldELF.processRelocationRef(unsignedint ,relocation_iterator,llvm::ObjectImage&amp;,ObjSectionToIDMap&amp; ,constSymbolTableMap&amp;,StubMap&amp;)">
          <Val>66</Val>
        </Row>
        <Row Name="FastLowerIntrinsicCall(constllvm::IntrinsicInst*)" FullName="anonymous_namespace{x86fastisel.cpp}.X86FastISel .FastLowerIntrinsicCall(constllvm::IntrinsicInst*)">
          <Val>66</Val>
        </Row>
        <Row Name="visitAnd(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitAnd(llvm::BinaryOperator&amp;)">
          <Val>65</Val>
        </Row>
        <Row Name="LowerFormalArguments_Darwin(llvm::SDValue,CallingConv::ID,bool ,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp; ,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerFormalArguments_Darwin(llvm::SDValue ,CallingConv::ID,bool,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)">
          <Val>65</Val>
        </Row>
        <Row Name="getMulExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp;,SCEV::NoWrapFlags)" FullName="llvm.ScalarEvolution.getMulExpr(SmallVectorImpl&lt;constllvm::SCEV*&gt;&amp; ,SCEV::NoWrapFlags)">
          <Val>63</Val>
        </Row>
        <Row Name="createEmptyLoop()" FullName="anonymous_namespace{loopvectorize.cpp}.InnerLoopVectorizer .createEmptyLoop()">
          <Val>63</Val>
        </Row>
        <Row Name="PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)" FullName="__Globals.PerformSELECTCombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,TargetLowering::DAGCombinerInfo&amp;,constllvm::X86Subtarget*)">
          <Val>63</Val>
        </Row>
        <Row Name="handleSpecialFP(MachineBasicBlock::iterator&amp;)" FullName="anonymous_namespace{x86floatingpoint.cpp}.FPS.handleSpecialFP (MachineBasicBlock::iterator&amp;)">
          <Val>63</Val>
        </Row>
        <Row Name="LowerCall_Darwin(llvm::SDValue,llvm::SDValue,CallingConv::ID,bool,bool ,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp;,constSmallVectorImpl &lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl&lt;ISD::InputArg&gt;&amp;,llvm::SDLoc ,llvm::SelectionDAG&amp;,SmallVectorImpl&lt;llvm::SDValue&gt;&amp;)" FullName="llvm.PPCTargetLowering.LowerCall_Darwin(llvm::SDValue,llvm::SDValue ,CallingConv::ID,bool,bool,constSmallVectorImpl&lt;ISD::OutputArg&gt;&amp; ,constSmallVectorImpl&lt;llvm::SDValue&gt;&amp;,constSmallVectorImpl &lt;ISD::InputArg&gt;&amp;,llvm::SDLoc,llvm::SelectionDAG&amp;,SmallVectorImpl &lt;llvm::SDValue&gt;&amp;)">
          <Val>62</Val>
        </Row>
        <Row Name="populateInstruction(llvm::CodeGenTarget&amp; ,constllvm::CodeGenInstruction&amp;,unsignedint,std::map&lt;unsignedint ,std::vector&lt;OperandInfo&gt;&gt;&amp;)" FullName="__Globals.populateInstruction(llvm::CodeGenTarget&amp; ,constllvm::CodeGenInstruction&amp;,unsignedint,std::map&lt;unsignedint ,std::vector&lt;OperandInfo&gt;&gt;&amp;)">
          <Val>62</Val>
        </Row>
        <Row Name="poisonStack()" FullName="anonymous_namespace{addresssanitizer.cpp}.FunctionStackPoisoner .poisonStack()">
          <Val>61</Val>
        </Row>
        <Row Name="emitPrologue(llvm::MachineFunction&amp;)" FullName="llvm.PPCFrameLowering.emitPrologue(llvm::MachineFunction&amp;)">
          <Val>61</Val>
        </Row>
        <Row Name="runOnModule(llvm::Module&amp;)" FullName="anonymous_namespace{sccp.cpp}.IPSCCP.runOnModule(llvm::Module&amp;)">
          <Val>61</Val>
        </Row>
        <Row Name="EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)" FullName="anonymous_namespace{dagiselmatcheremitter.cpp}.MatcherTableEmitter .EmitMatcher(constllvm::Matcher*,unsignedint,unsignedint ,llvm::formatted_raw_ostream&amp;)">
          <Val>61</Val>
        </Row>
        <Row Name="visitXor(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitXor(llvm::BinaryOperator&amp;)">
          <Val>60</Val>
        </Row>
        <Row Name="ExpandLegalINT_TO_FP(bool,llvm::SDValue,llvm::EVT,llvm::SDLoc)" FullName="anonymous_namespace{legalizedag.cpp}.SelectionDAGLegalize .ExpandLegalINT_TO_FP(bool,llvm::SDValue,llvm::EVT,llvm::SDLoc)">
          <Val>60</Val>
        </Row>
        <Row Name="PerformSTORECombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,constllvm::X86Subtarget*)" FullName="__Globals.PerformSTORECombine(llvm::SDNode*,llvm::SelectionDAG&amp; ,constllvm::X86Subtarget*)">
          <Val>60</Val>
        </Row>
        <Row Name="LowerCallTo(llvm::TargetLowering::CallLoweringInfo&amp;)" FullName="llvm.TargetLowering.LowerCallTo (llvm::TargetLowering::CallLoweringInfo&amp;)">
          <Val>59</Val>
        </Row>
        <Row Name="lowerV16I8VectorShuffle(llvm::SDValue,llvm::SDValue,llvm::SDValue ,constllvm::X86Subtarget*,llvm::SelectionDAG&amp;)" FullName="__Globals.lowerV16I8VectorShuffle(llvm::SDValue,llvm::SDValue ,llvm::SDValue,constllvm::X86Subtarget*,llvm::SelectionDAG&amp;)">
          <Val>59</Val>
        </Row>
        <Row Name="OptimizeBlock(llvm::MachineBasicBlock*)" FullName="llvm.BranchFolder.OptimizeBlock(llvm::MachineBasicBlock*)">
          <Val>58</Val>
        </Row>
        <Row Name="SwitchToLookupTable(llvm::SwitchInst*,IRBuilder&lt;&gt;&amp; ,constllvm::TargetTransformInfo&amp;,constllvm::DataLayout*)" FullName="__Globals.SwitchToLookupTable(llvm::SwitchInst*,IRBuilder&lt;&gt;&amp; ,constllvm::TargetTransformInfo&amp;,constllvm::DataLayout*)">
          <Val>58</Val>
        </Row>
        <Row Name="emitCallAndSwitchStatement(llvm::Function*,llvm::BasicBlock*,ValueSet&amp; ,ValueSet&amp;)" FullName="llvm.CodeExtractor.emitCallAndSwitchStatement(llvm::Function* ,llvm::BasicBlock*,ValueSet&amp;,ValueSet&amp;)">
          <Val>58</Val>
        </Row>
        <Row Name="emitPrologue(llvm::MachineFunction&amp;)" FullName="llvm.X86FrameLowering.emitPrologue(llvm::MachineFunction&amp;)">
          <Val>58</Val>
        </Row>
        <Row Name="main(int,char**)" FullName="__Globals.main(int,char**)">
          <Val>58</Val>
        </Row>
        <Row Name="runMCDesc(llvm::raw_ostream&amp;,llvm::CodeGenTarget&amp; ,llvm::CodeGenRegBank&amp;)" FullName="anonymous_namespace{registerinfoemitter.cpp}.RegisterInfoEmitter .runMCDesc(llvm::raw_ostream&amp;,llvm::CodeGenTarget&amp; ,llvm::CodeGenRegBank&amp;)">
          <Val>58</Val>
        </Row>
        <Row Name="runOnModule(llvm::Module&amp;)" FullName="anonymous_namespace{dataflowsanitizer.cpp}.DataFlowSanitizer .runOnModule(llvm::Module&amp;)">
          <Val>57</Val>
        </Row>
        <Row Name="LowerArguments(constllvm::Function&amp;)" FullName="llvm.SelectionDAGISel.LowerArguments(constllvm::Function&amp;)">
          <Val>57</Val>
        </Row>
        <Row Name="lowerV8I16SingleInputVectorShuffle(llvm::SDLoc,llvm::SDValue ,MutableArrayRef&lt;int&gt;,constllvm::X86Subtarget*,llvm::SelectionDAG&amp;)" FullName="__Globals.lowerV8I16SingleInputVectorShuffle(llvm::SDLoc,llvm::SDValue ,MutableArrayRef&lt;int&gt;,constllvm::X86Subtarget*,llvm::SelectionDAG&amp;)">
          <Val>57</Val>
        </Row>
        <Row Name="AllocateBasicBlock()" FullName="anonymous_namespace{regallocfast.cpp}.RAFast.AllocateBasicBlock()">
          <Val>56</Val>
        </Row>
        <Row Name="visitAdd(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitAdd(llvm::BinaryOperator&amp;)">
          <Val>56</Val>
        </Row>
        <Row Name="visitSelectInst(llvm::SelectInst&amp;)" FullName="llvm.InstCombiner.visitSelectInst(llvm::SelectInst&amp;)">
          <Val>56</Val>
        </Row>
        <Row Name="CopyAndMoveSuccessors(llvm::SUnit*)" FullName="anonymous_namespace{scheduledagrrlist.cpp}.ScheduleDAGRRList .CopyAndMoveSuccessors(llvm::SUnit*)">
          <Val>56</Val>
        </Row>
        <Row Name="convertToThreeAddress(MachineFunction::iterator&amp; ,MachineBasicBlock::iterator&amp;,llvm::LiveVariables*)" FullName="llvm.X86InstrInfo.convertToThreeAddress(MachineFunction::iterator&amp; ,MachineBasicBlock::iterator&amp;,llvm::LiveVariables*)">
          <Val>56</Val>
        </Row>
        <Row Name="computeKnownBits(llvm::SDValue,llvm::APInt&amp;,llvm::APInt&amp;,unsignedint)" FullName="llvm.SelectionDAG.computeKnownBits(llvm::SDValue,llvm::APInt&amp; ,llvm::APInt&amp;,unsignedint)">
          <Val>55</Val>
        </Row>
        <Row Name="EmitStructByval(llvm::MachineInstr*,llvm::MachineBasicBlock*)" FullName="llvm.ARMTargetLowering.EmitStructByval(llvm::MachineInstr* ,llvm::MachineBasicBlock*)">
          <Val>54</Val>
        </Row>
        <Row Name="doFinalization(llvm::Module&amp;)" FullName="llvm.AsmPrinter.doFinalization(llvm::Module&amp;)">
          <Val>54</Val>
        </Row>
        <Row Name="WriteConstants(unsignedint,unsignedint,constllvm::ValueEnumerator&amp; ,llvm::BitstreamWriter&amp;,bool)" FullName="__Globals.WriteConstants(unsignedint,unsignedint ,constllvm::ValueEnumerator&amp;,llvm::BitstreamWriter&amp;,bool)">
          <Val>54</Val>
        </Row>
        <Row Name="printInstruction(constllvm::Instruction&amp;)" FullName="llvm.AssemblyWriter.printInstruction(constllvm::Instruction&amp;)">
          <Val>54</Val>
        </Row>
        <Row Name="ProcessUMulZExtIdiom(llvm::ICmpInst&amp;,llvm::Value*,llvm::Value* ,llvm::InstCombiner&amp;)" FullName="__Globals.ProcessUMulZExtIdiom(llvm::ICmpInst&amp;,llvm::Value* ,llvm::Value*,llvm::InstCombiner&amp;)">
          <Val>54</Val>
        </Row>
        <Row Name="visitFMul(llvm::BinaryOperator&amp;)" FullName="llvm.InstCombiner.visitFMul(llvm::BinaryOperator&amp;)">
          <Val>54</Val>
        </Row>
        <Row Name="runOnMachineFunction(llvm::MachineFunction&amp;)" FullName="anonymous_namespace{r600expandspecialinstrs.cpp} .R600ExpandSpecialInstrsPass.runOnMachineFunction (llvm::MachineFunction&amp;)">
          <Val>54</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>40 905</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>29.41</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>16</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>384</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>20.57</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>422.92</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Methods with too many overloads" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Methods with too many overloads" QueryId="Query1277328874" NbNodeMatched="466" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Methods&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;overloads&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbOverloads&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;6&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsOperator&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;Don't&amp;#0160;report&amp;#0160;operator&amp;#0160;overload&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbOverloads&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbOverloads&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Methods&amp;#0160;where&amp;#0160;NbOverloads&amp;#0160;&amp;gt;&amp;#0160;6&amp;#0160;might&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;be&amp;#0160;a&amp;#0160;problem&amp;#0160;to&amp;#0160;maintain&amp;#0160;and&amp;#0160;provoke&amp;#0160;higher&amp;#0160;coupling&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;than&amp;#0160;necessary.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;This&amp;#0160;might&amp;#0160;also&amp;#0160;reveal&amp;#0160;a&amp;#0160;potential&amp;#0160;misused&amp;#0160;of&amp;#0160;the&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;C#&amp;#0160;and&amp;#0160;VB.NET&amp;#0160;language&amp;#0160;that&amp;#0160;since&amp;#0160;C#3&amp;#0160;and&amp;#0160;VB9&amp;#0160;support&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;object&amp;#0160;initialization.&amp;#0160;This&amp;#0160;feature&amp;#0160;helps&amp;#0160;reducing&amp;#0160;the&amp;#0160;number&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;of&amp;#0160;constructors&amp;#0160;of&amp;#0160;a&amp;#0160;class.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;NbOverloads&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#NbOverloads" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#NbOverloads&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># Overloads</Column>
      </Columns>
      <Rows>
        <Row Name="getModRefInfo(constllvm::Instruction* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::Instruction* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::Instruction*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::Instruction* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(llvm::ImmutableCallSite ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(llvm::ImmutableCallSite ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(llvm::ImmutableCallSite,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(llvm::ImmutableCallSite ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::CallInst*,constllvm::AliasAnalysis::Location&amp; )" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::CallInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::CallInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::CallInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::InvokeInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::InvokeInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::InvokeInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::InvokeInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::LoadInst*,constllvm::AliasAnalysis::Location&amp; )" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::LoadInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::LoadInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::LoadInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::StoreInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::StoreInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::StoreInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::StoreInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::FenceInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::FenceInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::FenceInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::FenceInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::AtomicCmpXchgInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::AtomicCmpXchgInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::AtomicCmpXchgInst*,constllvm::Value* ,unsignedint)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::AtomicCmpXchgInst* ,constllvm::Value*,unsignedint)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::AtomicRMWInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::AtomicRMWInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::AtomicRMWInst*,constllvm::Value*,unsignedint)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::AtomicRMWInst* ,constllvm::Value*,unsignedint)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::VAArgInst* ,constllvm::AliasAnalysis::Location&amp;)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::VAArgInst* ,constllvm::AliasAnalysis::Location&amp;)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(constllvm::VAArgInst*,constllvm::Value*,uint64_t)" FullName="llvm.AliasAnalysis.getModRefInfo(constllvm::VAArgInst* ,constllvm::Value*,uint64_t)">
          <Val>21</Val>
        </Row>
        <Row Name="getModRefInfo(llvm::ImmutableCallSite,llvm::ImmutableCallSite)" FullName="llvm.AliasAnalysis.getModRefInfo(llvm::ImmutableCallSite ,llvm::ImmutableCallSite)">
          <Val>21</Val>
        </Row>
        <Row Name="Twine(llvm::Twine::NodeKind)" FullName="llvm.Twine.Twine(llvm::Twine::NodeKind)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::Twine&amp;,constllvm::Twine&amp;)" FullName="llvm.Twine.Twine(constllvm::Twine&amp;,constllvm::Twine&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(llvm::Twine::Child,llvm::Twine::NodeKind,llvm::Twine::Child ,llvm::Twine::NodeKind)" FullName="llvm.Twine.Twine(llvm::Twine::Child,llvm::Twine::NodeKind ,llvm::Twine::Child,llvm::Twine::NodeKind)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine()" FullName="llvm.Twine.Twine()">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constchar*)" FullName="llvm.Twine.Twine(constchar*)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(conststd::string&amp;)" FullName="llvm.Twine.Twine(conststd::string&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::StringRef&amp;)" FullName="llvm.Twine.Twine(constllvm::StringRef&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(char)" FullName="llvm.Twine.Twine(char)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(signedchar)" FullName="llvm.Twine.Twine(signedchar)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(unsignedchar)" FullName="llvm.Twine.Twine(unsignedchar)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(unsignedint)" FullName="llvm.Twine.Twine(unsignedint)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(int)" FullName="llvm.Twine.Twine(int)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constunsignedlong&amp;)" FullName="llvm.Twine.Twine(constunsignedlong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constlong&amp;)" FullName="llvm.Twine.Twine(constlong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constunsignedlonglong&amp;)" FullName="llvm.Twine.Twine(constunsignedlonglong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constlonglong&amp;)" FullName="llvm.Twine.Twine(constlonglong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constchar*,constllvm::StringRef&amp;)" FullName="llvm.Twine.Twine(constchar*,constllvm::StringRef&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::StringRef&amp;,constchar*)" FullName="llvm.Twine.Twine(constllvm::StringRef&amp;,constchar*)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::Twine&amp;)" FullName="llvm.Twine.Twine(constllvm::Twine&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(llvm::Twine::NodeKind)" FullName="llvm.Twine.Twine(llvm::Twine::NodeKind)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::Twine&amp;,constllvm::Twine&amp;)" FullName="llvm.Twine.Twine(constllvm::Twine&amp;,constllvm::Twine&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(llvm::Twine::Child,llvm::Twine::NodeKind,llvm::Twine::Child ,llvm::Twine::NodeKind)" FullName="llvm.Twine.Twine(llvm::Twine::Child,llvm::Twine::NodeKind ,llvm::Twine::Child,llvm::Twine::NodeKind)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine()" FullName="llvm.Twine.Twine()">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constchar*)" FullName="llvm.Twine.Twine(constchar*)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(conststd::string&amp;)" FullName="llvm.Twine.Twine(conststd::string&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::StringRef&amp;)" FullName="llvm.Twine.Twine(constllvm::StringRef&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(char)" FullName="llvm.Twine.Twine(char)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(signedchar)" FullName="llvm.Twine.Twine(signedchar)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(unsignedchar)" FullName="llvm.Twine.Twine(unsignedchar)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(unsignedint)" FullName="llvm.Twine.Twine(unsignedint)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(int)" FullName="llvm.Twine.Twine(int)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constunsignedlong&amp;)" FullName="llvm.Twine.Twine(constunsignedlong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constlong&amp;)" FullName="llvm.Twine.Twine(constlong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constunsignedlonglong&amp;)" FullName="llvm.Twine.Twine(constunsignedlonglong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constlonglong&amp;)" FullName="llvm.Twine.Twine(constlonglong&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constchar*,constllvm::StringRef&amp;)" FullName="llvm.Twine.Twine(constchar*,constllvm::StringRef&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::StringRef&amp;,constchar*)" FullName="llvm.Twine.Twine(constllvm::StringRef&amp;,constchar*)">
          <Val>19</Val>
        </Row>
        <Row Name="Twine(constllvm::Twine&amp;)" FullName="llvm.Twine.Twine(constllvm::Twine&amp;)">
          <Val>19</Val>
        </Row>
        <Row Name="unwrap(LLVMTypeRef)" FullName="llvm.__Globals.unwrap(LLVMTypeRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMTypeRef*)" FullName="llvm.__Globals.unwrap(LLVMTypeRef*)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMValueRef)" FullName="llvm.__Globals.unwrap(LLVMValueRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMValueRef*)" FullName="llvm.__Globals.unwrap(LLVMValueRef*)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap&lt;T&gt;(LLVMValueRef*,unsignedint)" FullName="llvm.__Globals.unwrap&lt;T&gt;(LLVMValueRef*,unsignedint)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMModuleRef)" FullName="llvm.__Globals.unwrap(LLVMModuleRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMModuleProviderRef)" FullName="llvm.__Globals.unwrap(LLVMModuleProviderRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMBasicBlockRef)" FullName="llvm.__Globals.unwrap(LLVMBasicBlockRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMTargetDataRef)" FullName="llvm.__Globals.unwrap(LLVMTargetDataRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMDiagnosticInfoRef)" FullName="llvm.__Globals.unwrap(LLVMDiagnosticInfoRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMBuilderRef)" FullName="llvm.__Globals.unwrap(LLVMBuilderRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMContextRef)" FullName="llvm.__Globals.unwrap(LLVMContextRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMContextRef*)" FullName="llvm.__Globals.unwrap(LLVMContextRef*)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMPassManagerRef)" FullName="llvm.__Globals.unwrap(LLVMPassManagerRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMPassRegistryRef)" FullName="llvm.__Globals.unwrap(LLVMPassRegistryRef)">
          <Val>16</Val>
        </Row>
        <Row Name="unwrap(LLVMUseRef)" FullName="llvm.__Globals.unwrap(LLVMUseRef)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,bool,bool,bool)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,bool,bool,bool)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue )">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,ArrayRef&lt;llvm::SDUse&gt;)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT,ArrayRef &lt;llvm::SDUse&gt;)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::EVT,ArrayRef&lt;llvm::SDValue&gt;)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::EVT,ArrayRef &lt;llvm::SDValue&gt;)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,ArrayRef&lt;llvm::EVT&gt;,ArrayRef &lt;llvm::SDValue&gt;)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,ArrayRef&lt;llvm::EVT&gt; ,ArrayRef&lt;llvm::SDValue&gt;)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,ArrayRef&lt;llvm::SDValue&gt; )" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,ArrayRef&lt;llvm::SDValue&gt;)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,llvm::SDValue ,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,llvm::SDValue ,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getNode(unsignedint,llvm::SDLoc,llvm::SDVTList,llvm::SDValue ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getNode(unsignedint,llvm::SDLoc,llvm::SDVTList ,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue,llvm::SDValue )">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::SDValue ,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,ArrayRef &lt;llvm::SDValue&gt;)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,ArrayRef&lt;llvm::SDValue&gt;)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::EVT)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::EVT)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::EVT ,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::EVT,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::EVT ,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::EVT,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT,llvm::EVT ,llvm::SDValue,llvm::SDValue,llvm::SDValue)" FullName="llvm.SelectionDAG.getMachineNode(unsignedint,llvm::SDLoc,llvm::EVT ,llvm::EVT,llvm::SDValue,llvm::SDValue,llvm::SDValue)">
          <Val>16</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>5 886</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>12.63</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>7</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>21</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>4.31</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>18.61</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types with too many methods" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Types with too many methods" QueryId="Query2760677293" NbNodeMatched="437" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;methods&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;InstanceMethods&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;StaticMethods&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;where&amp;#0160;Methods.Count()&amp;#0160;&amp;gt;&amp;#0160;20&amp;#0160;might&amp;#0160;be&amp;#0160;hard&amp;#0160;to&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;understand&amp;#0160;and&amp;#0160;maintain&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;but&amp;#0160;there&amp;#0160;might&amp;#0160;be&amp;#0160;cases&amp;#0160;where&amp;#0160;it&amp;#0160;is&amp;#0160;relevant&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;to&amp;#0160;have&amp;#0160;a&amp;#0160;high&amp;#0160;number&amp;#0160;of&amp;#0160;methods.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;For&amp;#0160;example,&amp;#0160;the&amp;#0160;System.Windows.Forms.DataGridView&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;standard&amp;#0160;class&amp;#0160;has&amp;#0160;more&amp;#0160;than&amp;#0160;1000&amp;#0160;methods.&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>InstanceMethods</Column>
        <Column>StaticMethods</Column>
      </Columns>
      <Rows>
        <Row Name="DAGTypeLegalizer" FullName="llvm.DAGTypeLegalizer">
          <Val>375 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMOperand" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand">
          <Val>271 methods</Val>
          <Val>25 methods</Val>
        </Row>
        <Row Name="SelectionDAG" FullName="llvm.SelectionDAG">
          <Val>238 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="APInt" FullName="llvm.APInt">
          <Val>161 methods</Val>
          <Val>49 methods</Val>
        </Row>
        <Row Name="AArch64Operand" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand">
          <Val>166 methods</Val>
          <Val>13 methods</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>169 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>169 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="MachineInstr" FullName="llvm.MachineInstr">
          <Val>162 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="IRBuilder&lt;preserveNames,T,Inserter&gt;" FullName="llvm.IRBuilder&lt;preserveNames,T,Inserter&gt;">
          <Val>161 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="DAGCombiner" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner">
          <Val>138 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="InstCombiner" FullName="llvm.InstCombiner">
          <Val>136 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="X86TargetLowering" FullName="llvm.X86TargetLowering">
          <Val>133 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MachineBasicBlock" FullName="llvm.MachineBasicBlock">
          <Val>130 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="AsmParser" FullName="anonymous_namespace{asmparser.cpp}.AsmParser">
          <Val>121 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="SelectionDAGBuilder" FullName="llvm.SelectionDAGBuilder">
          <Val>122 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ScalarEvolution" FullName="llvm.ScalarEvolution">
          <Val>116 methods</Val>
          <Val>3 methods</Val>
        </Row>
        <Row Name="LLParser" FullName="llvm.LLParser">
          <Val>119 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MemorySanitizerVisitor" FullName="anonymous_namespace{memorysanitizer.cpp}.MemorySanitizerVisitor">
          <Val>118 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="APFloat" FullName="llvm.APFloat">
          <Val>104 methods</Val>
          <Val>12 methods</Val>
        </Row>
        <Row Name="X86Subtarget" FullName="llvm.X86Subtarget">
          <Val>111 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>110 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMCodeEmitter" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter">
          <Val>107 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MachineRegisterInfo" FullName="llvm.MachineRegisterInfo">
          <Val>91 methods</Val>
          <Val>16 methods</Val>
        </Row>
        <Row Name="AArch64TargetLowering" FullName="llvm.AArch64TargetLowering">
          <Val>106 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMTargetLowering" FullName="llvm.ARMTargetLowering">
          <Val>105 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ConstantExpr" FullName="llvm.ConstantExpr">
          <Val>26 methods</Val>
          <Val>79 methods</Val>
        </Row>
        <Row Name="ARMSubtarget" FullName="llvm.ARMSubtarget">
          <Val>103 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="Function" FullName="llvm.Function">
          <Val>96 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="Function" FullName="llvm.Function">
          <Val>96 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="Function" FullName="llvm.Function">
          <Val>96 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="DwarfDebug" FullName="llvm.DwarfDebug">
          <Val>98 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="Module" FullName="llvm.Module">
          <Val>94 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="MachOObjectFile" FullName="llvm.object.MachOObjectFile">
          <Val>92 methods</Val>
          <Val>6 methods</Val>
        </Row>
        <Row Name="MipsAsmParser" FullName="anonymous_namespace{mipsasmparser.cpp}.MipsAsmParser">
          <Val>97 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="TargetInstrInfo" FullName="llvm.TargetInstrInfo">
          <Val>96 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MachineOperand" FullName="llvm.MachineOperand">
          <Val>77 methods</Val>
          <Val>18 methods</Val>
        </Row>
        <Row Name="ARMAsmParser" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser">
          <Val>94 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="PPCTargetLowering" FullName="llvm.PPCTargetLowering">
          <Val>94 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="Type" FullName="llvm.Type">
          <Val>63 methods</Val>
          <Val>30 methods</Val>
        </Row>
        <Row Name="Type" FullName="llvm.Type">
          <Val>63 methods</Val>
          <Val>30 methods</Val>
        </Row>
        <Row Name="BinaryOperator" FullName="llvm.BinaryOperator">
          <Val>21 methods</Val>
          <Val>70 methods</Val>
        </Row>
        <Row Name="MCAsmStreamer" FullName="anonymous_namespace{mcasmstreamer.cpp}.MCAsmStreamer">
          <Val>88 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMInstPrinter" FullName="llvm.ARMInstPrinter">
          <Val>86 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>77 methods</Val>
          <Val>10 methods</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>77 methods</Val>
          <Val>10 methods</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>77 methods</Val>
          <Val>10 methods</Val>
        </Row>
        <Row Name="HexagonInstrInfo" FullName="llvm.HexagonInstrInfo">
          <Val>85 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="AsmPrinter" FullName="llvm.AsmPrinter">
          <Val>82 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCObjectFileInfo" FullName="llvm.MCObjectFileInfo">
          <Val>81 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCAsmInfo" FullName="llvm.MCAsmInfo">
          <Val>79 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCAssembler" FullName="llvm.MCAssembler">
          <Val>79 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MipsOperand" FullName="anonymous_namespace{mipsasmparser.cpp}.MipsOperand">
          <Val>68 methods</Val>
          <Val>11 methods</Val>
        </Row>
        <Row Name="R600InstrInfo" FullName="llvm.R600InstrInfo">
          <Val>77 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="Interpreter" FullName="llvm.Interpreter">
          <Val>74 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="AMDGPUCFGStructurizer" FullName="anonymous_namespace{amdilcfgstructurizer.cpp}.AMDGPUCFGStructurizer">
          <Val>57 methods</Val>
          <Val>19 methods</Val>
        </Row>
        <Row Name="MachineFunction" FullName="llvm.MachineFunction">
          <Val>75 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="GlobalValue" FullName="llvm.GlobalValue">
          <Val>55 methods</Val>
          <Val>20 methods</Val>
        </Row>
        <Row Name="GlobalValue" FullName="llvm.GlobalValue">
          <Val>55 methods</Val>
          <Val>20 methods</Val>
        </Row>
        <Row Name="COFFObjectFile" FullName="llvm.object.COFFObjectFile">
          <Val>73 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="X86Operand" FullName="llvm.X86Operand">
          <Val>68 methods</Val>
          <Val>6 methods</Val>
        </Row>
        <Row Name="Verifier" FullName="anonymous_namespace{verifier.cpp}.Verifier">
          <Val>73 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MCContext" FullName="llvm.MCContext">
          <Val>73 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MipsTargetLowering" FullName="llvm.MipsTargetLowering">
          <Val>72 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>73 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMBaseInstrInfo" FullName="llvm.ARMBaseInstrInfo">
          <Val>71 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMDAGToDAGISel" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel">
          <Val>70 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMMCCodeEmitter" FullName="anonymous_namespace{armmccodeemitter.cpp}.ARMMCCodeEmitter">
          <Val>70 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="MachineFrameInfo" FullName="llvm.MachineFrameInfo">
          <Val>70 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="CallInst" FullName="llvm.CallInst">
          <Val>60 methods</Val>
          <Val>10 methods</Val>
        </Row>
        <Row Name="SDNode" FullName="llvm.SDNode">
          <Val>66 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="MipsSubtarget" FullName="llvm.MipsSubtarget">
          <Val>68 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="DarwinAsmParser" FullName="anonymous_namespace{darwinasmparser.cpp}.DarwinAsmParser">
          <Val>67 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="TargetRegisterInfo" FullName="llvm.TargetRegisterInfo">
          <Val>59 methods</Val>
          <Val>7 methods</Val>
        </Row>
        <Row Name="InvokeInst" FullName="llvm.InvokeInst">
          <Val>62 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="AMDGPUTargetLowering" FullName="llvm.AMDGPUTargetLowering">
          <Val>64 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="AliasAnalysis" FullName="llvm.AliasAnalysis">
          <Val>60 methods</Val>
          <Val>5 methods</Val>
        </Row>
        <Row Name="Triple" FullName="llvm.Triple">
          <Val>58 methods</Val>
          <Val>7 methods</Val>
        </Row>
        <Row Name="EVT" FullName="llvm.EVT">
          <Val>56 methods</Val>
          <Val>6 methods</Val>
        </Row>
        <Row Name="LiveRange" FullName="llvm.LiveRange">
          <Val>61 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="TargetLowering" FullName="llvm.TargetLowering">
          <Val>61 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="TargetLowering" FullName="llvm.TargetLowering">
          <Val>61 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="CodeGenSchedModels" FullName="llvm.CodeGenSchedModels">
          <Val>61 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="ARMFastISel" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel">
          <Val>60 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="Value" FullName="llvm.Value">
          <Val>58 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="PPCOperand" FullName="anonymous_namespace{ppcasmparser.cpp}.PPCOperand">
          <Val>54 methods</Val>
          <Val>6 methods</Val>
        </Row>
        <Row Name="Value" FullName="llvm.Value">
          <Val>58 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="DIBuilder" FullName="llvm.DIBuilder">
          <Val>59 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="SystemZTargetLowering" FullName="llvm.SystemZTargetLowering">
          <Val>59 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="PPCSubtarget" FullName="llvm.PPCSubtarget">
          <Val>58 methods</Val>
          <Val>0 method</Val>
        </Row>
        <Row Name="SystemZOperand" FullName="anonymous_namespace{systemzasmparser.cpp}.SystemZOperand">
          <Val>52 methods</Val>
          <Val>6 methods</Val>
        </Row>
        <Row Name="X86InstrInfo" FullName="llvm.X86InstrInfo">
          <Val>56 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="LiveIntervals" FullName="llvm.LiveIntervals">
          <Val>55 methods</Val>
          <Val>2 methods</Val>
        </Row>
        <Row Name="NVPTXAsmPrinter" FullName="llvm.NVPTXAsmPrinter">
          <Val>56 methods</Val>
          <Val>1 method</Val>
        </Row>
        <Row Name="ObjectFile" FullName="llvm.object.ObjectFile">
          <Val>50 methods</Val>
          <Val>7 methods</Val>
        </Row>
        <Row Name="StringRef" FullName="llvm.StringRef">
          <Val>53 methods</Val>
          <Val>3 methods</Val>
        </Row>
        <Row Name="DenseMapBase&lt;DerivedT,KeyT,ValueT,KeyInfoT&gt;" FullName="llvm.DenseMapBase&lt;DerivedT,KeyT,ValueT,KeyInfoT&gt;">
          <Val>52 methods</Val>
          <Val>4 methods</Val>
        </Row>
        <Row Name="BasicBlock" FullName="llvm.BasicBlock">
          <Val>52 methods</Val>
          <Val>3 methods</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types with too many fields" ContentTruncatedThreshold="100" FullName="Code Quality \ Types with too many fields" QueryId="Query2352523588" NbNodeMatched="49" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;fields&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEnumeration&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;InstanceFields&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;StaticFields&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;where&amp;#0160;Fields.Count()&amp;#0160;&amp;gt;&amp;#0160;20&amp;#0160;and&amp;#0160;not&amp;#0160;IsEnumeration&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;might&amp;#0160;be&amp;#0160;hard&amp;#0160;to&amp;#0160;understand&amp;#0160;and&amp;#0160;maintain&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;but&amp;#0160;there&amp;#0160;might&amp;#0160;be&amp;#0160;cases&amp;#0160;where&amp;#0160;it&amp;#0160;is&amp;#0160;relevant&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;to&amp;#0160;have&amp;#0160;a&amp;#0160;high&amp;#0160;number&amp;#0160;of&amp;#0160;fields.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;For&amp;#0160;example,&amp;#0160;the&amp;#0160;System.Windows.Forms.Control&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;standard&amp;#0160;class&amp;#0160;has&amp;#0160;more&amp;#0160;than&amp;#0160;200&amp;#0160;fields.&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>InstanceFields</Column>
        <Column>StaticFields</Column>
      </Columns>
      <Rows>
        <Row Name="MCObjectFileInfo" FullName="llvm.MCObjectFileInfo">
          <Val>79 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MCAsmInfo" FullName="llvm.MCAsmInfo">
          <Val>67 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="DwarfDebug" FullName="llvm.DwarfDebug">
          <Val>66 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="ARMSubtarget" FullName="llvm.ARMSubtarget">
          <Val>63 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="LLVMContextImpl" FullName="llvm.LLVMContextImpl">
          <Val>63 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="X86Subtarget" FullName="llvm.X86Subtarget">
          <Val>59 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>55 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>55 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="DIEHash+DIEAttrs" FullName="llvm.DIEHash+DIEAttrs">
          <Val>49 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="InternalInstruction" FullName="llvm.X86Disassembler.InternalInstruction">
          <Val>49 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="SUnit" FullName="llvm.SUnit">
          <Val>41 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="CodeGenInstruction" FullName="llvm.CodeGenInstruction">
          <Val>41 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="PPCSubtarget" FullName="llvm.PPCSubtarget">
          <Val>39 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MipsSubtarget" FullName="llvm.MipsSubtarget">
          <Val>37 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MemorySanitizer" FullName="anonymous_namespace{memorysanitizer.cpp}.MemorySanitizer">
          <Val>31 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MCContext" FullName="llvm.MCContext">
          <Val>31 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="DataFlowSanitizer" FullName="anonymous_namespace{dataflowsanitizer.cpp}.DataFlowSanitizer">
          <Val>29 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="pe32_header" FullName="llvm.object.pe32_header">
          <Val>30 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="CallAnalyzer" FullName="anonymous_namespace{inlinecost.cpp}.CallAnalyzer">
          <Val>30 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="RecognizableInstr" FullName="llvm.X86Disassembler.RecognizableInstr">
          <Val>30 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="pe32plus_header" FullName="llvm.object.pe32plus_header">
          <Val>29 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="BitcodeReader" FullName="llvm.BitcodeReader">
          <Val>28 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="AsmParser" FullName="anonymous_namespace{asmparser.cpp}.AsmParser">
          <Val>28 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="TargetOptions" FullName="llvm.TargetOptions">
          <Val>27 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="RAGreedy" FullName="anonymous_namespace{regallocgreedy.cpp}.RAGreedy">
          <Val>24 fields</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="MachineVerifier" FullName="anonymous_namespace{machineverifier.cpp}.MachineVerifier">
          <Val>25 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="DWARFContextInMemory" FullName="llvm.DWARFContextInMemory">
          <Val>25 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>24 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MachineFrameInfo" FullName="llvm.MachineFrameInfo">
          <Val>24 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="AllocaSliceRewriter" FullName="anonymous_namespace{sroa.cpp}.AllocaSliceRewriter">
          <Val>24 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="SelectionDAGBuilder" FullName="llvm.SelectionDAGBuilder">
          <Val>23 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="VectorizeConfig" FullName="llvm.VectorizeConfig">
          <Val>24 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="ARMFunctionInfo" FullName="llvm.ARMFunctionInfo">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MachineLICM" FullName="anonymous_namespace{machinelicm.cpp}.MachineLICM">
          <Val>22 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MCRegisterInfo" FullName="llvm.MCRegisterInfo">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="Target" FullName="llvm.Target">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="SelectionDAG" FullName="llvm.SelectionDAG">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="Target" FullName="llvm.Target">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="InnerLoopVectorizer" FullName="anonymous_namespace{loopvectorize.cpp}.InnerLoopVectorizer">
          <Val>23 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="FastISel+CallLoweringInfo" FullName="llvm.FastISel+CallLoweringInfo">
          <Val>22 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="FunctionLoweringInfo" FullName="llvm.FunctionLoweringInfo">
          <Val>22 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="StringTypes" FullName="StringTypes">
          <Val>22 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="MachineModuleInfo" FullName="llvm.MachineModuleInfo">
          <Val>20 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ScheduleDAGInstrs" FullName="llvm.ScheduleDAGInstrs">
          <Val>21 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="InlineSpiller" FullName="anonymous_namespace{inlinespiller.cpp}.InlineSpiller">
          <Val>21 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="AddressSanitizer" FullName="anonymous_namespace{addresssanitizer.cpp}.AddressSanitizer">
          <Val>20 fields</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MCAssembler" FullName="llvm.MCAssembler">
          <Val>21 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="re_guts" FullName="re_guts">
          <Val>21 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="LoopVectorizationLegality" FullName="anonymous_namespace{loopvectorize.cpp}.LoopVectorizationLegality">
          <Val>21 fields</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types with poor cohesion" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Code Quality \ Types with poor cohesion" QueryId="Query2674635464" NbNodeMatched="118" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;with&amp;#0160;poor&amp;#0160;cohesion&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOM&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0.8&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOMHS&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0.95&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbFields&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethods&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOM&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOMHS&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOM&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;LCOMHS&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethods&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbFields&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;where&amp;#0160;LCOM&amp;#0160;&amp;gt;&amp;#0160;0.8&amp;#0160;and&amp;#0160;NbFields&amp;#0160;&amp;gt;&amp;#0160;10&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;and&amp;#0160;NbMethods&amp;#0160;&amp;gt;10&amp;#0160;might&amp;#0160;be&amp;#0160;problematic.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;However,&amp;#0160;it&amp;#0160;is&amp;#0160;very&amp;#0160;hard&amp;#0160;to&amp;#0160;avoid&amp;#0160;such&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;non-cohesive&amp;#0160;types.&amp;#0160;The&amp;#0160;LCOMHS&amp;#0160;metric&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;is&amp;#0160;often&amp;#0160;considered&amp;#0160;as&amp;#0160;more&amp;#0160;efficient&amp;#0160;to&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;detect&amp;#0160;non-cohesive&amp;#0160;types.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;LCOM&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#LCOM" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#LCOM&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>Lack of Cohesion Of Methods (LCOM)</Column>
        <Column>LCOM Henderson-Sellers (LCOMHS)</Column>
        <Column># Methods</Column>
        <Column># Fields</Column>
      </Columns>
      <Rows>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>0.99</Val>
          <Val>0.99</Val>
          <Val>172</Val>
          <Val>55</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>0.98</Val>
          <Val>0.99</Val>
          <Val>172</Val>
          <Val>55</Val>
        </Row>
        <Row Name="X86Subtarget" FullName="llvm.X86Subtarget">
          <Val>0.98</Val>
          <Val>0.98</Val>
          <Val>113</Val>
          <Val>59</Val>
        </Row>
        <Row Name="ARMSubtarget" FullName="llvm.ARMSubtarget">
          <Val>0.97</Val>
          <Val>0.98</Val>
          <Val>105</Val>
          <Val>63</Val>
        </Row>
        <Row Name="MCAsmInfo" FullName="llvm.MCAsmInfo">
          <Val>0.97</Val>
          <Val>0.99</Val>
          <Val>81</Val>
          <Val>67</Val>
        </Row>
        <Row Name="SelectionDAG" FullName="llvm.SelectionDAG">
          <Val>0.97</Val>
          <Val>0.97</Val>
          <Val>243</Val>
          <Val>23</Val>
        </Row>
        <Row Name="DWARFContext" FullName="llvm.DWARFContext">
          <Val>0.96</Val>
          <Val>0.98</Val>
          <Val>57</Val>
          <Val>11</Val>
        </Row>
        <Row Name="MipsSubtarget" FullName="llvm.MipsSubtarget">
          <Val>0.96</Val>
          <Val>0.98</Val>
          <Val>71</Val>
          <Val>37</Val>
        </Row>
        <Row Name="MachineRegisterInfo" FullName="llvm.MachineRegisterInfo">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>109</Val>
          <Val>11</Val>
        </Row>
        <Row Name="MCObjectFileInfo" FullName="llvm.MCObjectFileInfo">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>82</Val>
          <Val>79</Val>
        </Row>
        <Row Name="PPCSubtarget" FullName="llvm.PPCSubtarget">
          <Val>0.96</Val>
          <Val>0.98</Val>
          <Val>60</Val>
          <Val>39</Val>
        </Row>
        <Row Name="DwarfDebug" FullName="llvm.DwarfDebug">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>100</Val>
          <Val>66</Val>
        </Row>
        <Row Name="MemorySanitizerVisitor" FullName="anonymous_namespace{memorysanitizer.cpp}.MemorySanitizerVisitor">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>121</Val>
          <Val>15</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>112</Val>
          <Val>24</Val>
        </Row>
        <Row Name="MCContext" FullName="llvm.MCContext">
          <Val>0.96</Val>
          <Val>0.97</Val>
          <Val>75</Val>
          <Val>31</Val>
        </Row>
        <Row Name="AsmParser" FullName="anonymous_namespace{asmparser.cpp}.AsmParser">
          <Val>0.96</Val>
          <Val>0.96</Val>
          <Val>124</Val>
          <Val>28</Val>
        </Row>
        <Row Name="MCAssembler" FullName="llvm.MCAssembler">
          <Val>0.95</Val>
          <Val>0.96</Val>
          <Val>81</Val>
          <Val>21</Val>
        </Row>
        <Row Name="Target" FullName="llvm.Target">
          <Val>0.95</Val>
          <Val>0.99</Val>
          <Val>25</Val>
          <Val>23</Val>
        </Row>
        <Row Name="Target" FullName="llvm.Target">
          <Val>0.95</Val>
          <Val>0.99</Val>
          <Val>25</Val>
          <Val>23</Val>
        </Row>
        <Row Name="ScalarEvolution" FullName="llvm.ScalarEvolution">
          <Val>0.95</Val>
          <Val>0.96</Val>
          <Val>121</Val>
          <Val>19</Val>
        </Row>
        <Row Name="NVPTXAsmPrinter" FullName="llvm.NVPTXAsmPrinter">
          <Val>0.95</Val>
          <Val>0.96</Val>
          <Val>59</Val>
          <Val>13</Val>
        </Row>
        <Row Name="Module" FullName="llvm.Module">
          <Val>0.94</Val>
          <Val>0.95</Val>
          <Val>100</Val>
          <Val>15</Val>
        </Row>
        <Row Name="AMDGPUCFGStructurizer" FullName="anonymous_namespace{amdilcfgstructurizer.cpp}.AMDGPUCFGStructurizer">
          <Val>0.94</Val>
          <Val>0.96</Val>
          <Val>78</Val>
          <Val>11</Val>
        </Row>
        <Row Name="MachineFunction" FullName="llvm.MachineFunction">
          <Val>0.94</Val>
          <Val>0.96</Val>
          <Val>77</Val>
          <Val>20</Val>
        </Row>
        <Row Name="ARMCodeEmitter" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter">
          <Val>0.94</Val>
          <Val>0.95</Val>
          <Val>109</Val>
          <Val>12</Val>
        </Row>
        <Row Name="MachineBasicBlock" FullName="llvm.MachineBasicBlock">
          <Val>0.94</Val>
          <Val>0.95</Val>
          <Val>133</Val>
          <Val>12</Val>
        </Row>
        <Row Name="AMDGPUSubtarget" FullName="llvm.AMDGPUSubtarget">
          <Val>0.94</Val>
          <Val>0.97</Val>
          <Val>34</Val>
          <Val>19</Val>
        </Row>
        <Row Name="COFFObjectFile" FullName="llvm.object.COFFObjectFile">
          <Val>0.94</Val>
          <Val>0.95</Val>
          <Val>76</Val>
          <Val>11</Val>
        </Row>
        <Row Name="SCCPSolver" FullName="anonymous_namespace{sccp.cpp}.SCCPSolver">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>57</Val>
          <Val>14</Val>
        </Row>
        <Row Name="MachineModuleInfo" FullName="llvm.MachineModuleInfo">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>57</Val>
          <Val>21</Val>
        </Row>
        <Row Name="MachineFrameInfo" FullName="llvm.MachineFrameInfo">
          <Val>0.93</Val>
          <Val>0.94</Val>
          <Val>73</Val>
          <Val>24</Val>
        </Row>
        <Row Name="PPCFunctionInfo" FullName="llvm.PPCFunctionInfo">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>44</Val>
          <Val>20</Val>
        </Row>
        <Row Name="ELFFile&lt;ELFT&gt;" FullName="llvm.object.ELFFile&lt;ELFT&gt;">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>46</Val>
          <Val>17</Val>
        </Row>
        <Row Name="ELFObjectWriter" FullName="anonymous_namespace{elfobjectwriter.cpp}.ELFObjectWriter">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>40</Val>
          <Val>17</Val>
        </Row>
        <Row Name="CCState" FullName="llvm.CCState">
          <Val>0.93</Val>
          <Val>0.95</Val>
          <Val>38</Val>
          <Val>13</Val>
        </Row>
        <Row Name="MCRegisterInfo" FullName="llvm.MCRegisterInfo">
          <Val>0.93</Val>
          <Val>0.96</Val>
          <Val>30</Val>
          <Val>23</Val>
        </Row>
        <Row Name="DWARFContextInMemory" FullName="llvm.DWARFContextInMemory">
          <Val>0.92</Val>
          <Val>0.96</Val>
          <Val>29</Val>
          <Val>25</Val>
        </Row>
        <Row Name="ARMFunctionInfo" FullName="llvm.ARMFunctionInfo">
          <Val>0.92</Val>
          <Val>0.94</Val>
          <Val>51</Val>
          <Val>23</Val>
        </Row>
        <Row Name="ExecutionEngine" FullName="llvm.ExecutionEngine">
          <Val>0.92</Val>
          <Val>0.94</Val>
          <Val>57</Val>
          <Val>12</Val>
        </Row>
        <Row Name="CodeGenRegBank" FullName="llvm.CodeGenRegBank">
          <Val>0.92</Val>
          <Val>0.94</Val>
          <Val>46</Val>
          <Val>17</Val>
        </Row>
        <Row Name="ValueEnumerator" FullName="llvm.ValueEnumerator">
          <Val>0.92</Val>
          <Val>0.95</Val>
          <Val>36</Val>
          <Val>20</Val>
        </Row>
        <Row Name="AArch64Subtarget" FullName="llvm.AArch64Subtarget">
          <Val>0.92</Val>
          <Val>0.96</Val>
          <Val>26</Val>
          <Val>14</Val>
        </Row>
        <Row Name="LLParser" FullName="llvm.LLParser">
          <Val>0.92</Val>
          <Val>0.92</Val>
          <Val>121</Val>
          <Val>16</Val>
        </Row>
        <Row Name="SDNode" FullName="llvm.SDNode">
          <Val>0.92</Val>
          <Val>0.93</Val>
          <Val>74</Val>
          <Val>12</Val>
        </Row>
        <Row Name="SelectionDAGBuilder" FullName="llvm.SelectionDAGBuilder">
          <Val>0.92</Val>
          <Val>0.92</Val>
          <Val>124</Val>
          <Val>24</Val>
        </Row>
        <Row Name="MachineOperand" FullName="llvm.MachineOperand">
          <Val>0.91</Val>
          <Val>0.92</Val>
          <Val>98</Val>
          <Val>14</Val>
        </Row>
        <Row Name="Option" FullName="llvm.cl.Option">
          <Val>0.91</Val>
          <Val>0.94</Val>
          <Val>36</Val>
          <Val>13</Val>
        </Row>
        <Row Name="TargetPassConfig" FullName="llvm.TargetPassConfig">
          <Val>0.91</Val>
          <Val>0.93</Val>
          <Val>45</Val>
          <Val>13</Val>
        </Row>
        <Row Name="SparcSubtarget" FullName="llvm.SparcSubtarget">
          <Val>0.91</Val>
          <Val>0.95</Val>
          <Val>24</Val>
          <Val>14</Val>
        </Row>
        <Row Name="RuntimeDyldImpl" FullName="llvm.RuntimeDyldImpl">
          <Val>0.91</Val>
          <Val>0.93</Val>
          <Val>42</Val>
          <Val>12</Val>
        </Row>
        <Row Name="Record" FullName="llvm.Record">
          <Val>0.91</Val>
          <Val>0.92</Val>
          <Val>51</Val>
          <Val>11</Val>
        </Row>
        <Row Name="CodeGenDAGPatterns" FullName="llvm.CodeGenDAGPatterns">
          <Val>0.9</Val>
          <Val>0.93</Val>
          <Val>40</Val>
          <Val>14</Val>
        </Row>
        <Row Name="ScheduleDAGInstrs" FullName="llvm.ScheduleDAGInstrs">
          <Val>0.9</Val>
          <Val>0.93</Val>
          <Val>31</Val>
          <Val>21</Val>
        </Row>
        <Row Name="DIBuilder" FullName="llvm.DIBuilder">
          <Val>0.9</Val>
          <Val>0.91</Val>
          <Val>61</Val>
          <Val>14</Val>
        </Row>
        <Row Name="CallAnalyzer" FullName="anonymous_namespace{inlinecost.cpp}.CallAnalyzer">
          <Val>0.9</Val>
          <Val>0.92</Val>
          <Val>48</Val>
          <Val>30</Val>
        </Row>
        <Row Name="BitcodeReader" FullName="llvm.BitcodeReader">
          <Val>0.9</Val>
          <Val>0.92</Val>
          <Val>47</Val>
          <Val>28</Val>
        </Row>
        <Row Name="LiveIntervals" FullName="llvm.LiveIntervals">
          <Val>0.9</Val>
          <Val>0.91</Val>
          <Val>59</Val>
          <Val>16</Val>
        </Row>
        <Row Name="MipsFunctionInfo" FullName="llvm.MipsFunctionInfo">
          <Val>0.9</Val>
          <Val>0.93</Val>
          <Val>25</Val>
          <Val>14</Val>
        </Row>
        <Row Name="LLVMDisasmContext" FullName="llvm.LLVMDisasmContext">
          <Val>0.89</Val>
          <Val>0.94</Val>
          <Val>21</Val>
          <Val>17</Val>
        </Row>
        <Row Name="SystemZSubtarget" FullName="llvm.SystemZSubtarget">
          <Val>0.89</Val>
          <Val>0.94</Val>
          <Val>22</Val>
          <Val>12</Val>
        </Row>
        <Row Name="ARMELFStreamer" FullName="anonymous_namespace{armelfstreamer.cpp}.ARMELFStreamer">
          <Val>0.89</Val>
          <Val>0.92</Val>
          <Val>35</Val>
          <Val>16</Val>
        </Row>
        <Row Name="FunctionLoweringInfo" FullName="llvm.FunctionLoweringInfo">
          <Val>0.89</Val>
          <Val>0.96</Val>
          <Val>15</Val>
          <Val>22</Val>
        </Row>
        <Row Name="DWARFUnit" FullName="llvm.DWARFUnit">
          <Val>0.89</Val>
          <Val>0.91</Val>
          <Val>38</Val>
          <Val>18</Val>
        </Row>
        <Row Name="RAGreedy" FullName="anonymous_namespace{regallocgreedy.cpp}.RAGreedy">
          <Val>0.89</Val>
          <Val>0.91</Val>
          <Val>47</Val>
          <Val>26</Val>
        </Row>
        <Row Name="AsmPrinter" FullName="llvm.AsmPrinter">
          <Val>0.88</Val>
          <Val>0.9</Val>
          <Val>84</Val>
          <Val>20</Val>
        </Row>
        <Row Name="DAGTypeLegalizer" FullName="llvm.DAGTypeLegalizer">
          <Val>0.88</Val>
          <Val>0.89</Val>
          <Val>378</Val>
          <Val>12</Val>
        </Row>
        <Row Name="LTOCodeGenerator" FullName="llvm.LTOCodeGenerator">
          <Val>0.88</Val>
          <Val>0.92</Val>
          <Val>25</Val>
          <Val>16</Val>
        </Row>
        <Row Name="LoopVectorizationLegality" FullName="anonymous_namespace{loopvectorize.cpp}.LoopVectorizationLegality">
          <Val>0.88</Val>
          <Val>0.91</Val>
          <Val>34</Val>
          <Val>21</Val>
        </Row>
        <Row Name="MachineLICM" FullName="anonymous_namespace{machinelicm.cpp}.MachineLICM">
          <Val>0.88</Val>
          <Val>0.9</Val>
          <Val>37</Val>
          <Val>23</Val>
        </Row>
        <Row Name="RecognizableInstr" FullName="llvm.X86Disassembler.RecognizableInstr">
          <Val>0.87</Val>
          <Val>0.93</Val>
          <Val>19</Val>
          <Val>30</Val>
        </Row>
        <Row Name="JITEmitter" FullName="anonymous_namespace{jitemitter.cpp}.JITEmitter">
          <Val>0.87</Val>
          <Val>0.9</Val>
          <Val>30</Val>
          <Val>20</Val>
        </Row>
        <Row Name="ResourcePriorityQueue" FullName="llvm.ResourcePriorityQueue">
          <Val>0.87</Val>
          <Val>0.91</Val>
          <Val>28</Val>
          <Val>14</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>0.87</Val>
          <Val>0.88</Val>
          <Val>75</Val>
          <Val>15</Val>
        </Row>
        <Row Name="MipsConstantIslands" FullName="anonymous_namespace{mipsconstantislandpass.cpp}.MipsConstantIslands">
          <Val>0.87</Val>
          <Val>0.9</Val>
          <Val>36</Val>
          <Val>18</Val>
        </Row>
        <Row Name="SjLjEHPrepare" FullName="anonymous_namespace{sjljehprepare.cpp}.SjLjEHPrepare">
          <Val>0.87</Val>
          <Val>0.95</Val>
          <Val>14</Val>
          <Val>14</Val>
        </Row>
        <Row Name="CodeGenRegisterClass" FullName="llvm.CodeGenRegisterClass">
          <Val>0.86</Val>
          <Val>0.9</Val>
          <Val>25</Val>
          <Val>17</Val>
        </Row>
        <Row Name="X86MachineFunctionInfo" FullName="llvm.X86MachineFunctionInfo">
          <Val>0.86</Val>
          <Val>0.89</Val>
          <Val>32</Val>
          <Val>13</Val>
        </Row>
        <Row Name="AArch64FunctionInfo" FullName="llvm.AArch64FunctionInfo">
          <Val>0.86</Val>
          <Val>0.9</Val>
          <Val>27</Val>
          <Val>12</Val>
        </Row>
        <Row Name="ARMConstantIslands" FullName="anonymous_namespace{armconstantislandpass.cpp}.ARMConstantIslands">
          <Val>0.86</Val>
          <Val>0.88</Val>
          <Val>41</Val>
          <Val>18</Val>
        </Row>
        <Row Name="CppWriter" FullName="anonymous_namespace{cppbackend.cpp}.CppWriter">
          <Val>0.86</Val>
          <Val>0.88</Val>
          <Val>43</Val>
          <Val>12</Val>
        </Row>
        <Row Name="BugDriver" FullName="llvm.BugDriver">
          <Val>0.86</Val>
          <Val>0.88</Val>
          <Val>41</Val>
          <Val>12</Val>
        </Row>
        <Row Name="SelectionDAGISel" FullName="llvm.SelectionDAGISel">
          <Val>0.85</Val>
          <Val>0.87</Val>
          <Val>42</Val>
          <Val>13</Val>
        </Row>
        <Row Name="SIAnnotateControlFlow" FullName="anonymous_namespace{siannotatecontrolflow.cpp}.SIAnnotateControlFlow">
          <Val>0.85</Val>
          <Val>0.91</Val>
          <Val>18</Val>
          <Val>18</Val>
        </Row>
        <Row Name="SCEVExpander" FullName="llvm.SCEVExpander">
          <Val>0.85</Val>
          <Val>0.87</Val>
          <Val>42</Val>
          <Val>14</Val>
        </Row>
        <Row Name="AddressSanitizer" FullName="anonymous_namespace{addresssanitizer.cpp}.AddressSanitizer">
          <Val>0.85</Val>
          <Val>0.9</Val>
          <Val>20</Val>
          <Val>21</Val>
        </Row>
        <Row Name="SampleFunctionProfile" FullName="anonymous_namespace{sampleprofile.cpp}.SampleFunctionProfile">
          <Val>0.85</Val>
          <Val>0.89</Val>
          <Val>25</Val>
          <Val>15</Val>
        </Row>
        <Row Name="BoUpSLP" FullName="anonymous_namespace{slpvectorizer.cpp}.BoUpSLP">
          <Val>0.85</Val>
          <Val>0.88</Val>
          <Val>29</Val>
          <Val>18</Val>
        </Row>
        <Row Name="MipsABIFlagsSection" FullName="llvm.MipsABIFlagsSection">
          <Val>0.85</Val>
          <Val>0.89</Val>
          <Val>25</Val>
          <Val>11</Val>
        </Row>
        <Row Name="DefaultJITMemoryManager" FullName="anonymous_namespace{jitmemorymanager.cpp}.DefaultJITMemoryManager">
          <Val>0.85</Val>
          <Val>0.88</Val>
          <Val>30</Val>
          <Val>11</Val>
        </Row>
        <Row Name="LLLexer" FullName="llvm.LLLexer">
          <Val>0.85</Val>
          <Val>0.87</Val>
          <Val>36</Val>
          <Val>12</Val>
        </Row>
        <Row Name="MachineVerifier" FullName="anonymous_namespace{machineverifier.cpp}.MachineVerifier">
          <Val>0.84</Val>
          <Val>0.87</Val>
          <Val>39</Val>
          <Val>25</Val>
        </Row>
        <Row Name="TargetLowering+CallLoweringInfo" FullName="llvm.TargetLowering+CallLoweringInfo">
          <Val>0.84</Val>
          <Val>0.91</Val>
          <Val>14</Val>
          <Val>19</Val>
        </Row>
        <Row Name="TargetLowering+CallLoweringInfo" FullName="llvm.TargetLowering+CallLoweringInfo">
          <Val>0.84</Val>
          <Val>0.91</Val>
          <Val>16</Val>
          <Val>19</Val>
        </Row>
        <Row Name="LSRInstance" FullName="anonymous_namespace{loopstrengthreduce.cpp}.LSRInstance">
          <Val>0.84</Val>
          <Val>0.86</Val>
          <Val>59</Val>
          <Val>17</Val>
        </Row>
        <Row Name="EngineBuilder" FullName="llvm.EngineBuilder">
          <Val>0.84</Val>
          <Val>0.88</Val>
          <Val>22</Val>
          <Val>15</Val>
        </Row>
        <Row Name="DataFlowSanitizer" FullName="anonymous_namespace{dataflowsanitizer.cpp}.DataFlowSanitizer">
          <Val>0.84</Val>
          <Val>0.9</Val>
          <Val>17</Val>
          <Val>30</Val>
        </Row>
        <Row Name="SUnit" FullName="llvm.SUnit">
          <Val>0.84</Val>
          <Val>0.87</Val>
          <Val>32</Val>
          <Val>41</Val>
        </Row>
        <Row Name="ObjCARCOpt" FullName="anonymous_namespace{objcarcopts.cpp}.ObjCARCOpt">
          <Val>0.83</Val>
          <Val>0.88</Val>
          <Val>24</Val>
          <Val>13</Val>
        </Row>
        <Row Name="IfConverter" FullName="anonymous_namespace{ifconversion.cpp}.IfConverter">
          <Val>0.83</Val>
          <Val>0.87</Val>
          <Val>26</Val>
          <Val>13</Val>
        </Row>
        <Row Name="SlotTracker" FullName="llvm.SlotTracker">
          <Val>0.83</Val>
          <Val>0.87</Val>
          <Val>26</Val>
          <Val>11</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>105.07</Val>
          <Val>108.46</Val>
          <Val>6 498</Val>
          <Val>2 372</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0.89</Val>
          <Val>0.92</Val>
          <Val>55.07</Val>
          <Val>20.1</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0.8</Val>
          <Val>0.82</Val>
          <Val>14</Val>
          <Val>11</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0.99</Val>
          <Val>0.99</Val>
          <Val>378</Val>
          <Val>79</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0.051</Val>
          <Val>0.043</Val>
          <Val>49.24</Val>
          <Val>12.57</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0.0026</Val>
          <Val>0.0018</Val>
          <Val>2 424</Val>
          <Val>158.09</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Code Quality Regression" FullName="Code Quality Regression" GroupId="GroupOfRules-294074117" NbQueries="6" NbErrors="0" NbWarns="0" Status="Ok" />
  <Group Name="Object Oriented Design" FullName="Object Oriented Design" GroupId="GroupOfRules-243333263" NbQueries="6" NbErrors="0" NbWarns="5" Status="Warn">
    <Query Status="Warn" Name="Base class should not use derivatives" ContentTruncatedThreshold="100" FullName="Object Oriented Design \ Base class should not use derivatives" QueryId="Query1593583942" NbNodeMatched="43" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Base&amp;#0160;class&amp;#0160;should&amp;#0160;not&amp;#0160;use&amp;#0160;derivatives&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsClass&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbChildren&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;--&amp;#0160;for&amp;#0160;optimization!&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;derivedClassesUsed&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DerivedTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;UsedBy&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;derivedClassesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClass&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;derivedClassesUsed&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>derivedClassesUsed</Column>
      </Columns>
      <Rows>
        <Row Name="LoopPass" FullName="llvm.LoopPass">
          <Val>1 type</Val>
        </Row>
        <Row Name="RegionPass" FullName="llvm.RegionPass">
          <Val>1 type</Val>
        </Row>
        <Row Name="SCEV" FullName="llvm.SCEV">
          <Val>11 types</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>2 types</Val>
        </Row>
        <Row Name="PseudoSourceValue" FullName="llvm.PseudoSourceValue">
          <Val>1 type</Val>
        </Row>
        <Row Name="Type" FullName="llvm.Type">
          <Val>7 types</Val>
        </Row>
        <Row Name="Value" FullName="llvm.Value">
          <Val>14 types</Val>
        </Row>
        <Row Name="AttributeImpl" FullName="llvm.AttributeImpl">
          <Val>3 types</Val>
        </Row>
        <Row Name="Constant" FullName="llvm.Constant">
          <Val>13 types</Val>
        </Row>
        <Row Name="ConstantDataSequential" FullName="llvm.ConstantDataSequential">
          <Val>2 types</Val>
        </Row>
        <Row Name="ConstantExpr" FullName="llvm.ConstantExpr">
          <Val>3 types</Val>
        </Row>
        <Row Name="DIDescriptor" FullName="llvm.DIDescriptor">
          <Val>20 types</Val>
        </Row>
        <Row Name="DIScope" FullName="llvm.DIScope">
          <Val>6 types</Val>
        </Row>
        <Row Name="DIType" FullName="llvm.DIType">
          <Val>3 types</Val>
        </Row>
        <Row Name="GlobalValue" FullName="llvm.GlobalValue">
          <Val>4 types</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>6 types</Val>
        </Row>
        <Row Name="CastInst" FullName="llvm.CastInst">
          <Val>13 types</Val>
        </Row>
        <Row Name="CmpInst" FullName="llvm.CmpInst">
          <Val>2 types</Val>
        </Row>
        <Row Name="Pass" FullName="llvm.Pass">
          <Val>1 type</Val>
        </Row>
        <Row Name="CompositeType" FullName="llvm.CompositeType">
          <Val>2 types</Val>
        </Row>
        <Row Name="User" FullName="llvm.User">
          <Val>3 types</Val>
        </Row>
        <Row Name="ValueHandleBase" FullName="llvm.ValueHandleBase">
          <Val>1 type</Val>
        </Row>
        <Row Name="DIContext" FullName="llvm.DIContext">
          <Val>1 type</Val>
        </Row>
        <Row Name="JITMemoryManager" FullName="llvm.JITMemoryManager">
          <Val>1 type</Val>
        </Row>
        <Row Name="MCFragment" FullName="llvm.MCFragment">
          <Val>9 types</Val>
        </Row>
        <Row Name="MCExpr" FullName="llvm.MCExpr">
          <Val>5 types</Val>
        </Row>
        <Row Name="MCObjectSymbolizer" FullName="llvm.MCObjectSymbolizer">
          <Val>1 type</Val>
        </Row>
        <Row Name="ObjectFile" FullName="llvm.object.ObjectFile">
          <Val>3 types</Val>
        </Row>
        <Row Name="SymbolicFile" FullName="llvm.object.SymbolicFile">
          <Val>2 types</Val>
        </Row>
        <Row Name="InstrProfReader" FullName="llvm.InstrProfReader">
          <Val>3 types</Val>
        </Row>
        <Row Name="RuntimeDyldMachO" FullName="llvm.RuntimeDyldMachO">
          <Val>4 types</Val>
        </Row>
        <Row Name="SDNode" FullName="llvm.SDNode">
          <Val>23 types</Val>
        </Row>
        <Row Name="MemoryBuffer" FullName="llvm.MemoryBuffer">
          <Val>1 type</Val>
        </Row>
        <Row Name="process" FullName="llvm.sys.process">
          <Val>1 type</Val>
        </Row>
        <Row Name="RecTy" FullName="llvm.RecTy">
          <Val>1 type</Val>
        </Row>
        <Row Name="TypedInit" FullName="llvm.TypedInit">
          <Val>2 types</Val>
        </Row>
        <Row Name="CallGraphSCCPass" FullName="llvm.CallGraphSCCPass">
          <Val>1 type</Val>
        </Row>
        <Row Name="AbstractInterpreter" FullName="llvm.AbstractInterpreter">
          <Val>5 types</Val>
        </Row>
        <Row Name="EmitNodeMatcherCommon" FullName="llvm.EmitNodeMatcherCommon">
          <Val>1 type</Val>
        </Row>
        <Row Name="Value" FullName="llvm.Value">
          <Val>2 types</Val>
        </Row>
        <Row Name="User" FullName="llvm.User">
          <Val>3 types</Val>
        </Row>
        <Row Name="Type" FullName="llvm.Type">
          <Val>2 types</Val>
        </Row>
        <Row Name="Pass" FullName="llvm.Pass">
          <Val>1 type</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Class shouldn't be too deep in inheritance tree" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Object Oriented Design \ Class shouldn't be too deep in inheritance tree" QueryId="Query668483333" NbNodeMatched="432" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Class&amp;#0160;shouldn't&amp;#0160;be&amp;#0160;too&amp;#0160;deep&amp;#0160;in&amp;#0160;inheritance&amp;#0160;tree&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsClass&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClasses&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;BaseClasses&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ExceptThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Warn&amp;#0160;for&amp;#0160;classes&amp;#0160;with&amp;#0160;3&amp;#0160;or&amp;#0160;more&amp;#0160;base&amp;#0160;classes.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Notice&amp;#0160;that&amp;#0160;we&amp;#0160;don't&amp;#0160;count&amp;#0160;third-party&amp;#0160;classes&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;because&amp;#0160;this&amp;#0160;rule&amp;#0160;concerns&amp;#0160;your&amp;#0160;code&amp;#0160;design,&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;not&amp;#0160;third-party&amp;#0160;libraries&amp;#0160;consumed&amp;#0160;design.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClasses&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;=&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;3&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;baseClasses&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;metric&amp;#0160;value&amp;#0160;DepthOfInheritance&amp;#0160;takes&amp;#0160;account&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;of&amp;#0160;third-party&amp;#0160;base&amp;#0160;classes&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DepthOfInheritance&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Branches&amp;#0160;too&amp;#0160;long&amp;#0160;in&amp;#0160;the&amp;#0160;derivation&amp;#0160;should&amp;#0160;be&amp;#0160;avoided.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;DepthOfInheritance&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#DIT" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#DIT&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>baseClasses</Column>
        <Column>Depth of inheritance</Column>
      </Columns>
      <Rows>
        <Row Name="AArch64leTargetMachine" FullName="llvm.AArch64leTargetMachine">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64beTargetMachine" FullName="llvm.AArch64beTargetMachine">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64_ELFTargetObjectFile" FullName="llvm.AArch64_ELFTargetObjectFile">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64_MachoTargetObjectFile" FullName="llvm.AArch64_MachoTargetObjectFile">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64AdvSIMDScalar" FullName="anonymous_namespace{aarch64advsimdscalarpass.cpp}.AArch64AdvSIMDScalar">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64AsmPrinter" FullName="anonymous_namespace{aarch64asmprinter.cpp}.AArch64AsmPrinter">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="AArch64BranchRelaxation" FullName="anonymous_namespace{aarch64branchrelaxation.cpp} .AArch64BranchRelaxation">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64ConditionalCompares" FullName="anonymous_namespace{aarch64conditionalcompares.cpp} .AArch64ConditionalCompares">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64DeadRegisterDefinitions" FullName="anonymous_namespace{aarch64deadregisterdefinitionspass.cpp} .AArch64DeadRegisterDefinitions">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64ExpandPseudo" FullName="anonymous_namespace{aarch64expandpseudoinsts.cpp}.AArch64ExpandPseudo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64DAGToDAGISel" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}.AArch64DAGToDAGISel">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="AArch64StorePairSuppress" FullName="anonymous_namespace{aarch64storepairsuppress.cpp} .AArch64StorePairSuppress">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64PassConfig" FullName="anonymous_namespace{aarch64targetmachine.cpp}.AArch64PassConfig">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="AArch64TTI" FullName="anonymous_namespace{aarch64targettransforminfo.cpp}.AArch64TTI">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AArch64ELFStreamer" FullName="anonymous_namespace{aarch64elfstreamer.cpp}.AArch64ELFStreamer">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMAsmPrinter" FullName="llvm.ARMAsmPrinter">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ARMTargetMachine" FullName="llvm.ARMTargetMachine">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMLETargetMachine" FullName="llvm.ARMLETargetMachine">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ARMBETargetMachine" FullName="llvm.ARMBETargetMachine">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ThumbTargetMachine" FullName="llvm.ThumbTargetMachine">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ThumbLETargetMachine" FullName="llvm.ThumbLETargetMachine">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ThumbBETargetMachine" FullName="llvm.ThumbBETargetMachine">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ARMElfTargetObjectFile" FullName="llvm.ARMElfTargetObjectFile">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMCodeEmitter" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMConstantIslands" FullName="anonymous_namespace{armconstantislandpass.cpp}.ARMConstantIslands">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMExpandPseudo" FullName="anonymous_namespace{armexpandpseudoinsts.cpp}.ARMExpandPseudo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMDAGToDAGISel" FullName="anonymous_namespace{armiseldagtodag.cpp}.ARMDAGToDAGISel">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ARMOptimizeBarriersPass" FullName="anonymous_namespace{armoptimizebarrierspass.cpp} .ARMOptimizeBarriersPass">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMPassConfig" FullName="anonymous_namespace{armtargetmachine.cpp}.ARMPassConfig">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="ARMTTI" FullName="anonymous_namespace{armtargettransforminfo.cpp}.ARMTTI">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="Thumb2ITBlockPass" FullName="anonymous_namespace{thumb2itblockpass.cpp}.Thumb2ITBlockPass">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="Thumb2SizeReduce" FullName="anonymous_namespace{thumb2sizereduction.cpp}.Thumb2SizeReduce">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMCOFFMCAsmInfoMicrosoft" FullName="llvm.ARMCOFFMCAsmInfoMicrosoft">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMCOFFMCAsmInfoGNU" FullName="llvm.ARMCOFFMCAsmInfoGNU">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMELFStreamer" FullName="anonymous_namespace{armelfstreamer.cpp}.ARMELFStreamer">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ARMWinCOFFStreamer" FullName="anonymous_namespace{armwincoffstreamer.cpp}.ARMWinCOFFStreamer">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="Function" FullName="llvm.Function">
          <Val>7 types</Val>
          <Val>6</Val>
        </Row>
        <Row Name="IVStrideUse" FullName="llvm.IVStrideUse">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="JumpInstrTableInfo" FullName="llvm.JumpInstrTableInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LPPassManager" FullName="llvm.LPPassManager">
          <Val>3 types</Val>
          <Val>2</Val>
        </Row>
        <Row Name="RGPassManager" FullName="llvm.RGPassManager">
          <Val>3 types</Val>
          <Val>2</Val>
        </Row>
        <Row Name="SCEVTruncateExpr" FullName="llvm.SCEVTruncateExpr">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SCEVZeroExtendExpr" FullName="llvm.SCEVZeroExtendExpr">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SCEVSignExtendExpr" FullName="llvm.SCEVSignExtendExpr">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SCEVCommutativeExpr" FullName="llvm.SCEVCommutativeExpr">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SCEVAddExpr" FullName="llvm.SCEVAddExpr">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="SCEVMulExpr" FullName="llvm.SCEVMulExpr">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="SCEVAddRecExpr" FullName="llvm.SCEVAddRecExpr">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SCEVSMaxExpr" FullName="llvm.SCEVSMaxExpr">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="SCEVUMaxExpr" FullName="llvm.SCEVUMaxExpr">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="SCEVUnknown" FullName="llvm.SCEVUnknown">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AliasAnalysisCounter" FullName="anonymous_namespace{aliasanalysiscounter.cpp}.AliasAnalysisCounter">
          <Val>3 types</Val>
          <Val>2</Val>
        </Row>
        <Row Name="AliasDebugger" FullName="anonymous_namespace{aliasdebugger.cpp}.AliasDebugger">
          <Val>3 types</Val>
          <Val>2</Val>
        </Row>
        <Row Name="ScalarEvolutionAliasAnalysis" FullName="anonymous_namespace{scalarevolutionaliasanalysis.cpp} .ScalarEvolutionAliasAnalysis">
          <Val>3 types</Val>
          <Val>2</Val>
        </Row>
        <Row Name="TypeBasedAliasAnalysis" FullName="anonymous_namespace{typebasedaliasanalysis.cpp}.TypeBasedAliasAnalysis">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ScopedNoAliasAA" FullName="anonymous_namespace{scopednoaliasaa.cpp}.ScopedNoAliasAA">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="AsmPrinter" FullName="llvm.AsmPrinter">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ConstantPlaceHolder" FullName="llvm.anonymous_namespace{bitcodereader.cpp}.ConstantPlaceHolder">
          <Val>4 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="TargetPassConfig" FullName="llvm.TargetPassConfig">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="EdgeBundles" FullName="llvm.EdgeBundles">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="GCModuleInfo" FullName="llvm.GCModuleInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LiveDebugVariables" FullName="llvm.LiveDebugVariables">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LiveIntervals" FullName="llvm.LiveIntervals">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LiveRegMatrix" FullName="llvm.LiveRegMatrix">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LiveStacks" FullName="llvm.LiveStacks">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LiveVariables" FullName="llvm.LiveVariables">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineBlockFrequencyInfo" FullName="llvm.MachineBlockFrequencyInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineBranchProbabilityInfo" FullName="llvm.MachineBranchProbabilityInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineDominatorTree" FullName="llvm.MachineDominatorTree">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineDominanceFrontier" FullName="llvm.MachineDominanceFrontier">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineLoopInfo" FullName="llvm.MachineLoopInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineModuleInfo" FullName="llvm.MachineModuleInfo">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="RegisterPassParser&lt;RegistryClass&gt;" FullName="llvm.RegisterPassParser&lt;RegistryClass&gt;">
          <Val>3 types</Val>
          <Val>1</Val>
        </Row>
        <Row Name="MachineRegionInfoPass" FullName="llvm.MachineRegionInfoPass">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ScheduleDAGMILive" FullName="llvm.ScheduleDAGMILive">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineTraceMetrics" FullName="llvm.MachineTraceMetrics">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="PEI" FullName="llvm.PEI">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SpillPlacement" FullName="llvm.SpillPlacement">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="SlotIndexes" FullName="llvm.SlotIndexes">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="StackMapLiveness" FullName="llvm.StackMapLiveness">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="VirtRegMap" FullName="llvm.VirtRegMap">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="BasicTTI" FullName="anonymous_namespace{basictargettransforminfo.cpp}.BasicTTI">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="BranchFolderPass" FullName="anonymous_namespace{branchfolding.cpp}.BranchFolderPass">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="DeadMachineInstructionElim" FullName="anonymous_namespace{deadmachineinstructionelim.cpp} .DeadMachineInstructionElim">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="EarlyIfConverter" FullName="anonymous_namespace{earlyifconversion.cpp}.EarlyIfConverter">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ExeDepsFix" FullName="anonymous_namespace{executiondepsfix.cpp}.ExeDepsFix">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="ExpandISelPseudos" FullName="anonymous_namespace{expandiselpseudos.cpp}.ExpandISelPseudos">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="GCMachineCodeAnalysis" FullName="anonymous_namespace{gcstrategy.cpp}.GCMachineCodeAnalysis">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="IfConverter" FullName="anonymous_namespace{ifconversion.cpp}.IfConverter">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="LocalStackSlotPass" FullName="anonymous_namespace{localstackslotallocation.cpp}.LocalStackSlotPass">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineBlockPlacement" FullName="anonymous_namespace{machineblockplacement.cpp}.MachineBlockPlacement">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineBlockPlacementStats" FullName="anonymous_namespace{machineblockplacement.cpp} .MachineBlockPlacementStats">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineCSE" FullName="anonymous_namespace{machinecse.cpp}.MachineCSE">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineCopyPropagation" FullName="anonymous_namespace{machinecopypropagation.cpp}.MachineCopyPropagation">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="UnpackMachineBundles" FullName="anonymous_namespace{machineinstrbundle.cpp}.UnpackMachineBundles">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="FinalizeMachineBundles" FullName="anonymous_namespace{machineinstrbundle.cpp}.FinalizeMachineBundles">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineLICM" FullName="anonymous_namespace{machinelicm.cpp}.MachineLICM">
          <Val>3 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineSchedulerBase" FullName="anonymous_namespace{machinescheduler.cpp}.MachineSchedulerBase">
          <Val>4 types</Val>
          <Val>3</Val>
        </Row>
        <Row Name="MachineScheduler" FullName="anonymous_namespace{machinescheduler.cpp}.MachineScheduler">
          <Val>5 types</Val>
          <Val>4</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>1 491</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>3.45</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>8</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>1.03</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>1.06</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Constructor should not call a virtual methods" ContentTruncatedThreshold="100" FullName="Object Oriented Design \ Constructor should not call a virtual methods" QueryId="Query417642499" NbNodeMatched="57" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Constructor&amp;#0160;should&amp;#0160;not&amp;#0160;call&amp;#0160;a&amp;#0160;virtual&amp;#0160;methods&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Returns&amp;#0160;constructor&amp;#0160;of&amp;#0160;a&amp;#0160;non-sealed&amp;#0160;type&amp;#0160;calling&amp;#0160;virtual&amp;#0160;methods.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;In&amp;#0160;such&amp;#0160;a&amp;#0160;situation,&amp;#0160;if&amp;#0160;a&amp;#0160;derived&amp;#0160;class&amp;#0160;overrides&amp;#0160;the&amp;#0160;method,&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;then&amp;#0160;the&amp;#0160;override&amp;#0160;method&amp;#0160;will&amp;#0160;be&amp;#0160;called&amp;#0160;before&amp;#0160;the&amp;#0160;derived&amp;#0160;constructor.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;This&amp;#0160;makes&amp;#0160;the&amp;#0160;class&amp;#0160;fragile&amp;#0160;to&amp;#0160;derive&amp;#0160;from.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Violations&amp;#0160;reported&amp;#0160;can&amp;#0160;be&amp;#0160;solved&amp;#0160;by&amp;#0160;re-designing&amp;#0160;object&amp;#0160;initialisation&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;or&amp;#0160;by&amp;#0160;marking&amp;#0160;the&amp;#0160;parent&amp;#0160;class&amp;#0160;as&amp;#0160;sealed,&amp;#0160;if&amp;#0160;possible.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsClass&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctor&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Constructors&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;virtualMethodsCalled&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mCalled&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctor&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MethodsCalled&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mCalled&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsVirtual&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;mCalled&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentType&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DeriveFrom&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;mCalled&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentType&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mCalled&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;virtualMethodsCalled&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctor&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;virtualMethodsCalled&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;If&amp;#0160;there&amp;#0160;is&amp;#0160;no&amp;#0160;derived&amp;#0160;type,&amp;#0160;it&amp;#0160;might&amp;#0160;be&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;an&amp;#0160;opportunity&amp;#0160;to&amp;#0160;mark&amp;#0160;t&amp;#0160;as&amp;#0160;sealed.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DerivedTypes&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>virtualMethodsCalled</Column>
        <Column>DerivedTypes</Column>
      </Columns>
      <Rows>
        <Row Name="AArch64AsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64AsmParser .AArch64AsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ARMAsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser.ARMAsmParser (llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp;,constllvm::MCInstrInfo&amp; ,constllvm::MCTargetOptions&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ARMTargetLowering(llvm::TargetMachine&amp;)" FullName="llvm.ARMTargetLowering.ARMTargetLowering(llvm::TargetMachine&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ARMCodeEmitter(llvm::TargetMachine&amp;,llvm::JITCodeEmitter&amp;)" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter.ARMCodeEmitter (llvm::TargetMachine&amp;,llvm::JITCodeEmitter&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ARMFastISel(llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel.ARMFastISel (llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="AsmPrinter(llvm::TargetMachine&amp;,llvm::MCStreamer&amp;)" FullName="llvm.AsmPrinter.AsmPrinter(llvm::TargetMachine&amp;,llvm::MCStreamer&amp;)">
          <Val>2 methods</Val>
          <Val>14 types</Val>
        </Row>
        <Row Name="AggressiveAntiDepBreaker(llvm::MachineFunction&amp; ,constllvm::RegisterClassInfo&amp;,TargetSubtargetInfo::RegClassVector&amp;)" FullName="llvm.AggressiveAntiDepBreaker.AggressiveAntiDepBreaker (llvm::MachineFunction&amp;,constllvm::RegisterClassInfo&amp; ,TargetSubtargetInfo::RegClassVector&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="AllocationOrder(unsignedint,constllvm::VirtRegMap&amp; ,constllvm::RegisterClassInfo&amp;)" FullName="llvm.AllocationOrder.AllocationOrder(unsignedint ,constllvm::VirtRegMap&amp;,constllvm::RegisterClassInfo&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="CCState(CallingConv::ID,bool,llvm::MachineFunction&amp; ,constllvm::TargetMachine&amp;,SmallVectorImpl&lt;llvm::CCValAssign&gt;&amp; ,llvm::LLVMContext&amp;)" FullName="llvm.CCState.CCState(CallingConv::ID,bool,llvm::MachineFunction&amp; ,constllvm::TargetMachine&amp;,SmallVectorImpl&lt;llvm::CCValAssign&gt;&amp; ,llvm::LLVMContext&amp;)">
          <Val>1 method</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="CriticalAntiDepBreaker(llvm::MachineFunction&amp; ,constllvm::RegisterClassInfo&amp;)" FullName="llvm.CriticalAntiDepBreaker.CriticalAntiDepBreaker (llvm::MachineFunction&amp;,constllvm::RegisterClassInfo&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="VLIWPacketizerList(llvm::MachineFunction&amp;,llvm::MachineLoopInfo&amp; ,llvm::MachineDominatorTree&amp;,bool)" FullName="llvm.VLIWPacketizerList.VLIWPacketizerList(llvm::MachineFunction&amp; ,llvm::MachineLoopInfo&amp;,llvm::MachineDominatorTree&amp;,bool)">
          <Val>2 methods</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="LiveRangeEdit(llvm::LiveInterval*,SmallVectorImpl&lt;unsignedint&gt;&amp; ,llvm::MachineFunction&amp;,llvm::LiveIntervals&amp;,llvm::VirtRegMap* ,llvm::LiveRangeEdit::Delegate*)" FullName="llvm.LiveRangeEdit.LiveRangeEdit(llvm::LiveInterval*,SmallVectorImpl &lt;unsignedint&gt;&amp;,llvm::MachineFunction&amp;,llvm::LiveIntervals&amp; ,llvm::VirtRegMap*,llvm::LiveRangeEdit::Delegate*)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MachineFunction(constllvm::Function*,constllvm::TargetMachine&amp; ,unsignedint,llvm::MachineModuleInfo&amp;,llvm::GCModuleInfo*)" FullName="llvm.MachineFunction.MachineFunction(constllvm::Function* ,constllvm::TargetMachine&amp;,unsignedint,llvm::MachineModuleInfo&amp; ,llvm::GCModuleInfo*)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="PSetIterator(unsignedint,constllvm::MachineRegisterInfo*)" FullName="llvm.PSetIterator.PSetIterator(unsignedint ,constllvm::MachineRegisterInfo*)">
          <Val>4 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MachineSSAUpdater(llvm::MachineFunction&amp;,SmallVectorImpl &lt;llvm::MachineInstr*&gt;*)" FullName="llvm.MachineSSAUpdater.MachineSSAUpdater(llvm::MachineFunction&amp; ,SmallVectorImpl&lt;llvm::MachineInstr*&gt;*)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SplitAnalysis(constllvm::VirtRegMap&amp;,constllvm::LiveIntervals&amp; ,constllvm::MachineLoopInfo&amp;)" FullName="llvm.SplitAnalysis.SplitAnalysis(constllvm::VirtRegMap&amp; ,constllvm::LiveIntervals&amp;,constllvm::MachineLoopInfo&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SplitEditor(llvm::SplitAnalysis&amp;,llvm::LiveIntervals&amp; ,llvm::VirtRegMap&amp;,llvm::MachineDominatorTree&amp; ,llvm::MachineBlockFrequencyInfo&amp;)" FullName="llvm.SplitEditor.SplitEditor(llvm::SplitAnalysis&amp;,llvm::LiveIntervals&amp; ,llvm::VirtRegMap&amp;,llvm::MachineDominatorTree&amp; ,llvm::MachineBlockFrequencyInfo&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ScheduleDAG(llvm::MachineFunction&amp;)" FullName="llvm.ScheduleDAG.ScheduleDAG(llvm::MachineFunction&amp;)">
          <Val>2 methods</Val>
          <Val>11 types</Val>
        </Row>
        <Row Name="TargetLoweringBase(constllvm::TargetMachine&amp; ,constllvm::TargetLoweringObjectFile*)" FullName="llvm.TargetLoweringBase.TargetLoweringBase(constllvm::TargetMachine&amp; ,constllvm::TargetLoweringObjectFile*)">
          <Val>1 method</Val>
          <Val>17 types</Val>
        </Row>
        <Row Name="InlineSpiller(llvm::MachineFunctionPass&amp;,llvm::MachineFunction&amp; ,llvm::VirtRegMap&amp;)" FullName="anonymous_namespace{inlinespiller.cpp}.InlineSpiller.InlineSpiller (llvm::MachineFunctionPass&amp;,llvm::MachineFunction&amp;,llvm::VirtRegMap&amp;)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SchedulePostRATDList(llvm::MachineFunction&amp;,llvm::MachineLoopInfo&amp; ,llvm::MachineDominatorTree&amp;,llvm::AliasAnalysis* ,constllvm::RegisterClassInfo&amp;,TargetSubtargetInfo::AntiDepBreakMode ,SmallVectorImpl&lt;constllvm::TargetRegisterClass*&gt;&amp;)" FullName="anonymous_namespace{postraschedulerlist.cpp}.SchedulePostRATDList .SchedulePostRATDList(llvm::MachineFunction&amp;,llvm::MachineLoopInfo&amp; ,llvm::MachineDominatorTree&amp;,llvm::AliasAnalysis* ,constllvm::RegisterClassInfo&amp;,TargetSubtargetInfo::AntiDepBreakMode ,SmallVectorImpl&lt;constllvm::TargetRegisterClass*&gt;&amp;)">
          <Val>3 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SpillerBase(llvm::MachineFunctionPass&amp;,llvm::MachineFunction&amp; ,llvm::VirtRegMap&amp;)" FullName="anonymous_namespace{spiller.cpp}.SpillerBase.SpillerBase (llvm::MachineFunctionPass&amp;,llvm::MachineFunction&amp;,llvm::VirtRegMap&amp;)">
          <Val>2 methods</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="DWARFContextInMemory(object::ObjectFile*)" FullName="llvm.DWARFContextInMemory.DWARFContextInMemory(object::ObjectFile*)">
          <Val>3 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="HexagonTargetLowering(constllvm::TargetMachine&amp;)" FullName="llvm.HexagonTargetLowering.HexagonTargetLowering (constllvm::TargetMachine&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="Hexagon_CCState(CallingConv::ID,bool,constllvm::TargetMachine&amp; ,SmallVectorImpl&lt;llvm::CCValAssign&gt;&amp;,llvm::LLVMContext&amp;)" FullName="llvm.Hexagon_CCState.Hexagon_CCState(CallingConv::ID,bool ,constllvm::TargetMachine&amp;,SmallVectorImpl&lt;llvm::CCValAssign&gt;&amp; ,llvm::LLVMContext&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="VLIWResourceModel(constllvm::TargetMachine&amp; ,constllvm::TargetSchedModel*)" FullName="llvm.VLIWResourceModel.VLIWResourceModel(constllvm::TargetMachine&amp; ,constllvm::TargetSchedModel*)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="JIT(llvm::Module*,llvm::TargetMachine&amp;,llvm::TargetJITInfo&amp; ,llvm::JITMemoryManager*,bool)" FullName="llvm.JIT.JIT(llvm::Module*,llvm::TargetMachine&amp;,llvm::TargetJITInfo&amp; ,llvm::JITMemoryManager*,bool)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="JITResolver(llvm::JIT&amp;,&lt;anonymous&gt;::JITEmitter&amp;)" FullName="anonymous_namespace{jitemitter.cpp}.JITResolver.JITResolver(llvm::JIT&amp; ,&lt;anonymous&gt;::JITEmitter&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="JITEmitter(llvm::JIT&amp;,llvm::JITMemoryManager*,llvm::TargetMachine&amp;)" FullName="anonymous_namespace{jitemitter.cpp}.JITEmitter.JITEmitter(llvm::JIT&amp; ,llvm::JITMemoryManager*,llvm::TargetMachine&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MCAsmLayout(llvm::MCAssembler&amp;)" FullName="llvm.MCAsmLayout.MCAsmLayout(llvm::MCAssembler&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MCContext(constllvm::MCAsmInfo*,constllvm::MCRegisterInfo* ,constllvm::MCObjectFileInfo*,constllvm::SourceMgr*,bool)" FullName="llvm.MCContext.MCContext(constllvm::MCAsmInfo* ,constllvm::MCRegisterInfo*,constllvm::MCObjectFileInfo* ,constllvm::SourceMgr*,bool)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MCObjectStreamer(llvm::MCContext&amp;,llvm::MCAsmBackend&amp; ,llvm::raw_ostream&amp;,llvm::MCCodeEmitter*)" FullName="llvm.MCObjectStreamer.MCObjectStreamer(llvm::MCContext&amp; ,llvm::MCAsmBackend&amp;,llvm::raw_ostream&amp;,llvm::MCCodeEmitter*)">
          <Val>1 method</Val>
          <Val>10 types</Val>
        </Row>
        <Row Name="MCJIT(llvm::Module*,llvm::TargetMachine*,llvm::RTDyldMemoryManager* ,bool)" FullName="llvm.MCJIT.MCJIT(llvm::Module*,llvm::TargetMachine* ,llvm::RTDyldMemoryManager*,bool)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="AsmParser(llvm::SourceMgr&amp;,llvm::MCContext&amp;,llvm::MCStreamer&amp; ,constllvm::MCAsmInfo&amp;)" FullName="anonymous_namespace{asmparser.cpp}.AsmParser.AsmParser (llvm::SourceMgr&amp;,llvm::MCContext&amp;,llvm::MCStreamer&amp; ,constllvm::MCAsmInfo&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="RegDefsUses(llvm::TargetMachine&amp;)" FullName="anonymous_namespace{mipsdelayslotfiller.cpp}.RegDefsUses.RegDefsUses (llvm::TargetMachine&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="MipsFastISel(llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo* )" FullName="anonymous_namespace{mipsfastisel.cpp}.MipsFastISel.MipsFastISel (llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="IRObjectFile(std::unique_ptr&lt;MemoryBuffer&gt;,std::unique_ptr&lt;Module&gt;)" FullName="llvm.object.IRObjectFile.IRObjectFile(std::unique_ptr&lt;MemoryBuffer&gt; ,std::unique_ptr&lt;Module&gt;)">
          <Val>5 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="PPCFastISel(llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)" FullName="anonymous_namespace{ppcfastisel.cpp}.PPCFastISel.PPCFastISel (llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)">
          <Val>2 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="R600PacketizerList(llvm::MachineFunction&amp;,llvm::MachineLoopInfo&amp; ,llvm::MachineDominatorTree&amp;)" FullName="anonymous_namespace{r600packetizer.cpp}.R600PacketizerList .R600PacketizerList(llvm::MachineFunction&amp;,llvm::MachineLoopInfo&amp; ,llvm::MachineDominatorTree&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SelectionDAG(constllvm::TargetMachine&amp;,llvm::CodeGenOpt::Level)" FullName="llvm.SelectionDAG.SelectionDAG(constllvm::TargetMachine&amp; ,llvm::CodeGenOpt::Level)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="FastISel(llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)" FullName="llvm.FastISel.FastISel(llvm::FunctionLoweringInfo&amp; ,constllvm::TargetLibraryInfo*)">
          <Val>4 methods</Val>
          <Val>5 types</Val>
        </Row>
        <Row Name="InstrEmitter(llvm::MachineBasicBlock*,MachineBasicBlock::iterator)" FullName="llvm.InstrEmitter.InstrEmitter(llvm::MachineBasicBlock* ,MachineBasicBlock::iterator)">
          <Val>3 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ResourcePriorityQueue(llvm::SelectionDAGISel*)" FullName="llvm.ResourcePriorityQueue.ResourcePriorityQueue (llvm::SelectionDAGISel*)">
          <Val>5 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="ScheduleDAGSDNodes(llvm::MachineFunction&amp;)" FullName="llvm.ScheduleDAGSDNodes.ScheduleDAGSDNodes(llvm::MachineFunction&amp;)">
          <Val>1 method</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="ScheduleDAGRRList(llvm::MachineFunction&amp;,bool ,llvm::SchedulingPriorityQueue*,CodeGenOpt::Level)" FullName="anonymous_namespace{scheduledagrrlist.cpp}.ScheduleDAGRRList .ScheduleDAGRRList(llvm::MachineFunction&amp;,bool ,llvm::SchedulingPriorityQueue*,CodeGenOpt::Level)">
          <Val>3 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="RegReductionPQBase(llvm::MachineFunction&amp;,bool,bool,bool ,constllvm::TargetInstrInfo*,constllvm::TargetRegisterInfo* ,constllvm::TargetLowering*)" FullName="anonymous_namespace{scheduledagrrlist.cpp}.RegReductionPQBase .RegReductionPQBase(llvm::MachineFunction&amp;,bool,bool,bool ,constllvm::TargetInstrInfo*,constllvm::TargetRegisterInfo* ,constllvm::TargetLowering*)">
          <Val>1 method</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="ScheduleDAGVLIW(llvm::MachineFunction&amp;,llvm::AliasAnalysis* ,llvm::SchedulingPriorityQueue*)" FullName="anonymous_namespace{scheduledagvliw.cpp}.ScheduleDAGVLIW .ScheduleDAGVLIW(llvm::MachineFunction&amp;,llvm::AliasAnalysis* ,llvm::SchedulingPriorityQueue*)">
          <Val>3 methods</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SparcTargetLowering(llvm::TargetMachine&amp;)" FullName="llvm.SparcTargetLowering.SparcTargetLowering(llvm::TargetMachine&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="StreamingMemoryObject(llvm::DataStreamer*)" FullName="llvm.StreamingMemoryObject.StreamingMemoryObject(llvm::DataStreamer*)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SystemZAsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)" FullName="anonymous_namespace{systemzasmparser.cpp}.SystemZAsmParser .SystemZAsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="SystemZTargetLowering(constllvm::TargetMachine&amp;)" FullName="llvm.SystemZTargetLowering.SystemZTargetLowering (constllvm::TargetMachine&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="FieldInit(llvm::Init*,conststd::string&amp;)" FullName="llvm.FieldInit.FieldInit(llvm::Init*,conststd::string&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="RecordVal(llvm::Init*,llvm::RecTy*,unsignedint)" FullName="llvm.RecordVal.RecordVal(llvm::Init*,llvm::RecTy*,unsignedint)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="RecordVal(conststd::string&amp;,llvm::RecTy*,unsignedint)" FullName="llvm.RecordVal.RecordVal(conststd::string&amp;,llvm::RecTy*,unsignedint)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="X86AsmParser(llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp; ,constllvm::MCInstrInfo&amp;,constllvm::MCTargetOptions&amp;)" FullName="anonymous_namespace{x86asmparser.cpp}.X86AsmParser.X86AsmParser (llvm::MCSubtargetInfo&amp;,llvm::MCAsmParser&amp;,constllvm::MCInstrInfo&amp; ,constllvm::MCTargetOptions&amp;)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="CodeGenInstruction(llvm::Record*)" FullName="llvm.CodeGenInstruction.CodeGenInstruction(llvm::Record*)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="InstrMap(llvm::Record*)" FullName="anonymous_namespace{codegenmaptable.cpp}.InstrMap.InstrMap (llvm::Record*)">
          <Val>1 method</Val>
          <Val>0 type</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Don't assign static fields from instance methods" ContentTruncatedThreshold="100" FullName="Object Oriented Design \ Don't assign static fields from instance methods" QueryId="Query2687045934" NbNodeMatched="29" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Don't&amp;#0160;assign&amp;#0160;static&amp;#0160;fields&amp;#0160;from&amp;#0160;instance&amp;#0160;methods&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Assigning&amp;#0160;static&amp;#0160;fields&amp;#0160;from&amp;#0160;instance&amp;#0160;methods&amp;#0160;leads&amp;#0160;to&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;poorly&amp;#0160;maintainable&amp;#0160;and&amp;#0160;non&amp;#0160;thread-safe&amp;#0160;code.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;It&amp;#0160;is&amp;#0160;advised&amp;#0160;to&amp;#0160;assign&amp;#0160;static&amp;#0160;fields&amp;#0160;inline&amp;#0160;or&amp;#0160;from&amp;#0160;class&amp;#0160;constructor.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStatic&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;assignedBy&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MethodsAssigningMe&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStatic&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;assignedBy&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;assignedBy&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
        <Column>assignedBy</Column>
      </Columns>
      <Rows>
        <Row Name="buffer" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest.buffer">
          <Val>1 method</Val>
        </Row>
        <Row Name="run" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDNM.run">
          <Val>2 methods</Val>
        </Row>
        <Row Name="run" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDM.run">
          <Val>2 methods</Val>
        </Row>
        <Row Name="run" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDM2.run">
          <Val>2 methods</Val>
        </Row>
        <Row Name="run" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleDNM.run">
          <Val>2 methods</Val>
        </Row>
        <Row Name="runc" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.PassTestBase&lt;P&gt; .runc">
          <Val>1 method</Val>
        </Row>
        <Row Name="initialized" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.PassTestBase&lt;P&gt; .initialized">
          <Val>3 methods</Val>
        </Row>
        <Row Name="finalized" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.PassTestBase&lt;P&gt; .finalized">
          <Val>3 methods</Val>
        </Row>
        <Row Name="initcount" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.LPass.initcount">
          <Val>1 method</Val>
        </Row>
        <Row Name="fincount" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.LPass.fincount">
          <Val>1 method</Val>
        </Row>
        <Row Name="inited" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.BPass.inited">
          <Val>1 method</Val>
        </Row>
        <Row Name="fin" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.BPass.fin">
          <Val>1 method</Val>
        </Row>
        <Row Name="UnknownSize" FullName="llvm.AliasAnalysis.UnknownSize">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DebugType" FullName="llvm.ScoreboardHazardRecognizer.DebugType">
          <Val>1 method</Val>
        </Row>
        <Row Name="JITCtor" FullName="llvm.ExecutionEngine.JITCtor">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCJITCtor" FullName="llvm.ExecutionEngine.MCJITCtor">
          <Val>1 method</Val>
        </Row>
        <Row Name="AMD64FpEndOffset" FullName="anonymous_namespace{memorysanitizer.cpp}.VarArgAMD64Helper .AMD64FpEndOffset">
          <Val>1 method</Val>
        </Row>
        <Row Name="OverflowOccurredValue" FullName="anonymous_namespace{objcarcopts.cpp}.BBState.OverflowOccurredValue">
          <Val>2 methods</Val>
        </Row>
        <Row Name="EncodingCounterTagAndExpansionRegionTagBits" FullName="llvm.coverage.Counter.EncodingCounterTagAndExpansionRegionTagBits">
          <Val>1 method</Val>
        </Row>
        <Row Name="WaitCounts" FullName="anonymous_namespace{siinsertwaits.cpp}.SIInsertWaits.WaitCounts">
          <Val>1 method</Val>
        </Row>
        <Row Name="UnrollRuntimeCount" FullName="anonymous_namespace{loopunrollpass.cpp}.LoopUnroll.UnrollRuntimeCount">
          <Val>1 method</Val>
        </Row>
        <Row Name="IEEEhalf" FullName="llvm.APFloat.IEEEhalf">
          <Val>1 method</Val>
        </Row>
        <Row Name="IEEEsingle" FullName="llvm.APFloat.IEEEsingle">
          <Val>3 methods</Val>
        </Row>
        <Row Name="IEEEdouble" FullName="llvm.APFloat.IEEEdouble">
          <Val>4 methods</Val>
        </Row>
        <Row Name="IEEEquad" FullName="llvm.APFloat.IEEEquad">
          <Val>1 method</Val>
        </Row>
        <Row Name="PPCDoubleDouble" FullName="llvm.APFloat.PPCDoubleDouble">
          <Val>2 methods</Val>
        </Row>
        <Row Name="x87DoubleExtended" FullName="llvm.APFloat.x87DoubleExtended">
          <Val>1 method</Val>
        </Row>
        <Row Name="npos" FullName="llvm.StringRef.npos">
          <Val>8 methods</Val>
        </Row>
        <Row Name="LastSlabSize" FullName="anonymous_namespace{allocatortest.cpp}.MockSlabAllocator.LastSlabSize">
          <Val>1 method</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid Abstract Classes with too many methods" ContentTruncatedThreshold="100" FullName="Object Oriented Design \ Avoid Abstract Classes with too many methods" QueryId="Query2030113703" NbNodeMatched="73" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;Abstract&amp;#0160;Classes&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;methods&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;An&amp;#0160;abstract&amp;#0160;class&amp;#0160;&amp;#0160;should&amp;#0160;abstract&amp;#0160;a&amp;#0160;clear&amp;#0160;and&amp;#0160;well-defined&amp;#0160;concept.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Such&amp;#0160;concept&amp;#0160;shoudln't&amp;#0160;be&amp;#0160;represented&amp;#0160;with&amp;#0160;too&amp;#0160;many&amp;#0160;methods&amp;#0160;and&amp;#0160;property&amp;#0160;getter.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsAbstract&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methodsAndGetters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methodsAndGetters&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methodsAndGetters&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>methodsAndGetters</Column>
      </Columns>
      <Rows>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
        </Row>
        <Row Name="ARMBaseInstrInfo" FullName="llvm.ARMBaseInstrInfo">
          <Val>71 methods</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
        </Row>
        <Row Name="LoopPass" FullName="llvm.LoopPass">
          <Val>12 methods</Val>
        </Row>
        <Row Name="RegionInfoBase&lt;Tr&gt;" FullName="llvm.RegionInfoBase&lt;Tr&gt;">
          <Val>29 methods</Val>
        </Row>
        <Row Name="RegionInfoBase&lt;llvm::RegionTraits&lt;llvm::Function&gt;&gt;" FullName="llvm.RegionInfoBase&lt;llvm::RegionTraits&lt;llvm::Function&gt;&gt;">
          <Val>29 methods</Val>
        </Row>
        <Row Name="TargetTransformInfo" FullName="llvm.TargetTransformInfo">
          <Val>43 methods</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>87 methods</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>110 methods</Val>
        </Row>
        <Row Name="JITCodeEmitter" FullName="llvm.JITCodeEmitter">
          <Val>34 methods</Val>
        </Row>
        <Row Name="MachineCodeEmitter" FullName="llvm.MachineCodeEmitter">
          <Val>32 methods</Val>
        </Row>
        <Row Name="MachineSchedStrategy" FullName="llvm.MachineSchedStrategy">
          <Val>12 methods</Val>
        </Row>
        <Row Name="MachineTraceMetrics+Ensemble" FullName="llvm.MachineTraceMetrics+Ensemble">
          <Val>21 methods</Val>
        </Row>
        <Row Name="SchedulingPriorityQueue" FullName="llvm.SchedulingPriorityQueue">
          <Val>21 methods</Val>
        </Row>
        <Row Name="ScheduleDAG" FullName="llvm.ScheduleDAG">
          <Val>12 methods</Val>
        </Row>
        <Row Name="ScheduleDAGInstrs" FullName="llvm.ScheduleDAGInstrs">
          <Val>29 methods</Val>
        </Row>
        <Row Name="TargetFrameLowering" FullName="llvm.TargetFrameLowering">
          <Val>25 methods</Val>
        </Row>
        <Row Name="TargetRegisterInfo" FullName="llvm.TargetRegisterInfo">
          <Val>66 methods</Val>
        </Row>
        <Row Name="DiagnosticInfoOptimizationBase" FullName="llvm.DiagnosticInfoOptimizationBase">
          <Val>12 methods</Val>
        </Row>
        <Row Name="DiagnosticPrinter" FullName="llvm.DiagnosticPrinter">
          <Val>19 methods</Val>
        </Row>
        <Row Name="GlobalValue" FullName="llvm.GlobalValue">
          <Val>75 methods</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>87 methods</Val>
        </Row>
        <Row Name="TerminatorInst" FullName="llvm.TerminatorInst">
          <Val>11 methods</Val>
        </Row>
        <Row Name="Pass" FullName="llvm.Pass">
          <Val>31 methods</Val>
        </Row>
        <Row Name="PMTopLevelManager" FullName="llvm.PMTopLevelManager">
          <Val>17 methods</Val>
        </Row>
        <Row Name="PMDataManager" FullName="llvm.PMDataManager">
          <Val>31 methods</Val>
        </Row>
        <Row Name="DWARFContext" FullName="llvm.DWARFContext">
          <Val>55 methods</Val>
        </Row>
        <Row Name="ExecutionEngine" FullName="llvm.ExecutionEngine">
          <Val>55 methods</Val>
        </Row>
        <Row Name="RTDyldMemoryManager" FullName="llvm.RTDyldMemoryManager">
          <Val>12 methods</Val>
        </Row>
        <Row Name="JITMemoryManager" FullName="llvm.JITMemoryManager">
          <Val>22 methods</Val>
        </Row>
        <Row Name="MCELFObjectTargetWriter" FullName="llvm.MCELFObjectTargetWriter">
          <Val>18 methods</Val>
        </Row>
        <Row Name="MCAsmBackend" FullName="llvm.MCAsmBackend">
          <Val>19 methods</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>131 methods</Val>
        </Row>
        <Row Name="MCInstPrinter" FullName="llvm.MCInstPrinter">
          <Val>21 methods</Val>
        </Row>
        <Row Name="MCObjectStreamer" FullName="llvm.MCObjectStreamer">
          <Val>41 methods</Val>
        </Row>
        <Row Name="MCObjectWriter" FullName="llvm.MCObjectWriter">
          <Val>23 methods</Val>
        </Row>
        <Row Name="MCAtom" FullName="llvm.MCAtom">
          <Val>13 methods</Val>
        </Row>
        <Row Name="MCAsmParser" FullName="llvm.MCAsmParser">
          <Val>33 methods</Val>
        </Row>
        <Row Name="MCAsmLexer" FullName="llvm.MCAsmLexer">
          <Val>17 methods</Val>
        </Row>
        <Row Name="MCParsedAsmOperand" FullName="llvm.MCParsedAsmOperand">
          <Val>20 methods</Val>
        </Row>
        <Row Name="MCTargetAsmParser" FullName="llvm.MCTargetAsmParser">
          <Val>18 methods</Val>
        </Row>
        <Row Name="MipsTargetLowering" FullName="llvm.MipsTargetLowering">
          <Val>73 methods</Val>
        </Row>
        <Row Name="MipsRegisterInfo" FullName="llvm.MipsRegisterInfo">
          <Val>18 methods</Val>
        </Row>
        <Row Name="MipsInstrInfo" FullName="llvm.MipsInstrInfo">
          <Val>23 methods</Val>
        </Row>
        <Row Name="MipsDAGToDAGISel" FullName="llvm.MipsDAGToDAGISel">
          <Val>30 methods</Val>
        </Row>
        <Row Name="ObjectFile" FullName="llvm.object.ObjectFile">
          <Val>57 methods</Val>
        </Row>
        <Row Name="SymbolicFile" FullName="llvm.object.SymbolicFile">
          <Val>14 methods</Val>
        </Row>
        <Row Name="ArgList" FullName="llvm.opt.ArgList">
          <Val>49 methods</Val>
        </Row>
        <Row Name="InstrProfReader" FullName="llvm.InstrProfReader">
          <Val>12 methods</Val>
        </Row>
        <Row Name="AMDGPUInstrInfo" FullName="llvm.AMDGPUInstrInfo">
          <Val>43 methods</Val>
        </Row>
        <Row Name="ObjectImage" FullName="llvm.ObjectImage">
          <Val>17 methods</Val>
        </Row>
        <Row Name="RuntimeDyldImpl" FullName="llvm.RuntimeDyldImpl">
          <Val>40 methods</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>73 methods</Val>
        </Row>
        <Row Name="ScheduleDAGSDNodes" FullName="llvm.ScheduleDAGSDNodes">
          <Val>25 methods</Val>
        </Row>
        <Row Name="SelectionDAGISel" FullName="llvm.SelectionDAGISel">
          <Val>40 methods</Val>
        </Row>
        <Row Name="FoldingSetImpl" FullName="llvm.FoldingSetImpl">
          <Val>14 methods</Val>
        </Row>
        <Row Name="MemoryBuffer" FullName="llvm.MemoryBuffer">
          <Val>18 methods</Val>
        </Row>
        <Row Name="raw_ostream" FullName="llvm.raw_ostream">
          <Val>43 methods</Val>
        </Row>
        <Row Name="Option" FullName="llvm.cl.Option">
          <Val>34 methods</Val>
        </Row>
        <Row Name="generic_parser_base" FullName="llvm.cl.generic_parser_base">
          <Val>14 methods</Val>
        </Row>
        <Row Name="IO" FullName="llvm.yaml.IO">
          <Val>40 methods</Val>
        </Row>
        <Row Name="RecTy" FullName="llvm.RecTy">
          <Val>25 methods</Val>
        </Row>
        <Row Name="Init" FullName="llvm.Init">
          <Val>18 methods</Val>
        </Row>
        <Row Name="TargetJITInfo" FullName="llvm.TargetJITInfo">
          <Val>15 methods</Val>
        </Row>
        <Row Name="TargetLoweringObjectFile" FullName="llvm.TargetLoweringObjectFile">
          <Val>23 methods</Val>
        </Row>
        <Row Name="AbstractInterpreter" FullName="llvm.AbstractInterpreter">
          <Val>11 methods</Val>
        </Row>
        <Row Name="ObjDumper" FullName="llvm.ObjDumper">
          <Val>13 methods</Val>
        </Row>
        <Row Name="Modifier" FullName="anonymous_namespace{llvm-stress.cpp}.Modifier">
          <Val>13 methods</Val>
        </Row>
        <Row Name="Matcher" FullName="llvm.Matcher">
          <Val>25 methods</Val>
        </Row>
        <Row Name="FoldingSetImpl" FullName="llvm.FoldingSetImpl">
          <Val>14 methods</Val>
        </Row>
        <Row Name="Instruction" FullName="llvm.Instruction">
          <Val>87 methods</Val>
        </Row>
        <Row Name="GlobalValue" FullName="llvm.GlobalValue">
          <Val>75 methods</Val>
        </Row>
        <Row Name="Pass" FullName="llvm.Pass">
          <Val>31 methods</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Design" FullName="Design" GroupId="GroupOfRules-1945036360" NbQueries="3" NbErrors="0" NbWarns="3" Status="Warn">
    <Query Status="Warn" Name="Type should not have too many responsibilities" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Design \ Type should not have too many responsibilities" QueryId="Query1251094410" NbNodeMatched="248" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Type&amp;#0160;should&amp;#0160;not&amp;#0160;have&amp;#0160;too&amp;#0160;many&amp;#0160;responsibilities&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;using&amp;#0160;more&amp;#0160;than&amp;#0160;8&amp;#0160;different&amp;#0160;application&amp;#0160;namespaces&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;are&amp;#0160;considered&amp;#0160;as&amp;#0160;having&amp;#0160;too&amp;#0160;many&amp;#0160;responsabilities.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationTypesUsed&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;TypesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ExceptThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToList&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationNamespacesUsed&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationTypesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentNamespaces&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToList&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationNamespacesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;8&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Use&amp;#0160;an&amp;#0160;empiric&amp;#0160;formula&amp;#0160;to&amp;#0160;sort&amp;#0160;by&amp;#0160;degree&amp;#0160;of&amp;#0160;responsabilities&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;responsabilitiesMetric&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;*&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationNamespacesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;+&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationTypesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;/&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;responsabilitiesMetric&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;descending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationNamespacesUsed&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;applicationTypesUsed&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;responsabilitiesMetric&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>applicationNamespacesUsed</Column>
        <Column>applicationTypesUsed</Column>
        <Column>responsabilitiesMetric</Column>
      </Columns>
      <Rows>
        <Row Name="__Globals" FullName="__Globals">
          <Val>53 namespaces</Val>
          <Val>270 types</Val>
          <Val>80</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>66 namespaces</Val>
          <Val>103 types</Val>
          <Val>76</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>55 namespaces</Val>
          <Val>175 types</Val>
          <Val>72</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>48 namespaces</Val>
          <Val>210 types</Val>
          <Val>69</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>33 namespaces</Val>
          <Val>235 types</Val>
          <Val>56</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>30 namespaces</Val>
          <Val>208 types</Val>
          <Val>50</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>33 namespaces</Val>
          <Val>156 types</Val>
          <Val>48</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>43 namespaces</Val>
          <Val>49 types</Val>
          <Val>47</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>30 namespaces</Val>
          <Val>153 types</Val>
          <Val>45</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>28 namespaces</Val>
          <Val>154 types</Val>
          <Val>43</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>27 namespaces</Val>
          <Val>165 types</Val>
          <Val>43</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>24 namespaces</Val>
          <Val>172 types</Val>
          <Val>41</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>26 namespaces</Val>
          <Val>135 types</Val>
          <Val>39</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>25 namespaces</Val>
          <Val>136 types</Val>
          <Val>38</Val>
        </Row>
        <Row Name="ARMTargetLowering" FullName="llvm.ARMTargetLowering">
          <Val>22 namespaces</Val>
          <Val>151 types</Val>
          <Val>37</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>28 namespaces</Val>
          <Val>88 types</Val>
          <Val>36</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>28 namespaces</Val>
          <Val>80 types</Val>
          <Val>36</Val>
        </Row>
        <Row Name="SelectionDAGBuilder" FullName="llvm.SelectionDAGBuilder">
          <Val>16 namespaces</Val>
          <Val>196 types</Val>
          <Val>35</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>13 namespaces</Val>
          <Val>203 types</Val>
          <Val>33</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>18 namespaces</Val>
          <Val>153 types</Val>
          <Val>33</Val>
        </Row>
        <Row Name="InstCombiner" FullName="llvm.InstCombiner">
          <Val>16 namespaces</Val>
          <Val>164 types</Val>
          <Val>32</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>23 namespaces</Val>
          <Val>96 types</Val>
          <Val>32</Val>
        </Row>
        <Row Name="X86TargetLowering" FullName="llvm.X86TargetLowering">
          <Val>19 namespaces</Val>
          <Val>129 types</Val>
          <Val>31</Val>
        </Row>
        <Row Name="AArch64TargetLowering" FullName="llvm.AArch64TargetLowering">
          <Val>19 namespaces</Val>
          <Val>119 types</Val>
          <Val>30</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>20 namespaces</Val>
          <Val>107 types</Val>
          <Val>30</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>25 namespaces</Val>
          <Val>47 types</Val>
          <Val>29</Val>
        </Row>
        <Row Name="AsmPrinter" FullName="llvm.AsmPrinter">
          <Val>16 namespaces</Val>
          <Val>135 types</Val>
          <Val>29</Val>
        </Row>
        <Row Name="PPCTargetLowering" FullName="llvm.PPCTargetLowering">
          <Val>19 namespaces</Val>
          <Val>107 types</Val>
          <Val>29</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>17 namespaces</Val>
          <Val>129 types</Val>
          <Val>29</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>16 namespaces</Val>
          <Val>128 types</Val>
          <Val>28</Val>
        </Row>
        <Row Name="LTOCodeGenerator" FullName="llvm.LTOCodeGenerator">
          <Val>22 namespaces</Val>
          <Val>66 types</Val>
          <Val>28</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>18 namespaces</Val>
          <Val>102 types</Val>
          <Val>28</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>20 namespaces</Val>
          <Val>81 types</Val>
          <Val>28</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>24 namespaces</Val>
          <Val>44 types</Val>
          <Val>28</Val>
        </Row>
        <Row Name="ARMFastISel" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel">
          <Val>17 namespaces</Val>
          <Val>108 types</Val>
          <Val>27</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>18 namespaces</Val>
          <Val>90 types</Val>
          <Val>27</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>20 namespaces</Val>
          <Val>77 types</Val>
          <Val>27</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>19 namespaces</Val>
          <Val>82 types</Val>
          <Val>27</Val>
        </Row>
        <Row Name="ARMAsmPrinter" FullName="llvm.ARMAsmPrinter">
          <Val>18 namespaces</Val>
          <Val>81 types</Val>
          <Val>26</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>13 namespaces</Val>
          <Val>135 types</Val>
          <Val>26</Val>
        </Row>
        <Row Name="NVPTXAsmPrinter" FullName="llvm.NVPTXAsmPrinter">
          <Val>16 namespaces</Val>
          <Val>106 types</Val>
          <Val>26</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>23 namespaces</Val>
          <Val>24 types</Val>
          <Val>25</Val>
        </Row>
        <Row Name="SelectionDAG" FullName="llvm.SelectionDAG">
          <Val>13 namespaces</Val>
          <Val>129 types</Val>
          <Val>25</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>22 namespaces</Val>
          <Val>30 types</Val>
          <Val>25</Val>
        </Row>
        <Row Name="DwarfDebug" FullName="llvm.DwarfDebug">
          <Val>13 namespaces</Val>
          <Val>117 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>21 namespaces</Val>
          <Val>30 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="MipsTargetLowering" FullName="llvm.MipsTargetLowering">
          <Val>15 namespaces</Val>
          <Val>91 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>20 namespaces</Val>
          <Val>46 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>19 namespaces</Val>
          <Val>56 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="SystemZTargetLowering" FullName="llvm.SystemZTargetLowering">
          <Val>16 namespaces</Val>
          <Val>82 types</Val>
          <Val>24</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>21 namespaces</Val>
          <Val>26 types</Val>
          <Val>23</Val>
        </Row>
        <Row Name="HexagonTargetLowering" FullName="llvm.HexagonTargetLowering">
          <Val>16 namespaces</Val>
          <Val>74 types</Val>
          <Val>23</Val>
        </Row>
        <Row Name="AArch64FastISel" FullName="anonymous_namespace{aarch64fastisel.cpp}.AArch64FastISel">
          <Val>14 namespaces</Val>
          <Val>81 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="ARMAsmParser" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser">
          <Val>16 namespaces</Val>
          <Val>63 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="CodeGenPrepare" FullName="anonymous_namespace{codegenprepare.cpp}.CodeGenPrepare">
          <Val>12 namespaces</Val>
          <Val>102 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>11 namespaces</Val>
          <Val>117 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="SelectionDAGISel" FullName="llvm.SelectionDAGISel">
          <Val>11 namespaces</Val>
          <Val>114 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="DAGCombiner" FullName="anonymous_namespace{dagcombiner.cpp}.DAGCombiner">
          <Val>13 namespaces</Val>
          <Val>98 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="X86FastISel" FullName="anonymous_namespace{x86fastisel.cpp}.X86FastISel">
          <Val>13 namespaces</Val>
          <Val>99 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>18 namespaces</Val>
          <Val>47 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>13 namespaces</Val>
          <Val>97 types</Val>
          <Val>22</Val>
        </Row>
        <Row Name="NVPTXTargetLowering" FullName="llvm.NVPTXTargetLowering">
          <Val>14 namespaces</Val>
          <Val>78 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="PPCFastISel" FullName="anonymous_namespace{ppcfastisel.cpp}.PPCFastISel">
          <Val>13 namespaces</Val>
          <Val>84 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="SITargetLowering" FullName="llvm.SITargetLowering">
          <Val>14 namespaces</Val>
          <Val>74 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="AMDGPUTargetLowering" FullName="llvm.AMDGPUTargetLowering">
          <Val>14 namespaces</Val>
          <Val>76 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="R600TargetLowering" FullName="llvm.R600TargetLowering">
          <Val>14 namespaces</Val>
          <Val>75 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>11 namespaces</Val>
          <Val>107 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="SparcTargetLowering" FullName="llvm.SparcTargetLowering">
          <Val>14 namespaces</Val>
          <Val>72 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>18 namespaces</Val>
          <Val>31 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="BugDriver" FullName="llvm.BugDriver">
          <Val>17 namespaces</Val>
          <Val>48 types</Val>
          <Val>21</Val>
        </Row>
        <Row Name="ScalarEvolution" FullName="llvm.ScalarEvolution">
          <Val>9 namespaces</Val>
          <Val>111 types</Val>
          <Val>20</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>11 namespaces</Val>
          <Val>95 types</Val>
          <Val>20</Val>
        </Row>
        <Row Name="MipsAsmPrinter" FullName="llvm.MipsAsmPrinter">
          <Val>15 namespaces</Val>
          <Val>57 types</Val>
          <Val>20</Val>
        </Row>
        <Row Name="XCoreTargetLowering" FullName="llvm.XCoreTargetLowering">
          <Val>12 namespaces</Val>
          <Val>83 types</Val>
          <Val>20</Val>
        </Row>
        <Row Name="LTOModule" FullName="llvm.LTOModule">
          <Val>15 namespaces</Val>
          <Val>47 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="MSP430TargetLowering" FullName="llvm.MSP430TargetLowering">
          <Val>13 namespaces</Val>
          <Val>66 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="PPCCTRLoops" FullName="anonymous_namespace{ppcctrloops.cpp}.PPCCTRLoops">
          <Val>13 namespaces</Val>
          <Val>67 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="TargetLowering" FullName="llvm.TargetLowering">
          <Val>11 namespaces</Val>
          <Val>87 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="X86AsmPrinter" FullName="llvm.X86AsmPrinter">
          <Val>14 namespaces</Val>
          <Val>58 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="X86InstrInfo" FullName="llvm.X86InstrInfo">
          <Val>13 namespaces</Val>
          <Val>62 types</Val>
          <Val>19</Val>
        </Row>
        <Row Name="ARMBaseInstrInfo" FullName="llvm.ARMBaseInstrInfo">
          <Val>12 namespaces</Val>
          <Val>62 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="RAGreedy" FullName="anonymous_namespace{regallocgreedy.cpp}.RAGreedy">
          <Val>10 namespaces</Val>
          <Val>85 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="MemorySanitizerVisitor" FullName="anonymous_namespace{memorysanitizer.cpp}.MemorySanitizerVisitor">
          <Val>9 namespaces</Val>
          <Val>92 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="Interpreter" FullName="llvm.Interpreter">
          <Val>11 namespaces</Val>
          <Val>79 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>11 namespaces</Val>
          <Val>75 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="SDNode" FullName="llvm.SDNode">
          <Val>11 namespaces</Val>
          <Val>77 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="X86DAGToDAGISel" FullName="anonymous_namespace{x86iseldagtodag.cpp}.X86DAGToDAGISel">
          <Val>12 namespaces</Val>
          <Val>60 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>14 namespaces</Val>
          <Val>47 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>14 namespaces</Val>
          <Val>47 types</Val>
          <Val>18</Val>
        </Row>
        <Row Name="AArch64Operand" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand">
          <Val>13 namespaces</Val>
          <Val>40 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="TargetLoweringBase" FullName="llvm.TargetLoweringBase">
          <Val>12 namespaces</Val>
          <Val>55 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="ExecutionEngine" FullName="llvm.ExecutionEngine">
          <Val>11 namespaces</Val>
          <Val>60 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>12 namespaces</Val>
          <Val>59 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="JIT" FullName="llvm.JIT">
          <Val>12 namespaces</Val>
          <Val>50 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>11 namespaces</Val>
          <Val>69 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="AsmParser" FullName="anonymous_namespace{asmparser.cpp}.AsmParser">
          <Val>10 namespaces</Val>
          <Val>70 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="__Globals" FullName="__Globals">
          <Val>14 namespaces</Val>
          <Val>36 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="Mips16TargetLowering" FullName="llvm.Mips16TargetLowering">
          <Val>13 namespaces</Val>
          <Val>43 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="NVPTXDAGToDAGISel" FullName="anonymous_namespace{nvptxiseldagtodag.h}.NVPTXDAGToDAGISel">
          <Val>13 namespaces</Val>
          <Val>49 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="PPCDAGToDAGISel" FullName="anonymous_namespace{ppciseldagtodag.cpp}.PPCDAGToDAGISel">
          <Val>12 namespaces</Val>
          <Val>56 types</Val>
          <Val>17</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>4 735</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>19.09</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>10</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>80</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>10.71</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>114.62</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid namespaces with few types" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Design \ Avoid namespaces with few types" QueryId="Query4206118250" NbNodeMatched="683" NbNodeTested="1141" KindOfNode=" namespaces">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;namespaces&amp;#0160;with&amp;#0160;few&amp;#0160;types&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Namespaces&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;!=&lt;/font&gt;&lt;font color='#A31515'&gt;""&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;5&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;orderby&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;ascending&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Make&amp;#0160;sure&amp;#0160;that&amp;#0160;there&amp;#0160;is&amp;#0160;a&amp;#0160;logical&amp;#0160;organization&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;to&amp;#0160;each&amp;#0160;of&amp;#0160;your&amp;#0160;namespaces,&amp;#0160;and&amp;#0160;that&amp;#0160;there&amp;#0160;is&amp;#0160;a&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;valid&amp;#0160;reason&amp;#0160;for&amp;#0160;putting&amp;#0160;types&amp;#0160;in&amp;#0160;a&amp;#0160;sparsely&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;populated&amp;#0160;namespace.&amp;#0160;Namespaces&amp;#0160;should&amp;#0160;contain&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;types&amp;#0160;that&amp;#0160;are&amp;#0160;used&amp;#0160;together&amp;#0160;in&amp;#0160;most&amp;#0160;scenarios.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;When&amp;#0160;their&amp;#0160;applications&amp;#0160;are&amp;#0160;mutually&amp;#0160;exclusive,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;types&amp;#0160;should&amp;#0160;be&amp;#0160;located&amp;#0160;in&amp;#0160;separate&amp;#0160;namespaces&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>namespaces</Column>
        <Column>types</Column>
      </Columns>
      <Rows>
        <Row Name="anonymous_namespace{apsinttest.cpp}" FullName="anonymous_namespace{apsinttest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.hashing.detail" FullName="llvm.hashing.detail">
          <Val>1 type</Val>
        </Row>
        <Row Name="std" FullName="std">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{foldingset.cpp}" FullName="anonymous_namespace{foldingset.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{inteqclassestest.cpp}" FullName="anonymous_namespace{inteqclassestest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{intrusiverefcntptrtest.cpp}" FullName="anonymous_namespace{intrusiverefcntptrtest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{sparsebitvectortest.cpp}" FullName="anonymous_namespace{sparsebitvectortest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{cfgtest.cpp}" FullName="anonymous_namespace{cfgtest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="Check" FullName="Check">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{leakdetectortest.cpp}" FullName="anonymous_namespace{leakdetectortest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{typestest.cpp}" FullName="anonymous_namespace{typestest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{usetest.cpp}" FullName="anonymous_namespace{usetest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{usertest.cpp}" FullName="anonymous_namespace{usertest.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64ISD" FullName="llvm.AArch64ISD">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64" FullName="llvm.AArch64">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64addresstypepromotion.cpp}" FullName="anonymous_namespace{aarch64addresstypepromotion.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64advsimdscalarpass.cpp}" FullName="anonymous_namespace{aarch64advsimdscalarpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64asmprinter.cpp}" FullName="anonymous_namespace{aarch64asmprinter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64cleanuplocaldynamictlspass.cpp}" FullName="anonymous_namespace{aarch64cleanuplocaldynamictlspass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64collectloh.cpp}" FullName="anonymous_namespace{aarch64collectloh.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64deadregisterdefinitionspass.cpp}" FullName="anonymous_namespace{aarch64deadregisterdefinitionspass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64expandpseudoinsts.cpp}" FullName="anonymous_namespace{aarch64expandpseudoinsts.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64iseldagtodag.cpp}" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64loadstoreoptimizer.cpp}" FullName="anonymous_namespace{aarch64loadstoreoptimizer.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64promoteconstant.cpp}" FullName="anonymous_namespace{aarch64promoteconstant.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64storepairsuppress.cpp}" FullName="anonymous_namespace{aarch64storepairsuppress.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64targetmachine.cpp}" FullName="anonymous_namespace{aarch64targetmachine.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64targettransforminfo.cpp}" FullName="anonymous_namespace{aarch64targettransforminfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64" FullName="llvm.AArch64">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64asmbackend.cpp}.CU" FullName="anonymous_namespace{aarch64asmbackend.cpp}.CU">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64elfobjectwriter.cpp}" FullName="anonymous_namespace{aarch64elfobjectwriter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64mccodeemitter.cpp}" FullName="anonymous_namespace{aarch64mccodeemitter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64machobjectwriter.cpp}" FullName="anonymous_namespace{aarch64machobjectwriter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64SE" FullName="llvm.AArch64SE">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64Layout" FullName="llvm.AArch64Layout">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.AArch64II" FullName="llvm.AArch64II">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.ARMRI" FullName="llvm.ARMRI">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.ARMISD" FullName="llvm.ARMISD">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{a15sdoptimizer.cpp}" FullName="anonymous_namespace{a15sdoptimizer.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armcodeemitter.cpp}" FullName="anonymous_namespace{armcodeemitter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armisellowering.cpp}" FullName="anonymous_namespace{armisellowering.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{arminstrinfo.cpp}" FullName="anonymous_namespace{arminstrinfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armoptimizebarrierspass.cpp}" FullName="anonymous_namespace{armoptimizebarrierspass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armtargetmachine.cpp}" FullName="anonymous_namespace{armtargetmachine.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armtargettransforminfo.cpp}" FullName="anonymous_namespace{armtargettransforminfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{mlxexpansionpass.cpp}" FullName="anonymous_namespace{mlxexpansionpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{thumb2itblockpass.cpp}" FullName="anonymous_namespace{thumb2itblockpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.ARM_MC" FullName="llvm.ARM_MC">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armmachobjectwriter.cpp}" FullName="anonymous_namespace{armmachobjectwriter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armmachorelocationinfo.cpp}" FullName="anonymous_namespace{armmachorelocationinfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armmccodeemitter.cpp}" FullName="anonymous_namespace{armmccodeemitter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armmctargetdesc.cpp}" FullName="anonymous_namespace{armmctargetdesc.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armunwindopasm.cpp}" FullName="anonymous_namespace{armunwindopasm.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armwincoffobjectwriter.cpp}" FullName="anonymous_namespace{armwincoffobjectwriter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{armwincoffstreamer.cpp}" FullName="anonymous_namespace{armwincoffstreamer.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasanalysiscounter.cpp}" FullName="anonymous_namespace{aliasanalysiscounter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasanalysisevaluator.cpp}" FullName="anonymous_namespace{aliasanalysisevaluator.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasdebugger.cpp}" FullName="anonymous_namespace{aliasdebugger.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{aliassettracker.cpp}" FullName="anonymous_namespace{aliassettracker.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{blockfrequencyinfoimpl.cpp}" FullName="anonymous_namespace{blockfrequencyinfoimpl.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{costmodel.cpp}" FullName="anonymous_namespace{costmodel.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{constantfolding.cpp}" FullName="anonymous_namespace{constantfolding.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{delinearization.cpp}" FullName="anonymous_namespace{delinearization.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{instcount.cpp}" FullName="anonymous_namespace{instcount.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{lint.cpp}" FullName="anonymous_namespace{lint.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{lint.cpp}.MemRef" FullName="anonymous_namespace{lint.cpp}.MemRef">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{loopinfo.cpp}" FullName="anonymous_namespace{loopinfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{looppass.cpp}" FullName="anonymous_namespace{looppass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{moduledebuginfoprinter.cpp}" FullName="anonymous_namespace{moduledebuginfoprinter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{noaliasanalysis.cpp}" FullName="anonymous_namespace{noaliasanalysis.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{regionpass.cpp}" FullName="anonymous_namespace{regionpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolutionaliasanalysis.cpp}" FullName="anonymous_namespace{scalarevolutionaliasanalysis.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolutionnormalization.cpp}" FullName="anonymous_namespace{scalarevolutionnormalization.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{targettransforminfo.cpp}" FullName="anonymous_namespace{targettransforminfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.lltok" FullName="llvm.lltok">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{asmprinterinlineasm.cpp}" FullName="anonymous_namespace{asmprinterinlineasm.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{dwarfdebug.cpp}" FullName="anonymous_namespace{dwarfdebug.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{erlanggcprinter.cpp}" FullName="anonymous_namespace{erlanggcprinter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{ocamlgcprinter.cpp}" FullName="anonymous_namespace{ocamlgcprinter.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.anonymous_namespace{bitcodereader.cpp}" FullName="llvm.anonymous_namespace{bitcodereader.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{bitcodereader.cpp}" FullName="anonymous_namespace{bitcodereader.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{bitcodewriterpass.cpp}" FullName="anonymous_namespace{bitcodewriterpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.GC" FullName="llvm.GC">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.Sched" FullName="llvm.Sched">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.FloatABI" FullName="llvm.FloatABI">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.FPOpFusion" FullName="llvm.FPOpFusion">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.JumpTable" FullName="llvm.JumpTable">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{atomicexpandloadlinkedpass.cpp}" FullName="anonymous_namespace{atomicexpandloadlinkedpass.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{basictargettransforminfo.cpp}" FullName="anonymous_namespace{basictargettransforminfo.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{branchfolding.cpp}" FullName="anonymous_namespace{branchfolding.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{deadmachineinstructionelim.cpp}" FullName="anonymous_namespace{deadmachineinstructionelim.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{dwarfehprepare.cpp}" FullName="anonymous_namespace{dwarfehprepare.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{erlanggc.cpp}" FullName="anonymous_namespace{erlanggc.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{expandiselpseudos.cpp}" FullName="anonymous_namespace{expandiselpseudos.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{expandpostrapseudos.cpp}" FullName="anonymous_namespace{expandpostrapseudos.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{gcmetadata.cpp}" FullName="anonymous_namespace{gcmetadata.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Nested types should not be visible" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Design \ Nested types should not be visible" QueryId="Query1820670583" NbNodeMatched="580" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Nested&amp;#0160;types&amp;#0160;should&amp;#0160;not&amp;#0160;be&amp;#0160;visible&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsNested&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsPrivate&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Visibility&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;A&amp;#0160;nested&amp;#0160;type&amp;#0160;is&amp;#0160;a&amp;#0160;type&amp;#0160;declared&amp;#0160;within&amp;#0160;the&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;scope&amp;#0160;of&amp;#0160;another&amp;#0160;type.&amp;#0160;Nested&amp;#0160;types&amp;#0160;are&amp;#0160;useful&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;for&amp;#0160;encapsulating&amp;#0160;private&amp;#0160;implementation&amp;#0160;details&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;of&amp;#0160;the&amp;#0160;containing&amp;#0160;type.&amp;#0160;Used&amp;#0160;for&amp;#0160;this&amp;#0160;purpose,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;nested&amp;#0160;types&amp;#0160;should&amp;#0160;not&amp;#0160;be&amp;#0160;externally&amp;#0160;visible.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Do&amp;#0160;not&amp;#0160;use&amp;#0160;externally&amp;#0160;visible&amp;#0160;nested&amp;#0160;types&amp;#0160;for&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;logical&amp;#0160;grouping&amp;#0160;or&amp;#0160;to&amp;#0160;avoid&amp;#0160;name&amp;#0160;collisions;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;instead,&amp;#0160;use&amp;#0160;namespaces.&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column># lines of code (LOC)</Column>
        <Column>Visibility</Column>
      </Columns>
      <Rows>
        <Row Name="Graph&lt;N&gt;+NodeSubset" FullName="llvm.Graph&lt;N&gt;+NodeSubset">
          <Val>17</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Graph&lt;N&gt;+ChildIterator" FullName="llvm.Graph&lt;N&gt;+ChildIterator">
          <Val>20</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ImmutableSetTest+MyIter" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest+MyIter">
          <Val>6</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="BrainF+CompileFlags" FullName="BrainF+CompileFlags">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BrainF+Symbol" FullName="BrainF+Symbol">
          <Val>N/A</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="TypeBuilder&lt;&lt;anonymous&gt;::MyType,cross&gt;+Fields" FullName="llvm.TypeBuilder&lt;&lt;anonymous&gt;::MyType,cross&gt;+Fields">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TestFunctionAnalysis+Result" FullName="anonymous_namespace{passmanagertest.cpp}.TestFunctionAnalysis+Result">
          <Val>1</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TestModuleAnalysis+Result" FullName="anonymous_namespace{passmanagertest.cpp}.TestModuleAnalysis+Result">
          <Val>1</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LockMutex&lt;KeyT,MutexT&gt;+ExtraData" FullName="anonymous_namespace{valuemaptest.cpp}.LockMutex&lt;KeyT,MutexT&gt;+ExtraData">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="NoFollow&lt;KeyT&gt;+AnonymousEnum" FullName="anonymous_namespace{valuemaptest.cpp}.NoFollow&lt;KeyT&gt;+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="CountOps&lt;KeyT&gt;+ExtraData" FullName="anonymous_namespace{valuemaptest.cpp}.CountOps&lt;KeyT&gt;+ExtraData">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+StartFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+StartFunctionBodyCall">
          <Val>5</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+EndFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+EndFunctionBodyCall">
          <Val>4</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+DeallocateFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+DeallocateFunctionBodyCall">
          <Val>1</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AArch64AsmParser+AArch64MatchResultTy" FullName="anonymous_namespace{aarch64asmparser.cpp} .AArch64AsmParser+AArch64MatchResultTy">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AArch64Subtarget+ARMProcFamilyEnum" FullName="llvm.AArch64Subtarget+ARMProcFamilyEnum">
          <Val>N/A</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="AArch64FunctionInfo+MILOHDirective" FullName="llvm.AArch64FunctionInfo+MILOHDirective">
          <Val>5</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AArch64FastISel+Address+BaseKind" FullName="anonymous_namespace{aarch64fastisel.cpp} .AArch64FastISel+Address+BaseKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AArch64MCExpr+VariantKind" FullName="llvm.AArch64MCExpr+VariantKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AArch64NamedImmMapper+Mapping" FullName="llvm.AArch64NamedImmMapper+Mapping">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ARMAsmParser+ARMMatchResultTy" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser+ARMMatchResultTy">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ARMSubtarget+ARMProcFamilyEnum" FullName="llvm.ARMSubtarget+ARMProcFamilyEnum">
          <Val>N/A</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="ARMSubtarget+ARMProcClassEnum" FullName="llvm.ARMSubtarget+ARMProcClassEnum">
          <Val>N/A</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="ARMSubtarget+AnonymousEnum" FullName="llvm.ARMSubtarget+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Address+AnonymousEnum" FullName="anonymous_namespace{armfastisel.cpp}.Address+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Address+Anonymous" FullName="anonymous_namespace{armfastisel.cpp}.Address+Anonymous">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ARMMCExpr+VariantKind" FullName="llvm.ARMMCExpr+VariantKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ARMTargetELFStreamer+AttributeItem+AnonymousEnum" FullName="anonymous_namespace{armelfstreamer.cpp} .ARMTargetELFStreamer+AttributeItem+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasAnalysis+Location" FullName="llvm.AliasAnalysis+Location">
          <Val>12</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasAnalysis+AliasResult" FullName="llvm.AliasAnalysis+AliasResult">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasAnalysis+ModRefResult" FullName="llvm.AliasAnalysis+ModRefResult">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasAnalysis+AnonymousEnum" FullName="llvm.AliasAnalysis+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasAnalysis+ModRefBehavior" FullName="llvm.AliasAnalysis+ModRefBehavior">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AliasSet+iterator" FullName="llvm.AliasSet+iterator">
          <Val>17</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+BlockNode" FullName="llvm.BlockFrequencyInfoImplBase+BlockNode">
          <Val>11</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+FrequencyData" FullName="llvm.BlockFrequencyInfoImplBase+FrequencyData">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+LoopData" FullName="llvm.BlockFrequencyInfoImplBase+LoopData">
          <Val>17</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+WorkingData" FullName="llvm.BlockFrequencyInfoImplBase+WorkingData">
          <Val>25</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+Weight" FullName="llvm.BlockFrequencyInfoImplBase+Weight">
          <Val>5</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+Weight+DistType" FullName="llvm.BlockFrequencyInfoImplBase+Weight+DistType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BlockFrequencyInfoImplBase+Distribution" FullName="llvm.BlockFrequencyInfoImplBase+Distribution">
          <Val>36</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="CGSCCPassManager+CGSCCPassModel" FullName="llvm.CGSCCPassManager+CGSCCPassModel">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="CGSCCAnalysisManagerModuleProxy+Result" FullName="llvm.CGSCCAnalysisManagerModuleProxy+Result">
          <Val>9</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ModuleAnalysisManagerCGSCCProxy+Result" FullName="llvm.ModuleAnalysisManagerCGSCCProxy+Result">
          <Val>7</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="FunctionAnalysisManagerCGSCCProxy+Result" FullName="llvm.FunctionAnalysisManagerCGSCCProxy+Result">
          <Val>9</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="CGSCCAnalysisManagerFunctionProxy+Result" FullName="llvm.CGSCCAnalysisManagerFunctionProxy+Result">
          <Val>7</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Dependence+DVEntry" FullName="llvm.Dependence+DVEntry">
          <Val>6</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Dependence+DVEntry+AnonymousEnum" FullName="llvm.Dependence+DVEntry+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DependenceAnalysis+Subscript+ClassificationKind" FullName="llvm.DependenceAnalysis+Subscript+ClassificationKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LazyCallGraph+iterator" FullName="llvm.LazyCallGraph+iterator">
          <Val>14</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LazyCallGraph+Node" FullName="llvm.LazyCallGraph+Node">
          <Val>29</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LazyCallGraph+SCC" FullName="llvm.LazyCallGraph+SCC">
          <Val>189</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LazyCallGraph+postorder_scc_iterator" FullName="llvm.LazyCallGraph+postorder_scc_iterator">
          <Val>8</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LazyValueInfo+Tristate" FullName="llvm.LazyValueInfo+Tristate">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LibCallLocationInfo+LocResult" FullName="llvm.LibCallLocationInfo+LocResult">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LibCallFunctionInfo+LocationMRInfo" FullName="llvm.LibCallFunctionInfo+LocationMRInfo">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LibCallFunctionInfo+AnonymousEnum" FullName="llvm.LibCallFunctionInfo+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="RegionBase&lt;Tr&gt;+PrintStyle" FullName="llvm.RegionBase&lt;Tr&gt;+PrintStyle">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="RegionBase&lt;Tr&gt;+block_iterator_wrapper" FullName="llvm.RegionBase&lt;Tr&gt;+block_iterator_wrapper">
          <Val>2</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="SCEV+NoWrapFlags" FullName="llvm.SCEV+NoWrapFlags">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ScalarEvolution+LoopDisposition" FullName="llvm.ScalarEvolution+LoopDisposition">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ScalarEvolution+BlockDisposition" FullName="llvm.ScalarEvolution+BlockDisposition">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetTransformInfo+TargetCostConstants" FullName="llvm.TargetTransformInfo+TargetCostConstants">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetTransformInfo+UnrollingPreferences" FullName="llvm.TargetTransformInfo+UnrollingPreferences">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetTransformInfo+PopcntSupportKind" FullName="llvm.TargetTransformInfo+PopcntSupportKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetTransformInfo+ShuffleKind" FullName="llvm.TargetTransformInfo+ShuffleKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetTransformInfo+OperandValueKind" FullName="llvm.TargetTransformInfo+OperandValueKind">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+OperationEquivalenceFlags" FullName="llvm.Instruction+OperationEquivalenceFlags">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+TermOps" FullName="llvm.Instruction+TermOps">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+BinaryOps" FullName="llvm.Instruction+BinaryOps">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+MemoryOps" FullName="llvm.Instruction+MemoryOps">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+CastOps" FullName="llvm.Instruction+CastOps">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Instruction+OtherOps" FullName="llvm.Instruction+OtherOps">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="PointerLikeTypeTraits&lt;llvm::Instruction*&gt;+AnonymousEnum" FullName="llvm.PointerLikeTypeTraits&lt;llvm::Instruction*&gt;+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="NamedMDNode+op_iterator_impl" FullName="llvm.NamedMDNode+op_iterator_impl">
          <Val>17</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="IrreducibleGraph+IrrNode" FullName="llvm.bfi_detail.IrreducibleGraph+IrrNode">
          <Val>6</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="PtrUseVisitorBase+PtrInfo" FullName="llvm.detail.PtrUseVisitorBase+PtrInfo">
          <Val>16</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="PtrUseVisitorBase+UseToVisit" FullName="llvm.detail.PtrUseVisitorBase+UseToVisit">
          <Val>0</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="MemDepPrinter+DepType" FullName="anonymous_namespace{memdepprinter.cpp}.MemDepPrinter+DepType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="ValID+AnonymousEnum" FullName="llvm.ValID+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="EHStreamer+PadRange" FullName="llvm.EHStreamer+PadRange">
          <Val>0</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="EHStreamer+ActionEntry" FullName="llvm.EHStreamer+ActionEntry">
          <Val>0</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="EHStreamer+CallSiteEntry" FullName="llvm.EHStreamer+CallSiteEntry">
          <Val>0</Val>
          <Val>Protected</Val>
        </Row>
        <Row Name="AsmPrinter+CFIMoveType" FullName="llvm.AsmPrinter+CFIMoveType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DebugLocEntry+Value" FullName="llvm.DebugLocEntry+Value">
          <Val>33</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DebugLocEntry+Value+EntryType" FullName="llvm.DebugLocEntry+Value+EntryType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DebugLocEntry+Value+Anonymous" FullName="llvm.DebugLocEntry+Value+Anonymous">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DwarfAccelTable+Atom" FullName="llvm.DwarfAccelTable+Atom">
          <Val>4</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DwarfAccelTable+HashDataContents" FullName="llvm.DwarfAccelTable+HashDataContents">
          <Val>5</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="WinCodeViewLineTables+FileNameRegistryTy+PerFileInfo" FullName="llvm.WinCodeViewLineTables+FileNameRegistryTy+PerFileInfo">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="DIEValue+Type" FullName="llvm.DIEValue+Type">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BitcodeReader+ErrorType" FullName="llvm.BitcodeReader+ErrorType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BitstreamReader+BlockInfo" FullName="llvm.BitstreamReader+BlockInfo">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BitstreamEntry+AnonymousEnum" FullName="llvm.BitstreamEntry+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="BitstreamCursor+AnonymousEnum" FullName="llvm.BitstreamCursor+AnonymousEnum">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="AggressiveAntiDepState+RegisterReference" FullName="llvm.AggressiveAntiDepState+RegisterReference">
          <Val>0</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="CCValAssign+LocInfo" FullName="llvm.CCValAssign+LocInfo">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="InterferenceCache+Cursor" FullName="llvm.InterferenceCache+Cursor">
          <Val>21</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="TargetMachine+CodeGenFileType" FullName="llvm.TargetMachine+CodeGenFileType">
          <Val>N/A</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="LiveRange+Segment" FullName="llvm.LiveRange+Segment">
          <Val>11</Val>
          <Val>Public</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>3 472</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>12.86</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>286</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>32.53</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>1 058</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Architecture and Layering" FullName="Architecture and Layering" GroupId="GroupOfRules-990269139" NbQueries="6" NbErrors="0" NbWarns="3" Status="Warn">
    <Query Status="Warn" Name="Avoid namespaces mutually dependent" ContentTruncatedThreshold="100" FullName="Architecture and Layering \ Avoid namespaces mutually dependent" QueryId="Query1991441341" NbNodeMatched="35" NbNodeTested="1141" KindOfNode=" namespaces">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;namespaces&amp;#0160;mutually&amp;#0160;dependent&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Foreach&amp;#0160;pair&amp;#0160;of&amp;#0160;namespace&amp;#0160;mutually&amp;#0160;dependent,&amp;#0160;this&amp;#0160;rule&amp;#0160;lists&amp;#0160;pairs.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;pair&amp;#0160;{&amp;#0160;first,&amp;#0160;second&amp;#0160;}&amp;#0160;is&amp;#0160;formatted&amp;#0160;to&amp;#0160;show&amp;#0160;that&amp;#0160;first&amp;#0160;namespace&amp;#0160;shouldn't&amp;#0160;use&amp;#0160;the&amp;#0160;second&amp;#0160;namespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;first/second&amp;#0160;order&amp;#0160;is&amp;#0160;inferred&amp;#0160;from&amp;#0160;the&amp;#0160;number&amp;#0160;of&amp;#0160;types&amp;#0160;used&amp;#0160;by&amp;#0160;each&amp;#0160;other.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;first&amp;#0160;namespace&amp;#0160;is&amp;#0160;using&amp;#0160;less&amp;#0160;types&amp;#0160;of&amp;#0160;the&amp;#0160;second.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;It&amp;#0160;means&amp;#0160;that&amp;#0160;the&amp;#0160;first&amp;#0160;namespace&amp;#0160;is&amp;#0160;certainly&amp;#0160;at&amp;#0160;a&amp;#0160;lower&amp;#0160;level&amp;#0160;in&amp;#0160;the&amp;#0160;architecture,&amp;#0160;than&amp;#0160;the&amp;#0160;second.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;To&amp;#0160;explore&amp;#0160;the&amp;#0160;coupling&amp;#0160;between&amp;#0160;the&amp;#0160;two&amp;#0160;namespaces,&amp;#0160;you&amp;#0160;can&amp;#0160;export:&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;typesOfFirstUsedBySecond&amp;#0160;to&amp;#0160;the&amp;#0160;vertical&amp;#0160;header&amp;#0160;of&amp;#0160;the&amp;#0160;dependency&amp;#0160;matrix&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;typesOfSecondUsedByFirst&amp;#0160;to&amp;#0160;the&amp;#0160;horizontal&amp;#0160;header&amp;#0160;of&amp;#0160;the&amp;#0160;dependency&amp;#0160;matrix&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Following&amp;#0160;these&amp;#0160;advices&amp;#0160;is&amp;#0160;useful&amp;#0160;to&amp;#0160;avoid&amp;#0160;namespaces&amp;#0160;dependency&amp;#0160;cycles.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Optimization:&amp;#0160;restreint&amp;#0160;application&amp;#0160;Projects&amp;#0160;set&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;If&amp;#0160;some&amp;#0160;namespaces&amp;#0160;are&amp;#0160;mutually&amp;#0160;dependent&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;They&amp;#0160;must&amp;#0160;be&amp;#0160;declared&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;project&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;The&amp;#0160;parent&amp;#0160;project&amp;#0160;must&amp;#0160;ContainsNamespaceDependencyCycle&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;project&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Projects&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ContainsNamespaceDependencyCycle&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;null&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ContainsNamespaceDependencyCycle&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Value&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;hashset&amp;#0160;is&amp;#0160;used&amp;#0160;to&amp;#0160;avoid&amp;#0160;reporting&amp;#0160;both&amp;#0160;A&amp;#0160;&amp;lt;-&amp;gt;&amp;#0160;B&amp;#0160;and&amp;#0160;B&amp;#0160;&amp;lt;-&amp;gt;&amp;#0160;A&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#2B91BD'&gt;HashSet&lt;/font&gt;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&lt;font color='#2B91BD'&gt;INamespace&lt;/font&gt;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Optimization:&amp;#0160;restreint&amp;#0160;namespaces&amp;#0160;set&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;If&amp;#0160;a&amp;#0160;namespace&amp;#0160;doesn't&amp;#0160;have&amp;#0160;a&amp;#0160;Level&amp;#0160;value,&amp;#0160;it&amp;#0160;must&amp;#0160;be&amp;#0160;in&amp;#0160;a&amp;#0160;dependency&amp;#0160;cycle&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;or&amp;#0160;it&amp;#0160;must&amp;#0160;be&amp;#0160;using&amp;#0160;directly&amp;#0160;or&amp;#0160;indirectly&amp;#0160;a&amp;#0160;dependency&amp;#0160;cycle.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;project&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildNamespaces&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Level&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;null&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;namespaces&amp;#0160;mutually&amp;#0160;dependent&amp;#0160;with&amp;#0160;nA&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;unused&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Add&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;Populate&amp;#0160;hashset&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesMutuallyDependentWith_nA&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NamespacesUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Using&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Except&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;--&amp;#0160;avoid&amp;#0160;reporting&amp;#0160;both&amp;#0160;A&amp;#0160;&amp;lt;-&amp;gt;&amp;#0160;B&amp;#0160;and&amp;#0160;B&amp;#0160;&amp;lt;-&amp;gt;&amp;#0160;A&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesMutuallyDependentWith_nA&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nB&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesMutuallyDependentWith_nA&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;nA&amp;#0160;and&amp;#0160;nB&amp;#0160;are&amp;#0160;mutually&amp;#0160;dependent&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;first&amp;#0160;the&amp;#0160;one&amp;#0160;that&amp;#0160;shouldn't&amp;#0160;use&amp;#0160;the&amp;#0160;other.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;first&amp;#0160;namespace&amp;#0160;is&amp;#0160;inferred&amp;#0160;from&amp;#0160;the&amp;#0160;fact&amp;#0160;that&amp;#0160;it&amp;#0160;is&amp;#0160;using&amp;#0160;less&amp;#0160;types&amp;#0160;of&amp;#0160;the&amp;#0160;second.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfBUsedByA&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nB&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;UsedBy&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfAUsedByB&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;UsedBy&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;nB&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;first&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;typesOfBUsedByA&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfAUsedByB&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nB&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;:&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;second&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;first&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nB&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;:&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfFirstUsedBySecond&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;first&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfAUsedByB&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;:&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfBUsedByA&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfSecondUsedByFirst&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;first&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;nA&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfBUsedByA&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;:&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfAUsedByB&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfFirstUsedBySecond&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfSecondUsedByFirst&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;first&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"anonymous_namespace"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;second&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"anonymous_namespace"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;first&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;shouldntUse&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;second&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfFirstUsedBySecond&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOfSecondUsedByFirst&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>namespaces</Column>
        <Column>shouldntUse</Column>
        <Column>typesOfFirstUsedBySecond</Column>
        <Column>typesOfSecondUsedByFirst</Column>
      </Columns>
      <Rows>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>1 type</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.bfi_detail</Val>
          <Val>5 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm.detail" FullName="llvm.detail">
          <Val>llvm</Val>
          <Val>3 types</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>33 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val />
          <Val>3 types</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>4 types</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>40 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>33 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>llvm</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>20 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm.detail" FullName="llvm.detail">
          <Val>llvm</Val>
          <Val>4 types</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.Win64EH</Val>
          <Val>1 type</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>13 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>13 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.object</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>llvm</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.object</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>40 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val />
          <Val>5 types</Val>
          <Val>3 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>8 types</Val>
          <Val>6 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.sys</Val>
          <Val>14 types</Val>
          <Val>3 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.cl</Val>
          <Val>9 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.sys.fs" FullName="llvm.sys.fs">
          <Val>llvm</Val>
          <Val>6 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.IntervalMapImpl</Val>
          <Val>5 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.yaml</Val>
          <Val>19 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm.sys.fs.detail" FullName="llvm.sys.fs.detail">
          <Val>llvm.sys.fs</Val>
          <Val>2 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>1 type</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>4 types</Val>
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val />
          <Val>9 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm.EEVT</Val>
          <Val>3 types</Val>
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>8 types</Val>
          <Val>6 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>llvm</Val>
          <Val>20 types</Val>
          <Val>4 types</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid namespaces dependency cycles" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Architecture and Layering \ Avoid namespaces dependency cycles" QueryId="Query1084101811" NbNodeMatched="546" NbNodeTested="1141" KindOfNode=" namespaces">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;namespaces&amp;#0160;dependency&amp;#0160;cycles&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;This&amp;#0160;query&amp;#0160;lists&amp;#0160;all&amp;#0160;application&amp;#0160;namespaces&amp;#0160;dependency&amp;#0160;cyles.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Each&amp;#0160;row&amp;#0160;shows&amp;#0160;a&amp;#0160;different&amp;#0160;cycle,&amp;#0160;prefixed&amp;#0160;with&amp;#0160;a&amp;#0160;namespace&amp;#0160;entangled&amp;#0160;in&amp;#0160;the&amp;#0160;cycle.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;To&amp;#0160;browse&amp;#0160;a&amp;#0160;cycle&amp;#0160;on&amp;#0160;the&amp;#0160;dependency&amp;#0160;graph&amp;#0160;or&amp;#0160;the&amp;#0160;dependency&amp;#0160;matrix,&amp;#0160;just&amp;#0160;right&amp;#0160;click&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;a&amp;#0160;cycle&amp;#0160;cell&amp;#0160;and&amp;#0160;export&amp;#0160;namespaces&amp;#0160;matched&amp;#0160;to&amp;#0160;the&amp;#0160;dependency&amp;#0160;graph&amp;#0160;or&amp;#0160;matrix!&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;In&amp;#0160;the&amp;#0160;matrix,&amp;#0160;dependency&amp;#0160;cycles&amp;#0160;are&amp;#0160;represented&amp;#0160;with&amp;#0160;red&amp;#0160;squares&amp;#0160;and&amp;#0160;black&amp;#0160;cells.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;To&amp;#0160;browse&amp;#0160;easily&amp;#0160;dependency&amp;#0160;cycles,&amp;#0160;the&amp;#0160;Matrix&amp;#0160;comes&amp;#0160;with&amp;#0160;the&amp;#0160;option:&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;Display&amp;#0160;Direct&amp;#0160;and&amp;#0160;Indirect&amp;#0160;Dependencies&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Optimization:&amp;#0160;restreint&amp;#0160;application&amp;#0160;Projects&amp;#0160;set&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;If&amp;#0160;some&amp;#0160;namespaces&amp;#0160;are&amp;#0160;mutually&amp;#0160;dependent&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;They&amp;#0160;must&amp;#0160;be&amp;#0160;declared&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;project&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;-&amp;#0160;The&amp;#0160;parent&amp;#0160;project&amp;#0160;must&amp;#0160;ContainsNamespaceDependencyCycle&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;project&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Projects&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ContainsNamespaceDependencyCycle&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;null&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ContainsNamespaceDependencyCycle&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Value&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Optimization:&amp;#0160;restreint&amp;#0160;namespaces&amp;#0160;set&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;A&amp;#0160;namespace&amp;#0160;involved&amp;#0160;in&amp;#0160;a&amp;#0160;cycle&amp;#0160;necessarily&amp;#0160;have&amp;#0160;a&amp;#0160;null&amp;#0160;Level.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;project&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildNamespaces&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Level&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;null&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;hashset&amp;#0160;is&amp;#0160;used&amp;#0160;to&amp;#0160;avoid&amp;#0160;iterating&amp;#0160;again&amp;#0160;on&amp;#0160;namespaces&amp;#0160;already&amp;#0160;caught&amp;#0160;in&amp;#0160;a&amp;#0160;cycle.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#2B91BD'&gt;HashSet&lt;/font&gt;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&lt;font color='#2B91BD'&gt;INamespace&lt;/font&gt;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;By&amp;#0160;commenting&amp;#0160;this&amp;#0160;line,&amp;#0160;the&amp;#0160;query&amp;#0160;matches&amp;#0160;all&amp;#0160;namespaces&amp;#0160;involved&amp;#0160;in&amp;#0160;a&amp;#0160;cycle.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Define&amp;#0160;2&amp;#0160;code&amp;#0160;metrics&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;-&amp;#0160;Namespaces&amp;#0160;depth&amp;#0160;of&amp;#0160;is&amp;#0160;using&amp;#0160;indirectly&amp;#0160;the&amp;#0160;suspect&amp;#0160;namespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;-&amp;#0160;Namespaces&amp;#0160;depth&amp;#0160;of&amp;#0160;is&amp;#0160;used&amp;#0160;by&amp;#0160;the&amp;#0160;suspect&amp;#0160;namespace&amp;#0160;indirectly.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Note:&amp;#0160;for&amp;#0160;direct&amp;#0160;usage&amp;#0160;the&amp;#0160;depth&amp;#0160;is&amp;#0160;equal&amp;#0160;to&amp;#0160;1.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesUserDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DepthOfIsUsing&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesUsedDepth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DepthOfIsUsedBy&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;namespaces&amp;#0160;that&amp;#0160;are&amp;#0160;both&amp;#0160;using&amp;#0160;and&amp;#0160;used&amp;#0160;by&amp;#0160;namespaceSuspect&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;usersAndUsed&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;namespacesSuspect&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;namespacesUserDepth&lt;/font&gt;&lt;font color='#000000'&gt;[&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;]&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;namespacesUsedDepth&lt;/font&gt;&lt;font color='#000000'&gt;[&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;]&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"anonymous_namespace"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;usersAndUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Here&amp;#0160;we've&amp;#0160;found&amp;#0160;namespace(s)&amp;#0160;both&amp;#0160;using&amp;#0160;and&amp;#0160;used&amp;#0160;by&amp;#0160;the&amp;#0160;suspect&amp;#0160;namespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;A&amp;#0160;cycle&amp;#0160;involving&amp;#0160;the&amp;#0160;suspect&amp;#0160;namespace&amp;#0160;is&amp;#0160;found!&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;cycle&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;usersAndUsed&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Concat&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&lt;font color='#000000'&gt;[&lt;/font&gt;&lt;font color='#000000'&gt;]&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Fill&amp;#0160;hashset&amp;#0160;with&amp;#0160;namespaces&amp;#0160;in&amp;#0160;the&amp;#0160;cycle.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;.ToArray()&amp;#0160;is&amp;#0160;needed&amp;#0160;to&amp;#0160;force&amp;#0160;the&amp;#0160;iterating&amp;#0160;process.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;unused1&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;cycle&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;unused2&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Add&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToArray&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;suspect&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;cycle&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>namespaces</Column>
        <Column>cycle</Column>
      </Columns>
      <Rows>
        <Row Name="" FullName="">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="llvm.anonymous_namespace{dominatortreetest.cpp}" FullName="llvm.anonymous_namespace{dominatortreetest.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="llvm.anonymous_namespace{legacypassmanagertest.cpp}" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64asmparser.cpp}" FullName="anonymous_namespace{aarch64asmparser.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64addresstypepromotion.cpp}" FullName="anonymous_namespace{aarch64addresstypepromotion.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64advsimdscalarpass.cpp}" FullName="anonymous_namespace{aarch64advsimdscalarpass.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64asmprinter.cpp}" FullName="anonymous_namespace{aarch64asmprinter.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64branchrelaxation.cpp}" FullName="anonymous_namespace{aarch64branchrelaxation.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64cleanuplocaldynamictlspass.cpp}" FullName="anonymous_namespace{aarch64cleanuplocaldynamictlspass.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64collectloh.cpp}" FullName="anonymous_namespace{aarch64collectloh.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64conditionalcompares.cpp}" FullName="anonymous_namespace{aarch64conditionalcompares.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64deadregisterdefinitionspass.cpp}" FullName="anonymous_namespace{aarch64deadregisterdefinitionspass.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64expandpseudoinsts.cpp}" FullName="anonymous_namespace{aarch64expandpseudoinsts.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64fastisel.cpp}" FullName="anonymous_namespace{aarch64fastisel.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64iseldagtodag.cpp}" FullName="anonymous_namespace{aarch64iseldagtodag.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64loadstoreoptimizer.cpp}" FullName="anonymous_namespace{aarch64loadstoreoptimizer.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64promoteconstant.cpp}" FullName="anonymous_namespace{aarch64promoteconstant.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64storepairsuppress.cpp}" FullName="anonymous_namespace{aarch64storepairsuppress.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64targetmachine.cpp}" FullName="anonymous_namespace{aarch64targetmachine.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64targettransforminfo.cpp}" FullName="anonymous_namespace{aarch64targettransforminfo.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64asmbackend.cpp}" FullName="anonymous_namespace{aarch64asmbackend.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64elfobjectwriter.cpp}" FullName="anonymous_namespace{aarch64elfobjectwriter.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64elfstreamer.cpp}" FullName="anonymous_namespace{aarch64elfstreamer.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64mccodeemitter.cpp}" FullName="anonymous_namespace{aarch64mccodeemitter.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aarch64machobjectwriter.cpp}" FullName="anonymous_namespace{aarch64machobjectwriter.cpp}">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armasmparser.cpp}" FullName="anonymous_namespace{armasmparser.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{a15sdoptimizer.cpp}" FullName="anonymous_namespace{a15sdoptimizer.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armcodeemitter.cpp}" FullName="anonymous_namespace{armcodeemitter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armconstantislandpass.cpp}" FullName="anonymous_namespace{armconstantislandpass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armexpandpseudoinsts.cpp}" FullName="anonymous_namespace{armexpandpseudoinsts.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armfastisel.cpp}" FullName="anonymous_namespace{armfastisel.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armiseldagtodag.cpp}" FullName="anonymous_namespace{armiseldagtodag.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armisellowering.cpp}" FullName="anonymous_namespace{armisellowering.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{arminstrinfo.cpp}" FullName="anonymous_namespace{arminstrinfo.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armloadstoreoptimizer.cpp}" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armoptimizebarrierspass.cpp}" FullName="anonymous_namespace{armoptimizebarrierspass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armtargetmachine.cpp}" FullName="anonymous_namespace{armtargetmachine.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armtargettransforminfo.cpp}" FullName="anonymous_namespace{armtargettransforminfo.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{mlxexpansionpass.cpp}" FullName="anonymous_namespace{mlxexpansionpass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{thumb2itblockpass.cpp}" FullName="anonymous_namespace{thumb2itblockpass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{thumb2sizereduction.cpp}" FullName="anonymous_namespace{thumb2sizereduction.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>7 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armasmbackend.cpp}" FullName="anonymous_namespace{armasmbackend.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armelfobjectwriter.cpp}" FullName="anonymous_namespace{armelfobjectwriter.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armelfstreamer.cpp}" FullName="anonymous_namespace{armelfstreamer.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armmachobjectwriter.cpp}" FullName="anonymous_namespace{armmachobjectwriter.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armmachorelocationinfo.cpp}" FullName="anonymous_namespace{armmachorelocationinfo.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armmccodeemitter.cpp}" FullName="anonymous_namespace{armmccodeemitter.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armmctargetdesc.cpp}" FullName="anonymous_namespace{armmctargetdesc.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armunwindopasm.cpp}" FullName="anonymous_namespace{armunwindopasm.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armwincoffobjectwriter.cpp}" FullName="anonymous_namespace{armwincoffobjectwriter.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armwincoffstreamer.cpp}" FullName="anonymous_namespace{armwincoffstreamer.cpp}">
          <Val>8 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{armdisassembler.cpp}" FullName="anonymous_namespace{armdisassembler.cpp}">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>4 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasanalysiscounter.cpp}" FullName="anonymous_namespace{aliasanalysiscounter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasanalysisevaluator.cpp}" FullName="anonymous_namespace{aliasanalysisevaluator.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aliasdebugger.cpp}" FullName="anonymous_namespace{aliasdebugger.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{aliassettracker.cpp}" FullName="anonymous_namespace{aliassettracker.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{basicaliasanalysis.cpp}" FullName="anonymous_namespace{basicaliasanalysis.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{blockfrequencyinfoimpl.cpp}" FullName="anonymous_namespace{blockfrequencyinfoimpl.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{cfgprinter.cpp}" FullName="anonymous_namespace{cfgprinter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{capturetracking.cpp}" FullName="anonymous_namespace{capturetracking.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{costmodel.cpp}" FullName="anonymous_namespace{costmodel.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{delinearization.cpp}" FullName="anonymous_namespace{delinearization.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{domprinter.cpp}" FullName="anonymous_namespace{domprinter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{instcount.cpp}" FullName="anonymous_namespace{instcount.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{lazyvalueinfo.cpp}" FullName="anonymous_namespace{lazyvalueinfo.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{lint.cpp}" FullName="anonymous_namespace{lint.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{loopinfo.cpp}" FullName="anonymous_namespace{loopinfo.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{looppass.cpp}" FullName="anonymous_namespace{looppass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{memdepprinter.cpp}" FullName="anonymous_namespace{memdepprinter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{moduledebuginfoprinter.cpp}" FullName="anonymous_namespace{moduledebuginfoprinter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{noaliasanalysis.cpp}" FullName="anonymous_namespace{noaliasanalysis.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{regionpass.cpp}" FullName="anonymous_namespace{regionpass.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{regionprinter.cpp}" FullName="anonymous_namespace{regionprinter.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolution.cpp}" FullName="anonymous_namespace{scalarevolution.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolutionaliasanalysis.cpp}" FullName="anonymous_namespace{scalarevolutionaliasanalysis.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolutionexpander.cpp}" FullName="anonymous_namespace{scalarevolutionexpander.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{scalarevolutionnormalization.cpp}" FullName="anonymous_namespace{scalarevolutionnormalization.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{targettransforminfo.cpp}" FullName="anonymous_namespace{targettransforminfo.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{typebasedaliasanalysis.cpp}" FullName="anonymous_namespace{typebasedaliasanalysis.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{scopednoaliasaa.cpp}" FullName="anonymous_namespace{scopednoaliasaa.cpp}">
          <Val>5 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{asmprinter.cpp}" FullName="anonymous_namespace{asmprinter.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{asmprinterinlineasm.cpp}" FullName="anonymous_namespace{asmprinterinlineasm.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{erlanggcprinter.cpp}" FullName="anonymous_namespace{erlanggcprinter.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{ocamlgcprinter.cpp}" FullName="anonymous_namespace{ocamlgcprinter.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="llvm.anonymous_namespace{bitcodereader.cpp}" FullName="llvm.anonymous_namespace{bitcodereader.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="anonymous_namespace{bitcodereader.cpp}" FullName="anonymous_namespace{bitcodereader.cpp}">
          <Val>3 namespaces</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 namespaces</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Projects with poor cohesion (RelationalCohesion)" ContentTruncatedThreshold="100" FullName="Architecture and Layering \ Projects with poor cohesion (RelationalCohesion)" QueryId="Query3256120890" NbNodeMatched="14" NbNodeTested="198" KindOfNode=" projects">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Projects&amp;#0160;with&amp;#0160;poor&amp;#0160;cohesion&amp;#0160;(RelationalCohesion)&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Projects&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbTypes&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;20&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;Relational&amp;#0160;Cohesion&amp;#0160;metrics&amp;#0160;is&amp;#0160;relevant&amp;#0160;only&amp;#0160;if&amp;#0160;there&amp;#0160;are&amp;#0160;several&amp;#0160;types&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;RelationalCohesion&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1.5&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;RelationalCohesion&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;4.0&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbTypes&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;a&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;RelationalCohesion&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;As&amp;#0160;classes&amp;#0160;inside&amp;#0160;an&amp;#0160;project&amp;#0160;should&amp;#0160;be&amp;#0160;strongly&amp;#0160;related,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;the&amp;#0160;cohesion&amp;#0160;should&amp;#0160;be&amp;#0160;high.&amp;#0160;On&amp;#0160;the&amp;#0160;other&amp;#0160;hand,&amp;#0160;a&amp;#0160;value&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;which&amp;#0160;is&amp;#0160;too&amp;#0160;high&amp;#0160;may&amp;#0160;indicate&amp;#0160;over-coupling.&amp;#0160;A&amp;#0160;good&amp;#0160;range&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;for&amp;#0160;RelationalCohesion&amp;#0160;is&amp;#0160;1.5&amp;#0160;to&amp;#0160;4.0.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;the&amp;#0160;definition&amp;#0160;of&amp;#0160;the&amp;#0160;RelationalCohesion&amp;#0160;metric&amp;#0160;here&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://www.cppdepend.com/Metrics.aspx#RelationalCohesion" target="_blank"&gt;http://www.cppdepend.com/Metrics.aspx#RelationalCohesion&lt;/a&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>projects</Column>
        <Column># Types</Column>
        <Column>Relational cohesion</Column>
      </Columns>
      <Rows>
        <Row Name="ADTTests" FullName="ADTTests">
          <Val>344</Val>
          <Val>0.62</Val>
        </Row>
        <Row Name="AnalysisTests" FullName="AnalysisTests">
          <Val>33</Val>
          <Val>0.91</Val>
        </Row>
        <Row Name="IRTests" FullName="IRTests">
          <Val>168</Val>
          <Val>0.82</Val>
        </Row>
        <Row Name="JITTests" FullName="JITTests">
          <Val>42</Val>
          <Val>1.17</Val>
        </Row>
        <Row Name="LLVMAArch64Utils" FullName="LLVMAArch64Utils">
          <Val>34</Val>
          <Val>0.79</Val>
        </Row>
        <Row Name="LLVMCodeGen" FullName="LLVMCodeGen">
          <Val>460</Val>
          <Val>5.83</Val>
        </Row>
        <Row Name="LLVMCore" FullName="LLVMCore">
          <Val>503</Val>
          <Val>5.33</Val>
        </Row>
        <Row Name="LLVMMC" FullName="LLVMMC">
          <Val>150</Val>
          <Val>4.83</Val>
        </Row>
        <Row Name="LLVMSelectionDAG" FullName="LLVMSelectionDAG">
          <Val>155</Val>
          <Val>5.46</Val>
        </Row>
        <Row Name="LLVMTableGen" FullName="LLVMTableGen">
          <Val>71</Val>
          <Val>7.38</Val>
        </Row>
        <Row Name="LLVMTarget" FullName="LLVMTarget">
          <Val>21</Val>
          <Val>1.19</Val>
        </Row>
        <Row Name="SupportTests" FullName="SupportTests">
          <Val>395</Val>
          <Val>0.84</Val>
        </Row>
        <Row Name="UtilsTests" FullName="UtilsTests">
          <Val>24</Val>
          <Val>0.5</Val>
        </Row>
        <Row Name="llvm_headers_do_not_build" FullName="llvm_headers_do_not_build">
          <Val>256</Val>
          <Val>1.29</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>2 656</Val>
          <Val>36.97</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>189.71</Val>
          <Val>2.64</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>21</Val>
          <Val>0.5</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>503</Val>
          <Val>7.38</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>165.93</Val>
          <Val>2.4</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>27 531</Val>
          <Val>5.75</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Best Practices" FullName="Best Practices" GroupId="GroupOfRules1149631470" NbQueries="3" NbErrors="0" NbWarns="2" Status="Warn">
    <Query Status="Warn" Name="Use reinterpret_cast carrefully" ContentTruncatedThreshold="100" FullName="Best Practices \ Use reinterpret_cast carrefully" QueryId="Query271300410" NbNodeMatched="10" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Use&amp;#0160;reinterpret_cast&amp;#0160;carrefully&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Methods&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsUsing&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"Keywords.reinterpret_cast"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># lines of code (LOC)</Column>
      </Columns>
      <Rows>
        <Row Name="fixed_set(unsignedint)" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.__Globals.fixed_set (unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="fixed_set(unsignedint)" FullName="anonymous_namespace{deltaalgorithmtest.cpp}.__Globals.fixed_set (unsignedint)">
          <Val>9</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashValueBasicTest_Test.TestBody()">
          <Val>30</Val>
        </Row>
        <Row Name="assertValuesInOrder(VectorT&amp;,size_t)" FullName="anonymous_namespace{smallvectortest.cpp}.SmallVectorTest&lt;VectorT&gt; .assertValuesInOrder(VectorT&amp;,size_t)">
          <Val>19</Val>
        </Row>
        <Row Name="TestBody()" FullName="llvm.anonymous_namespace{waymarktest.cpp}.WaymarkTest_TwoBit_Test .TestBody()">
          <Val>18</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jittest.cpp}.JIT_GlobalInFunction_Test.TestBody()">
          <Val>69</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jittest.cpp}.JITTest_FarCallToKnownFunction_Test .TestBody()">
          <Val>10</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jittest.cpp} .JITTest_NonLazyCompilationStillNeedsStubs_Test.TestBody()">
          <Val>35</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jittest.cpp} .JITTest_FunctionPointersOutliveTheirCreator_Test.TestBody()">
          <Val>8</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{jittest.cpp} .JITTest_FunctionIsRecompiledAndRelinked_Test.TestBody()">
          <Val>47</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>254</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>25.4</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>8</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>69</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>19.12</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>365.44</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid using goto keyword" ContentTruncatedThreshold="100" FullName="Best Practices \ Avoid using goto keyword" QueryId="Query972956128" NbNodeMatched="10" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;using&amp;#0160;goto&amp;#0160;keyword&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Methods&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsUsing&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"Keywords.goto"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column># lines of code (LOC)</Column>
      </Columns>
      <Rows>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test .TestBody()">
          <Val>3</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test.TestBody()">
          <Val>27</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test.TestBody()">
          <Val>29</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test.TestBody()">
          <Val>39</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test.TestBody()">
          <Val>51</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test.TestBody()">
          <Val>41</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test.TestBody()">
          <Val>71</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringDeath_Test.TestBody ()">
          <Val>17</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_UnsignedValues_Test.TestBody()">
          <Val>34</Val>
        </Row>
        <Row Name="TestBody()" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_SignedValues_Test.TestBody()">
          <Val>34</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>346</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>34.6</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>3</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>71</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>17.47</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>305.24</Val>
        </Row>
      </Rows>
    </Query>
    <Group Name="Constness" FullName="Best Practices \ Constness" GroupId="GroupOfRules-1133383390" NbQueries="2" NbErrors="0" NbWarns="1" Status="Warn">
      <Query Status="Warn" Name="Use const_cast carrefully" ContentTruncatedThreshold="100" FullName="Best Practices \ Constness \ Use const_cast carrefully" QueryId="Query3748998738" NbNodeMatched="10" NbNodeTested="60268" KindOfNode=" methods">
        <QueryHtml>&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Use&amp;#0160;const_cast&amp;#0160;carrefully&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Methods&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsUsing&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;"Keywords.const_cast"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
        <Columns>
          <Column>methods</Column>
          <Column># lines of code (LOC)</Column>
        </Columns>
        <Rows>
          <Row Name="AccessNode(unsignedint)" FullName="llvm.Graph&lt;N&gt;.AccessNode(unsignedint)">
            <Val>2</Val>
          </Row>
          <Row Name="TestBody()" FullName="llvm.anonymous_namespace{scalarevolutiontest.cpp} .ScalarEvolutionsTest_SCEVMultiplyAddRecs_Test.TestBody()">
            <Val>64</Val>
          </Row>
          <Row Name="PrintDebugValueComment(constllvm::MachineInstr*,llvm::raw_ostream&amp;)" FullName="anonymous_namespace{aarch64asmprinter.cpp}.AArch64AsmPrinter .PrintDebugValueComment(constllvm::MachineInstr*,llvm::raw_ostream&amp;)">
            <Val>14</Val>
          </Row>
          <Row Name="runOnMachineFunction(llvm::MachineFunction&amp;)" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter .runOnMachineFunction(llvm::MachineFunction&amp;)">
            <Val>24</Val>
          </Row>
          <Row Name="emitGlobalAddress(constllvm::GlobalValue*,unsignedint,bool,bool ,intptr_t)" FullName="anonymous_namespace{armcodeemitter.cpp}.ARMCodeEmitter .emitGlobalAddress(constllvm::GlobalValue*,unsignedint,bool,bool ,intptr_t)">
            <Val>2</Val>
          </Row>
          <Row Name="ARMFastISel(llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel.ARMFastISel (llvm::FunctionLoweringInfo&amp;,constllvm::TargetLibraryInfo*)">
            <Val>8</Val>
          </Row>
          <Row Name="DecomposeGEPExpression(constllvm::Value*,int64_t&amp;,SmallVectorImpl&lt; &lt;anonymous&gt;::VariableGEPIndex&gt;&amp;,bool&amp;,constllvm::DataLayout*)" FullName="__Globals.DecomposeGEPExpression(constllvm::Value*,int64_t&amp; ,SmallVectorImpl&lt;&lt;anonymous&gt;::VariableGEPIndex&gt;&amp;,bool&amp; ,constllvm::DataLayout*)">
            <Val>73</Val>
          </Row>
          <Row Name="getCalledFunction(constllvm::Value*,bool)" FullName="__Globals.getCalledFunction(constllvm::Value*,bool)">
            <Val>11</Val>
          </Row>
          <Row Name="getNodeAs()" FullName="__Globals.getNodeAs()">
            <Val>3</Val>
          </Row>
          <Row Name="getPreStartForSignExtend(constllvm::SCEVAddRecExpr*,llvm::Type* ,llvm::ScalarEvolution*)" FullName="__Globals.getPreStartForSignExtend(constllvm::SCEVAddRecExpr* ,llvm::Type*,llvm::ScalarEvolution*)">
            <Val>29</Val>
          </Row>
          <Row Name="Sum:" FullName="Stat">
            <Val>230</Val>
          </Row>
          <Row Name="Average:" FullName="Stat">
            <Val>23</Val>
          </Row>
          <Row Name="Minimum:" FullName="Stat">
            <Val>2</Val>
          </Row>
          <Row Name="Maximum:" FullName="Stat">
            <Val>73</Val>
          </Row>
          <Row Name="Standard deviation:" FullName="Stat">
            <Val>24.39</Val>
          </Row>
          <Row Name="Variance:" FullName="Stat">
            <Val>595</Val>
          </Row>
        </Rows>
      </Query>
    </Group>
    <Group Name="Exception" FullName="Best Practices \ Exception" GroupId="GroupOfRules-1721894197" NbQueries="2" NbErrors="0" NbWarns="0" Status="Ok" />
  </Group>
  <Group Name="API Breaking Changes" FullName="API Breaking Changes" GroupId="GroupOfRules184218658" NbQueries="8" NbErrors="0" NbWarns="0" Status="Ok" />
  <Group Name="Code Diff Summary" FullName="Code Diff Summary" GroupId="GroupOfRules1752346574" NbQueries="25" NbErrors="0" NbWarns="0" Status="Ok" />
  <Group Name="Dead Code" FullName="Dead Code" GroupId="GroupOfRules1664296505" NbQueries="3" NbErrors="0" NbWarns="3" Status="Warn">
    <Query Status="Warn" Name="Potentially dead Types" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Dead Code \ Potentially dead Types" QueryId="Query4132454443" NbNodeMatched="1425" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Potentially&amp;#0160;dead&amp;#0160;Types&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;tt&lt;/font&gt;&lt;font color='#000000'&gt;=&lt;/font&gt;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Types&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;UsedByAny&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToHashSet&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;types&amp;#0160;unused&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesUnused&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbTypesUsingMe&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesUnused&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;tt&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
      </Columns>
      <Rows>
        <Row Name="MapVectorTest_insert_pop_Test" FullName="MapVectorTest_insert_pop_Test" />
        <Row Name="MapVectorTest_erase_Test" FullName="MapVectorTest_erase_Test" />
        <Row Name="MapVectorTest_remove_if_Test" FullName="MapVectorTest_remove_if_Test" />
        <Row Name="SmallPtrSetTest_Assignment_Test" FullName="SmallPtrSetTest_Assignment_Test" />
        <Row Name="SmallPtrSetTest_GrowthTest_Test" FullName="SmallPtrSetTest_GrowthTest_Test" />
        <Row Name="SmallPtrSetTest_CopyAndMoveTest_Test" FullName="SmallPtrSetTest_CopyAndMoveTest_Test" />
        <Row Name="SmallPtrSetTest_SwapTest_Test" FullName="SmallPtrSetTest_SwapTest_Test" />
        <Row Name="APFloatTest_isSignaling_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test" />
        <Row Name="APFloatTest_next_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test" />
        <Row Name="APFloatTest_FMA_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test" />
        <Row Name="APFloatTest_Denormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test" />
        <Row Name="APFloatTest_Zero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test" />
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test" />
        <Row Name="APFloatTest_fromZeroDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test" />
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test" />
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test" />
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test" />
        <Row Name="APFloatTest_fromDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test" />
        <Row Name="APFloatTest_fromHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test" />
        <Row Name="APFloatTest_toString_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test" />
        <Row Name="APFloatTest_toInteger_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test" />
        <Row Name="APFloatTest_makeNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test" />
        <Row Name="APFloatTest_SemanticsDeath_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test" />
        <Row Name="APFloatTest_StringDecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test" />
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test" />
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test" />
        <Row Name="APFloatTest_StringHexadecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test" />
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test" />
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test" />
        <Row Name="APFloatTest_exactInverse_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test" />
        <Row Name="APFloatTest_roundToIntegral_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test" />
        <Row Name="APFloatTest_getLargest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test" />
        <Row Name="APFloatTest_getSmallest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test" />
        <Row Name="APFloatTest_getSmallestNormalized_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test" />
        <Row Name="APFloatTest_getZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test" />
        <Row Name="APFloatTest_convert_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test" />
        <Row Name="APFloatTest_PPCDoubleDouble_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test" />
        <Row Name="APFloatTest_isNegative_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test" />
        <Row Name="APFloatTest_isNormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test" />
        <Row Name="APFloatTest_isFinite_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test" />
        <Row Name="APFloatTest_isInfinity_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test" />
        <Row Name="APFloatTest_isNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test" />
        <Row Name="APFloatTest_isFiniteNonZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test" />
        <Row Name="APFloatTest_add_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test" />
        <Row Name="APFloatTest_subtract_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test" />
        <Row Name="APFloatTest_multiply_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test" />
        <Row Name="APFloatTest_divide_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test" />
        <Row Name="APIntTest_ShiftLeftByZero_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test" />
        <Row Name="APIntTest_i128_NegativeCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test" />
        <Row Name="APIntTest_i33_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test" />
        <Row Name="APIntTest_i65_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test" />
        <Row Name="APIntTest_i128_PositiveCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test" />
        <Row Name="APIntTest_i1_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i1_Test" />
        <Row Name="APIntTest_fromString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test" />
        <Row Name="APIntTest_FromArray_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_FromArray_Test" />
        <Row Name="APIntTest_StringBitsNeeded2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded2_Test" />
        <Row Name="APIntTest_StringBitsNeeded8_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded8_Test" />
        <Row Name="APIntTest_StringBitsNeeded10_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test" />
        <Row Name="APIntTest_StringBitsNeeded16_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded16_Test" />
        <Row Name="APIntTest_toString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test" />
        <Row Name="APIntTest_Log2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Log2_Test" />
        <Row Name="APIntTest_magic_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magic_Test" />
        <Row Name="APIntTest_magicu_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magicu_Test" />
        <Row Name="APIntTest_StringDeath_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringDeath_Test" />
        <Row Name="APIntTest_mul_clear_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_mul_clear_Test" />
        <Row Name="APIntTest_Rotate_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test" />
        <Row Name="APIntTest_Splat_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Splat_Test" />
        <Row Name="APIntTest_tcDecrement_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_tcDecrement_Test" />
        <Row Name="APIntTest_arrayAccess_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_arrayAccess_Test" />
        <Row Name="APIntTest_LargeAPIntConstruction_Test" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test" />
        <Row Name="APIntTest_nearestLogBase2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_nearestLogBase2_Test" />
        <Row Name="APSIntTest_MoveTest_Test" FullName="anonymous_namespace{apsinttest.cpp}.APSIntTest_MoveTest_Test" />
        <Row Name="ArrayRefTest_AllocatorCopy_Test" FullName="llvm.ArrayRefTest_AllocatorCopy_Test" />
        <Row Name="ArrayRefTest_DropBack_Test" FullName="llvm.ArrayRefTest_DropBack_Test" />
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test" />
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test" />
        <Row Name="IntrusiveRefCntPtrInfo&lt;llvm::InterceptRefCounted&gt;" FullName="llvm.IntrusiveRefCntPtrInfo&lt;llvm::InterceptRefCounted&gt;" />
        <Row Name="IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test" FullName="llvm.IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test" />
        <Row Name="GraphTraits&lt;Graph&lt;N&gt;&gt;" FullName="llvm.GraphTraits&lt;Graph&lt;N&gt;&gt;" />
        <Row Name="SCCIteratorTest_AllSmallGraphs_Test" FullName="llvm.SCCIteratorTest_AllSmallGraphs_Test" />
        <Row Name="is_hashable_data&lt;llvm::LargeTestInteger&gt;" FullName="llvm.hashing.detail.is_hashable_data&lt;llvm::LargeTestInteger&gt;" />
        <Row Name="BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_ProxyIndex_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_ProxyIndex_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_BinOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_BinOps_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_RangeOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_RangeOps_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="DAGDeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp} .DAGDeltaAlgorithmTest_Basic_Test" />
        <Row Name="DeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{deltaalgorithmtest.cpp} .DeltaAlgorithmTest_Basic_Test" />
        <Row Name="CtorTesterMapInfo" FullName="anonymous_namespace{densemaptest.cpp}.CtorTesterMapInfo" />
        <Row Name="DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_ClearTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_ClearTest_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_EraseTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_EraseTest2_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest2_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_InsertTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_InsertTest_Test &lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
    <Query Status="Warn" Name="Potentially dead Methods" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Dead Code \ Potentially dead Methods" QueryId="Query4205048126" NbNodeMatched="4234" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Potentially&amp;#0160;dead&amp;#0160;Methods&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Filter&amp;#0160;procedure&amp;#0160;for&amp;#0160;methods&amp;#0160;that&amp;#0160;should'nt&amp;#0160;be&amp;#0160;considered&amp;#0160;as&amp;#0160;dead&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;canMethodBeConsideredAsDeadProc&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#2B91BD'&gt;Func&lt;/font&gt;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&lt;font color='#2B91BD'&gt;IMethod&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;bool&lt;/font&gt;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsPublic&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Public&amp;#0160;methods&amp;#0160;might&amp;#0160;be&amp;#0160;used&amp;#0160;by&amp;#0160;client&amp;#0160;applications&amp;#0160;of&amp;#0160;your&amp;#0160;Projects.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEntryPoint&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Main()&amp;#0160;method&amp;#0160;is&amp;#0160;not&amp;#0160;used&amp;#0160;by-design.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsClassConstructor&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsVirtual&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Only&amp;#0160;check&amp;#0160;for&amp;#0160;non&amp;#0160;virtual&amp;#0160;method&amp;#0160;that&amp;#0160;are&amp;#0160;not&amp;#0160;seen&amp;#0160;as&amp;#0160;used&amp;#0160;in&amp;#0160;IL.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsConstructor&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Don't&amp;#0160;take&amp;#0160;account&amp;#0160;of&amp;#0160;protected&amp;#0160;ctor&amp;#0160;that&amp;#0160;might&amp;#0160;be&amp;#0160;call&amp;#0160;by&amp;#0160;a&amp;#0160;derived&amp;#0160;ctors.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsProtected&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NameLike&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;@"^On"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//Exclude&amp;#0160;Events&amp;#0160;like&amp;#0160;MFC&amp;#0160;ones&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Get&amp;#0160;methods&amp;#0160;unused&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methodsUnused&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethodsCallingMe&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;canMethodBeConsideredAsDeadProc&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Dead&amp;#0160;methods&amp;#0160;=&amp;#0160;methods&amp;#0160;used&amp;#0160;only&amp;#0160;by&amp;#0160;unused&amp;#0160;methods&amp;#0160;(recursive)&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;deadMethodsMetric&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methodsUnused&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FillIterative&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;methods&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;Unique&amp;#0160;loop,&amp;#0160;just&amp;#0160;to&amp;#0160;let&amp;#0160;a&amp;#0160;chance&amp;#0160;to&amp;#0160;build&amp;#0160;the&amp;#0160;hashset.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;o&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&lt;font color='#000000'&gt;[&lt;/font&gt;&lt;font color='#000000'&gt;]&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;object&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Use&amp;#0160;a&amp;#0160;hashet&amp;#0160;to&amp;#0160;make&amp;#0160;Intersect&amp;#0160;calls&amp;#0160;much&amp;#0160;faster!&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToHashSet&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;codeBase&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Application&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;UsedByAny&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;methods&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Except&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;methods&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;canMethodBeConsideredAsDeadProc&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;methods&amp;#0160;called&amp;#0160;only&amp;#0160;by&amp;#0160;methods&amp;#0160;already&amp;#0160;considered&amp;#0160;as&amp;#0160;dead&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;hashset&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Intersect&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MethodsCallingMe&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethodsCallingMe&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Intersect&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;deadMethodsMetric&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DefinitionDomain&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;MethodsCallingMe&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;depth&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;deadMethodsMetric&lt;/font&gt;&lt;font color='#000000'&gt;[&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;]&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>MethodsCallingMe</Column>
        <Column>depth</Column>
      </Columns>
      <Rows>
        <Row Name="MapVectorTest_insert_pop_Test(constMapVectorTest_insert_pop_Test&amp;)" FullName="MapVectorTest_insert_pop_Test.MapVectorTest_insert_pop_Test (constMapVectorTest_insert_pop_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constMapVectorTest_insert_pop_Test&amp;)" FullName="MapVectorTest_insert_pop_Test.operator= (constMapVectorTest_insert_pop_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="MapVectorTest_erase_Test(constMapVectorTest_erase_Test&amp;)" FullName="MapVectorTest_erase_Test.MapVectorTest_erase_Test (constMapVectorTest_erase_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constMapVectorTest_erase_Test&amp;)" FullName="MapVectorTest_erase_Test.operator=(constMapVectorTest_erase_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="MapVectorTest_remove_if_Test(constMapVectorTest_remove_if_Test&amp;)" FullName="MapVectorTest_remove_if_Test.MapVectorTest_remove_if_Test (constMapVectorTest_remove_if_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constMapVectorTest_remove_if_Test&amp;)" FullName="MapVectorTest_remove_if_Test.operator= (constMapVectorTest_remove_if_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="SmallPtrSetTest_Assignment_Test(constSmallPtrSetTest_Assignment_Test&amp;)" FullName="SmallPtrSetTest_Assignment_Test.SmallPtrSetTest_Assignment_Test (constSmallPtrSetTest_Assignment_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constSmallPtrSetTest_Assignment_Test&amp;)" FullName="SmallPtrSetTest_Assignment_Test.operator= (constSmallPtrSetTest_Assignment_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="SmallPtrSetTest_GrowthTest_Test(constSmallPtrSetTest_GrowthTest_Test&amp;)" FullName="SmallPtrSetTest_GrowthTest_Test.SmallPtrSetTest_GrowthTest_Test (constSmallPtrSetTest_GrowthTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constSmallPtrSetTest_GrowthTest_Test&amp;)" FullName="SmallPtrSetTest_GrowthTest_Test.operator= (constSmallPtrSetTest_GrowthTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="SmallPtrSetTest_CopyAndMoveTest_Test (constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)" FullName="SmallPtrSetTest_CopyAndMoveTest_Test .SmallPtrSetTest_CopyAndMoveTest_Test (constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)" FullName="SmallPtrSetTest_CopyAndMoveTest_Test.operator= (constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="SmallPtrSetTest_SwapTest_Test(constSmallPtrSetTest_SwapTest_Test&amp;)" FullName="SmallPtrSetTest_SwapTest_Test.SmallPtrSetTest_SwapTest_Test (constSmallPtrSetTest_SwapTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(constSmallPtrSetTest_SwapTest_Test&amp;)" FullName="SmallPtrSetTest_SwapTest_Test.operator= (constSmallPtrSetTest_SwapTest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isSignaling_Test(const&lt;anonymous &gt;::APFloatTest_isSignaling_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test .APFloatTest_isSignaling_Test(const&lt;anonymous &gt;::APFloatTest_isSignaling_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isSignaling_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isSignaling_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_next_Test(const&lt;anonymous&gt;::APFloatTest_next_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test .APFloatTest_next_Test(const&lt;anonymous&gt;::APFloatTest_next_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_next_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test.operator= (const&lt;anonymous&gt;::APFloatTest_next_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_FMA_Test(const&lt;anonymous&gt;::APFloatTest_FMA_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test .APFloatTest_FMA_Test(const&lt;anonymous&gt;::APFloatTest_FMA_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_FMA_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test.operator= (const&lt;anonymous&gt;::APFloatTest_FMA_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_Denormal_Test(const&lt;anonymous&gt;::APFloatTest_Denormal_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test .APFloatTest_Denormal_Test(const&lt;anonymous &gt;::APFloatTest_Denormal_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_Denormal_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test .operator=(const&lt;anonymous&gt;::APFloatTest_Denormal_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_Zero_Test(const&lt;anonymous&gt;::APFloatTest_Zero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test .APFloatTest_Zero_Test(const&lt;anonymous&gt;::APFloatTest_Zero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_Zero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test.operator= (const&lt;anonymous&gt;::APFloatTest_Zero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test(const&lt;anonymous &gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test .APFloatTest_DecimalStringsWithoutNullTerminators_Test(const&lt;anonymous &gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test.operator=(const &lt;anonymous&gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test .APFloatTest_fromZeroDecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_fromZeroDecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test.operator=(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test .APFloatTest_fromZeroDecimalSingleExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test.operator=(const &lt;anonymous&gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test .APFloatTest_fromZeroDecimalLargeExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test.operator=(const &lt;anonymous&gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test .APFloatTest_fromZeroHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test.operator=(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromDecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromDecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test.APFloatTest_fromDecimalString_Test (const&lt;anonymous&gt;::APFloatTest_fromDecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_fromDecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test.operator=(const&lt;anonymous &gt;::APFloatTest_fromDecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test .APFloatTest_fromHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromHexadecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_fromHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test.operator=(const&lt;anonymous &gt;::APFloatTest_fromHexadecimalString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_toString_Test(const&lt;anonymous&gt;::APFloatTest_toString_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test .APFloatTest_toString_Test(const&lt;anonymous &gt;::APFloatTest_toString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_toString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test .operator=(const&lt;anonymous&gt;::APFloatTest_toString_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_toInteger_Test(const&lt;anonymous &gt;::APFloatTest_toInteger_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test .APFloatTest_toInteger_Test(const&lt;anonymous &gt;::APFloatTest_toInteger_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_toInteger_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test .operator=(const&lt;anonymous&gt;::APFloatTest_toInteger_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_makeNaN_Test(const&lt;anonymous&gt;::APFloatTest_makeNaN_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test .APFloatTest_makeNaN_Test(const&lt;anonymous&gt;::APFloatTest_makeNaN_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_makeNaN_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test .operator=(const&lt;anonymous&gt;::APFloatTest_makeNaN_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_SemanticsDeath_Test(const&lt;anonymous &gt;::APFloatTest_SemanticsDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test .APFloatTest_SemanticsDeath_Test(const&lt;anonymous &gt;::APFloatTest_SemanticsDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_SemanticsDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test .operator=(const&lt;anonymous&gt;::APFloatTest_SemanticsDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test .APFloatTest_StringDecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_StringDecimalDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test.operator=(const&lt;anonymous &gt;::APFloatTest_StringDecimalDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test .APFloatTest_StringDecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test.operator=(const &lt;anonymous&gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test .APFloatTest_StringDecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test.operator=(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test .APFloatTest_StringHexadecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test.operator=(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test .APFloatTest_StringHexadecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test.operator=(const &lt;anonymous&gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test .APFloatTest_StringHexadecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test.operator=(const &lt;anonymous&gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_exactInverse_Test(const&lt;anonymous &gt;::APFloatTest_exactInverse_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test .APFloatTest_exactInverse_Test(const&lt;anonymous &gt;::APFloatTest_exactInverse_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_exactInverse_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test .operator=(const&lt;anonymous&gt;::APFloatTest_exactInverse_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_roundToIntegral_Test(const&lt;anonymous &gt;::APFloatTest_roundToIntegral_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test .APFloatTest_roundToIntegral_Test(const&lt;anonymous &gt;::APFloatTest_roundToIntegral_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_roundToIntegral_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test .operator=(const&lt;anonymous&gt;::APFloatTest_roundToIntegral_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_getLargest_Test(const&lt;anonymous &gt;::APFloatTest_getLargest_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test .APFloatTest_getLargest_Test(const&lt;anonymous &gt;::APFloatTest_getLargest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_getLargest_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test .operator=(const&lt;anonymous&gt;::APFloatTest_getLargest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_getSmallest_Test(const&lt;anonymous &gt;::APFloatTest_getSmallest_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test .APFloatTest_getSmallest_Test(const&lt;anonymous &gt;::APFloatTest_getSmallest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_getSmallest_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test .operator=(const&lt;anonymous&gt;::APFloatTest_getSmallest_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test(const&lt;anonymous &gt;::APFloatTest_getSmallestNormalized_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test .APFloatTest_getSmallestNormalized_Test(const&lt;anonymous &gt;::APFloatTest_getSmallestNormalized_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_getSmallestNormalized_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test.operator=(const&lt;anonymous &gt;::APFloatTest_getSmallestNormalized_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_getZero_Test(const&lt;anonymous&gt;::APFloatTest_getZero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test .APFloatTest_getZero_Test(const&lt;anonymous&gt;::APFloatTest_getZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_getZero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test .operator=(const&lt;anonymous&gt;::APFloatTest_getZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_convert_Test(const&lt;anonymous&gt;::APFloatTest_convert_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test .APFloatTest_convert_Test(const&lt;anonymous&gt;::APFloatTest_convert_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_convert_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test .operator=(const&lt;anonymous&gt;::APFloatTest_convert_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_PPCDoubleDouble_Test(const&lt;anonymous &gt;::APFloatTest_PPCDoubleDouble_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test .APFloatTest_PPCDoubleDouble_Test(const&lt;anonymous &gt;::APFloatTest_PPCDoubleDouble_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_PPCDoubleDouble_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test .operator=(const&lt;anonymous&gt;::APFloatTest_PPCDoubleDouble_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isNegative_Test(const&lt;anonymous &gt;::APFloatTest_isNegative_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test .APFloatTest_isNegative_Test(const&lt;anonymous &gt;::APFloatTest_isNegative_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isNegative_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isNegative_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isNormal_Test(const&lt;anonymous&gt;::APFloatTest_isNormal_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test .APFloatTest_isNormal_Test(const&lt;anonymous &gt;::APFloatTest_isNormal_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isNormal_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isNormal_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isFinite_Test(const&lt;anonymous&gt;::APFloatTest_isFinite_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test .APFloatTest_isFinite_Test(const&lt;anonymous &gt;::APFloatTest_isFinite_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isFinite_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isFinite_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isInfinity_Test(const&lt;anonymous &gt;::APFloatTest_isInfinity_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test .APFloatTest_isInfinity_Test(const&lt;anonymous &gt;::APFloatTest_isInfinity_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isInfinity_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isInfinity_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isNaN_Test(const&lt;anonymous&gt;::APFloatTest_isNaN_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test .APFloatTest_isNaN_Test(const&lt;anonymous&gt;::APFloatTest_isNaN_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isNaN_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test.operator= (const&lt;anonymous&gt;::APFloatTest_isNaN_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_isFiniteNonZero_Test(const&lt;anonymous &gt;::APFloatTest_isFiniteNonZero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test .APFloatTest_isFiniteNonZero_Test(const&lt;anonymous &gt;::APFloatTest_isFiniteNonZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_isFiniteNonZero_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test .operator=(const&lt;anonymous&gt;::APFloatTest_isFiniteNonZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_add_Test(const&lt;anonymous&gt;::APFloatTest_add_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test .APFloatTest_add_Test(const&lt;anonymous&gt;::APFloatTest_add_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_add_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test.operator= (const&lt;anonymous&gt;::APFloatTest_add_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_subtract_Test(const&lt;anonymous&gt;::APFloatTest_subtract_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test .APFloatTest_subtract_Test(const&lt;anonymous &gt;::APFloatTest_subtract_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_subtract_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test .operator=(const&lt;anonymous&gt;::APFloatTest_subtract_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_multiply_Test(const&lt;anonymous&gt;::APFloatTest_multiply_Test&amp; )" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test .APFloatTest_multiply_Test(const&lt;anonymous &gt;::APFloatTest_multiply_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_multiply_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test .operator=(const&lt;anonymous&gt;::APFloatTest_multiply_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APFloatTest_divide_Test(const&lt;anonymous&gt;::APFloatTest_divide_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test .APFloatTest_divide_Test(const&lt;anonymous&gt;::APFloatTest_divide_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APFloatTest_divide_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test.operator= (const&lt;anonymous&gt;::APFloatTest_divide_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APIntTest_ShiftLeftByZero_Test(const&lt;anonymous &gt;::APIntTest_ShiftLeftByZero_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test .APIntTest_ShiftLeftByZero_Test(const&lt;anonymous &gt;::APIntTest_ShiftLeftByZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APIntTest_ShiftLeftByZero_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test .operator=(const&lt;anonymous&gt;::APIntTest_ShiftLeftByZero_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APIntTest_i128_NegativeCount_Test(const&lt;anonymous &gt;::APIntTest_i128_NegativeCount_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test .APIntTest_i128_NegativeCount_Test(const&lt;anonymous &gt;::APIntTest_i128_NegativeCount_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APIntTest_i128_NegativeCount_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test .operator=(const&lt;anonymous&gt;::APIntTest_i128_NegativeCount_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="APIntTest_i33_Count_Test(const&lt;anonymous&gt;::APIntTest_i33_Count_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test .APIntTest_i33_Count_Test(const&lt;anonymous&gt;::APIntTest_i33_Count_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="operator=(const&lt;anonymous&gt;::APIntTest_i33_Count_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test.operator= (const&lt;anonymous&gt;::APIntTest_i33_Count_Test&amp;)">
          <Val>0 method</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>536</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0.13</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>4</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0.44</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0.19</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Potentially dead Fields" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Dead Code \ Potentially dead Fields" QueryId="Query3796894421" NbNodeMatched="876" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Potentially&amp;#0160;dead&amp;#0160;Fields&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbMethodsUsingMe&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsPublic&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Although&amp;#0160;not&amp;#0160;recommended,&amp;#0160;public&amp;#0160;fields&amp;#0160;might&amp;#0160;be&amp;#0160;used&amp;#0160;by&amp;#0160;client&amp;#0160;applications&amp;#0160;of&amp;#0160;your&amp;#0160;Projects.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEnumValue&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;If&amp;#0160;you&amp;#0160;don't&amp;#0160;want&amp;#0160;to&amp;#0160;link&amp;#0160;CppDepend.API.dll,&amp;#0160;you&amp;#0160;can&amp;#0160;use&amp;#0160;your&amp;#0160;own&amp;#0160;IsNotDeadCodeAttribute&amp;#0160;and&amp;#0160;adapt&amp;#0160;this&amp;#0160;rule.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
      </Columns>
      <Rows>
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="test_info_" FullName="MapVectorTest_insert_pop_Test.test_info_" />
        <Row Name="test_info_" FullName="MapVectorTest_erase_Test.test_info_" />
        <Row Name="test_info_" FullName="MapVectorTest_remove_if_Test.test_info_" />
        <Row Name="test_info_" FullName="SmallPtrSetTest_Assignment_Test.test_info_" />
        <Row Name="test_info_" FullName="SmallPtrSetTest_GrowthTest_Test.test_info_" />
        <Row Name="test_info_" FullName="SmallPtrSetTest_CopyAndMoveTest_Test.test_info_" />
        <Row Name="test_info_" FullName="SmallPtrSetTest_SwapTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i1_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_FromArray_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded2_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded8_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded16_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Log2_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magic_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magicu_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringDeath_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_mul_clear_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Splat_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_tcDecrement_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_arrayAccess_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_nearestLogBase2_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{apsinttest.cpp}.APSIntTest_MoveTest_Test .test_info_" />
        <Row Name="test_info_" FullName="llvm.ArrayRefTest_AllocatorCopy_Test.test_info_" />
        <Row Name="test_info_" FullName="llvm.ArrayRefTest_DropBack_Test.test_info_" />
        <Row Name="test_info_" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test .test_info_" />
        <Row Name="test_info_" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test.test_info_" />
        <Row Name="test_info_" FullName="llvm.IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test.test_info_" />
        <Row Name="test_info_" FullName="llvm.SCCIteratorTest_AllSmallGraphs_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp} .DAGDeltaAlgorithmTest_Basic_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{deltaalgorithmtest.cpp} .DeltaAlgorithmTest_Basic_Test.test_info_" />
        <Row Name="Map" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;.Map" />
        <Row Name="test_info_" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_FindAsTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_SmallDenseMapGrowTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{densesettest.cpp} .DenseSetTest_DoubleEntrySetTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{foldingset.cpp} .FoldingSetTest_UnalignedStringTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashValueBasicTest_Test.test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{hashingtest.cpp}.HashingTest_HashValueStdPair_Test .test_info_" />
        <Row Name="test_info_" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashValueStdString_Test.test_info_" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
  </Group>
  <Group Name="Visibility" FullName="Visibility" GroupId="GroupOfRules-844618394" NbQueries="2" NbErrors="0" NbWarns="2" Status="Warn">
    <Query Status="Warn" Name="Fields should be declared as private" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Visibility \ Fields should be declared as private" QueryId="Query1467134360" NbNodeMatched="7791" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Fields&amp;#0160;should&amp;#0160;be&amp;#0160;declared&amp;#0160;as&amp;#0160;private&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsPrivate&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;These&amp;#0160;conditions&amp;#0160;filter&amp;#0160;cases&amp;#0160;where&amp;#0160;fields&amp;#0160;&lt;br/&gt;&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;doesn't&amp;#0160;represent&amp;#0160;state&amp;#0160;that&amp;#0160;should&amp;#0160;be&amp;#0160;encapsulated.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEnumValue&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
      </Columns>
      <Rows>
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="arr" FullName="llvm.LargeTestInteger.arr" />
        <Row Name="x" FullName="llvm.NonPOD.x" />
        <Row Name="y" FullName="llvm.NonPOD.y" />
        <Row Name="Released" FullName="llvm.InterceptRefCounted.Released" />
        <Row Name="Retained" FullName="llvm.InterceptRefCounted.Retained" />
        <Row Name="gtest_BitVectorTest_TrivialOperation_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_TrivialOperation_registered_" />
        <Row Name="gtest_BitVectorTest_CompoundAssignment_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_CompoundAssignment_registered_" />
        <Row Name="gtest_BitVectorTest_ProxyIndex_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_ProxyIndex_registered_" />
        <Row Name="gtest_BitVectorTest_PortableBitMask_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_PortableBitMask_registered_" />
        <Row Name="gtest_BitVectorTest_BinOps_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_BinOps_registered_" />
        <Row Name="gtest_BitVectorTest_RangeOps_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_RangeOps_registered_" />
        <Row Name="gtest_BitVectorTest_CompoundTestReset_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_CompoundTestReset_registered_" />
        <Row Name="gtest_DenseMapTest_EmptyIntMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EmptyIntMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_ConstEmptyMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ConstEmptyMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_SingleEntryMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_SingleEntryMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_ClearTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ClearTest_registered_" />
        <Row Name="gtest_DenseMapTest_EraseTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EraseTest_registered_" />
        <Row Name="gtest_DenseMapTest_EraseTest2_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EraseTest2_registered_" />
        <Row Name="gtest_DenseMapTest_InsertTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_InsertTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorNotSmallTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorNotSmallTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorFromDefaultTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorFromDefaultTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorFromEmptyTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorFromEmptyTest_registered_" />
        <Row Name="gtest_DenseMapTest_AssignmentTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_AssignmentTest_registered_" />
        <Row Name="gtest_DenseMapTest_SwapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_SwapTest_registered_" />
        <Row Name="gtest_DenseMapTest_IterationTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_IterationTest_registered_" />
        <Row Name="gtest_DenseMapTest_ConstIteratorTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ConstIteratorTest_registered_" />
        <Row Name="Map" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;.Map" />
        <Row Name="dummy_key_ptr" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;.dummy_key_ptr" />
        <Row Name="dummy_value_ptr" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;.dummy_value_ptr" />
        <Row Name="value" FullName="anonymous_namespace{hashingtest.cpp}.HashableDummy.value" />
        <Row Name="Value" FullName="anonymous_namespace{ilisttest.cpp}.Node.Value" />
        <Row Name="buffer" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest.buffer" />
        <Row Name="counter" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest+MyIter .counter" />
        <Row Name="ptr" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest+MyIter.ptr" />
        <Row Name="CopyConstructions" FullName="anonymous_namespace{optionaltest.cpp}.NonDefaultConstructible .CopyConstructions" />
        <Row Name="Destructions" FullName="anonymous_namespace{optionaltest.cpp}.NonDefaultConstructible .Destructions" />
        <Row Name="CopyAssignments" FullName="anonymous_namespace{optionaltest.cpp}.NonDefaultConstructible .CopyAssignments" />
        <Row Name="MoveConstructions" FullName="anonymous_namespace{optionaltest.cpp}.MoveOnly.MoveConstructions" />
        <Row Name="Destructions" FullName="anonymous_namespace{optionaltest.cpp}.MoveOnly.Destructions" />
        <Row Name="MoveAssignments" FullName="anonymous_namespace{optionaltest.cpp}.MoveOnly.MoveAssignments" />
        <Row Name="val" FullName="anonymous_namespace{optionaltest.cpp}.MoveOnly.val" />
        <Row Name="f" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.f" />
        <Row Name="i" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.i" />
        <Row Name="a" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.a" />
        <Row Name="b" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.b" />
        <Row Name="c" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.c" />
        <Row Name="n" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest.n" />
        <Row Name="theString" FullName="anonymous_namespace{smallstringtest.cpp}.SmallStringTest.theString" />
        <Row Name="gtest_SmallVectorTest_EmptyVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EmptyVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_PushPopTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_PushPopTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ClearTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ClearTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeShrinkTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeShrinkTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeGrowTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeGrowTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeWithElementsTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeWithElementsTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeFillTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeFillTest_registered_" />
        <Row Name="gtest_SmallVectorTest_OverflowTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_OverflowTest_registered_" />
        <Row Name="gtest_SmallVectorTest_IterationTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_IterationTest_registered_" />
        <Row Name="gtest_SmallVectorTest_SwapTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_SwapTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AppendTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AppendTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AppendRepeatedTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AppendRepeatedTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AssignTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AssignTest_registered_" />
        <Row Name="gtest_SmallVectorTest_MoveAssignTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_MoveAssignTest_registered_" />
        <Row Name="gtest_SmallVectorTest_EraseTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EraseTest_registered_" />
        <Row Name="gtest_SmallVectorTest_EraseRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EraseRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertCopy_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertCopy_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedAtEndTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedAtEndTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedEmptyTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedEmptyTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRangeAtEndTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRangeAtEndTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertEmptyRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertEmptyRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ComparisonTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ComparisonTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ConstVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ConstVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_DirectVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_DirectVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_IteratorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_IteratorTest_registered_" />
        <Row Name="theVector" FullName="anonymous_namespace{smallvectortest.cpp}.SmallVectorTest&lt;VectorT&gt; .theVector" />
        <Row Name="otherVector" FullName="anonymous_namespace{smallvectortest.cpp}.SmallVectorTest&lt;VectorT&gt; .otherVector" />
        <Row Name="x" FullName="anonymous_namespace{smallvectortest.cpp}.notassignable.x" />
        <Row Name="hasValue" FullName="anonymous_namespace{smallvectortest.cpp}.MovedFrom.hasValue" />
        <Row Name="Value" FullName="anonymous_namespace{sparsemultisettest.cpp}.Alt.Value" />
        <Row Name="Value" FullName="anonymous_namespace{sparsesettest.cpp}.Alt.Value" />
        <Row Name="testMap" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest.testMap" />
        <Row Name="testKey" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest.testKey" />
        <Row Name="testValue" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest.testValue" />
        <Row Name="testKeyFirst" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest.testKeyFirst" />
        <Row Name="testKeyLength" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest.testKeyLength" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
    <Query Status="Warn" Name="Constructors of abstract classes should be declared as protected or private" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Visibility \ Constructors of abstract classes should be declared as protected or private" QueryId="Query4182113493" NbNodeMatched="118" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Constructors&amp;#0160;of&amp;#0160;abstract&amp;#0160;classes&amp;#0160;should&amp;#0160;be&amp;#0160;declared&amp;#0160;as&amp;#0160;protected&amp;#0160;or&amp;#0160;private&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Constructors&amp;#0160;of&amp;#0160;an&amp;#0160;abstract&amp;#0160;class&amp;#0160;can&amp;#0160;only&amp;#0160;be&amp;#0160;accessed&amp;#0160;from&amp;#0160;this&amp;#0160;class&amp;#0160;and&amp;#0160;derived&amp;#0160;class.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Declaring&amp;#0160;such&amp;#0160;a&amp;#0160;constructor&amp;#0160;with&amp;#0160;another&amp;#0160;visibility&amp;#0160;level&amp;#0160;is&amp;#0160;useless&amp;#0160;and&amp;#0160;potentially&amp;#0160;misleading.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsClass&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsAbstract&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctors&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Constructors&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;c&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;c&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsProtected&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;c&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsPrivate&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctors&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;ctors&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Notice&amp;#0160;that&amp;#0160;if&amp;#0160;a&amp;#0160;constructor&amp;#0160;of&amp;#0160;an&amp;#0160;abstract&amp;#0160;class&amp;#0160;is&amp;#0160;declared&amp;#0160;as&amp;#0160;private,&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;it&amp;#0160;can&amp;#0160;only&amp;#0160;be&amp;#0160;accessed&amp;#0160;from&amp;#0160;derived&amp;#0160;classes&amp;#0160;nested&amp;#0160;in&amp;#0160;the&amp;#0160;abstract&amp;#0160;class.&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>ctors</Column>
      </Columns>
      <Rows>
        <Row Name="ExprAST" FullName="anonymous_namespace{toy.cpp}.ExprAST">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ExprAST" FullName="anonymous_namespace{toy.cpp}.ExprAST">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ExprAST" FullName="anonymous_namespace{toy.cpp}.ExprAST">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ExprAST" FullName="anonymous_namespace{toy.cpp}.ExprAST">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ExprAST" FullName="anonymous_namespace{toy.cpp}.ExprAST">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ARMBaseInstrInfo" FullName="llvm.ARMBaseInstrInfo">
          <Val>2 methods</Val>
        </Row>
        <Row Name="LibCallInfo" FullName="llvm.LibCallInfo">
          <Val>1 method</Val>
        </Row>
        <Row Name="LoopPass" FullName="llvm.LoopPass">
          <Val>2 methods</Val>
        </Row>
        <Row Name="RegionPass" FullName="llvm.RegionPass">
          <Val>2 methods</Val>
        </Row>
        <Row Name="TargetTransformInfo" FullName="llvm.TargetTransformInfo">
          <Val>2 methods</Val>
        </Row>
        <Row Name="AsmPrinterHandler" FullName="llvm.AsmPrinterHandler">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DIEValue" FullName="llvm.DIEValue">
          <Val>1 method</Val>
        </Row>
        <Row Name="ByteStreamer" FullName="llvm.ByteStreamer">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DwarfUnit" FullName="llvm.DwarfUnit">
          <Val>1 method</Val>
        </Row>
        <Row Name="AntiDepBreaker" FullName="llvm.AntiDepBreaker">
          <Val>2 methods</Val>
        </Row>
        <Row Name="Spiller" FullName="llvm.Spiller">
          <Val>2 methods</Val>
        </Row>
        <Row Name="JITCodeEmitter" FullName="llvm.JITCodeEmitter">
          <Val>1 method</Val>
        </Row>
        <Row Name="MachineConstantPoolValue" FullName="llvm.MachineConstantPoolValue">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MachinePassRegistryListener" FullName="llvm.MachinePassRegistryListener">
          <Val>1 method</Val>
        </Row>
        <Row Name="MachineRegisterInfo+Delegate" FullName="llvm.MachineRegisterInfo+Delegate">
          <Val>1 method</Val>
        </Row>
        <Row Name="MachineSchedStrategy" FullName="llvm.MachineSchedStrategy">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ScheduleDAGMutation" FullName="llvm.ScheduleDAGMutation">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MachineTraceMetrics+Ensemble" FullName="llvm.MachineTraceMetrics+Ensemble">
          <Val>1 method</Val>
        </Row>
        <Row Name="RegAllocBase" FullName="llvm.RegAllocBase">
          <Val>1 method</Val>
        </Row>
        <Row Name="SchedulingPriorityQueue" FullName="llvm.SchedulingPriorityQueue">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ScheduleDAG" FullName="llvm.ScheduleDAG">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ScheduleDAGInstrs" FullName="llvm.ScheduleDAGInstrs">
          <Val>2 methods</Val>
        </Row>
        <Row Name="TargetFrameLowering" FullName="llvm.TargetFrameLowering">
          <Val>1 method</Val>
        </Row>
        <Row Name="TargetRegisterInfo" FullName="llvm.TargetRegisterInfo">
          <Val>1 method</Val>
        </Row>
        <Row Name="TypePromotionTransaction+TypePromotionAction" FullName="anonymous_namespace{codegenprepare.cpp} .TypePromotionTransaction+TypePromotionAction">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DiagnosticInfo" FullName="llvm.DiagnosticInfo">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DiagnosticInfoOptimizationBase" FullName="llvm.DiagnosticInfoOptimizationBase">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DiagnosticPrinter" FullName="llvm.DiagnosticPrinter">
          <Val>2 methods</Val>
        </Row>
        <Row Name="TerminatorInst" FullName="llvm.TerminatorInst">
          <Val>1 method</Val>
        </Row>
        <Row Name="Pass" FullName="llvm.Pass">
          <Val>1 method</Val>
        </Row>
        <Row Name="ModulePass" FullName="llvm.ModulePass">
          <Val>2 methods</Val>
        </Row>
        <Row Name="FunctionPass" FullName="llvm.FunctionPass">
          <Val>2 methods</Val>
        </Row>
        <Row Name="BasicBlockPass" FullName="llvm.BasicBlockPass">
          <Val>1 method</Val>
        </Row>
        <Row Name="PMTopLevelManager" FullName="llvm.PMTopLevelManager">
          <Val>1 method</Val>
        </Row>
        <Row Name="PMDataManager" FullName="llvm.PMDataManager">
          <Val>2 methods</Val>
        </Row>
        <Row Name="PassManagerBase" FullName="llvm.legacy.PassManagerBase">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DIContext" FullName="llvm.DIContext">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DWARFContext" FullName="llvm.DWARFContext">
          <Val>1 method</Val>
        </Row>
        <Row Name="FrameEntry" FullName="llvm.FrameEntry">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ExecutionEngine" FullName="llvm.ExecutionEngine">
          <Val>1 method</Val>
        </Row>
        <Row Name="ObjectCache" FullName="llvm.ObjectCache">
          <Val>1 method</Val>
        </Row>
        <Row Name="RTDyldMemoryManager" FullName="llvm.RTDyldMemoryManager">
          <Val>1 method</Val>
        </Row>
        <Row Name="JITMemoryManager" FullName="llvm.JITMemoryManager">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MCELFObjectTargetWriter" FullName="llvm.MCELFObjectTargetWriter">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCEncodedFragment" FullName="llvm.MCEncodedFragment">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MCEncodedFragmentWithFixups" FullName="llvm.MCEncodedFragmentWithFixups">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MCInstPrinter" FullName="llvm.MCInstPrinter">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCMachObjectTargetWriter" FullName="llvm.MCMachObjectTargetWriter">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCObjectStreamer" FullName="llvm.MCObjectStreamer">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCSymbolizer" FullName="llvm.MCSymbolizer">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCWinCOFFObjectTargetWriter" FullName="llvm.MCWinCOFFObjectTargetWriter">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCAtom" FullName="llvm.MCAtom">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCDisassembler" FullName="llvm.MCDisassembler">
          <Val>1 method</Val>
        </Row>
        <Row Name="MCParsedAsmOperand" FullName="llvm.MCParsedAsmOperand">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MipsTargetLowering" FullName="llvm.MipsTargetLowering">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MipsRegisterInfo" FullName="llvm.MipsRegisterInfo">
          <Val>3 methods</Val>
        </Row>
        <Row Name="MipsInstrInfo" FullName="llvm.MipsInstrInfo">
          <Val>3 methods</Val>
        </Row>
        <Row Name="MipsDAGToDAGISel" FullName="llvm.MipsDAGToDAGISel">
          <Val>2 methods</Val>
        </Row>
        <Row Name="InspectMemInstr" FullName="anonymous_namespace{mipsdelayslotfiller.cpp}.InspectMemInstr">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MipsOptionRecord" FullName="MipsOptionRecord">
          <Val>2 methods</Val>
        </Row>
        <Row Name="SymbolicFile" FullName="llvm.object.SymbolicFile">
          <Val>2 methods</Val>
        </Row>
        <Row Name="PPCTargetStreamer" FullName="llvm.PPCTargetStreamer">
          <Val>1 method</Val>
        </Row>
        <Row Name="PPCTargetStreamer" FullName="llvm.PPCTargetStreamer">
          <Val>2 methods</Val>
        </Row>
        <Row Name="InstrProfReader" FullName="llvm.InstrProfReader">
          <Val>2 methods</Val>
        </Row>
        <Row Name="AMDGPUInstrInfo" FullName="llvm.AMDGPUInstrInfo">
          <Val>3 methods</Val>
        </Row>
        <Row Name="JITRegistrar" FullName="llvm.JITRegistrar">
          <Val>2 methods</Val>
        </Row>
        <Row Name="ObjectImage" FullName="llvm.ObjectImage">
          <Val>1 method</Val>
        </Row>
        <Row Name="RuntimeDyldImpl" FullName="llvm.RuntimeDyldImpl">
          <Val>2 methods</Val>
        </Row>
        <Row Name="FastISel" FullName="llvm.FastISel">
          <Val>1 method</Val>
        </Row>
        <Row Name="ScheduleDAGSDNodes" FullName="llvm.ScheduleDAGSDNodes">
          <Val>2 methods</Val>
        </Row>
        <Row Name="SelectionDAGISel" FullName="llvm.SelectionDAGISel">
          <Val>2 methods</Val>
        </Row>
        <Row Name="SparcTargetStreamer" FullName="llvm.SparcTargetStreamer">
          <Val>1 method</Val>
        </Row>
        <Row Name="SparcTargetStreamer" FullName="llvm.SparcTargetStreamer">
          <Val>2 methods</Val>
        </Row>
        <Row Name="CrashRecoveryContextCleanup" FullName="llvm.CrashRecoveryContextCleanup">
          <Val>1 method</Val>
        </Row>
        <Row Name="DataStreamer" FullName="llvm.DataStreamer">
          <Val>2 methods</Val>
        </Row>
        <Row Name="DeltaAlgorithm" FullName="llvm.DeltaAlgorithm">
          <Val>1 method</Val>
        </Row>
        <Row Name="DAGDeltaAlgorithm" FullName="llvm.DAGDeltaAlgorithm">
          <Val>1 method</Val>
        </Row>
        <Row Name="FoldingSetImpl" FullName="llvm.FoldingSetImpl">
          <Val>2 methods</Val>
        </Row>
        <Row Name="MemoryObject" FullName="llvm.MemoryObject">
          <Val>1 method</Val>
        </Row>
        <Row Name="PrettyStackTraceEntry" FullName="llvm.PrettyStackTraceEntry">
          <Val>1 method</Val>
        </Row>
        <Row Name="StreamableMemoryObject" FullName="llvm.StreamableMemoryObject">
          <Val>2 methods</Val>
        </Row>
        <Row Name="raw_ostream" FullName="llvm.raw_ostream">
          <Val>1 method</Val>
        </Row>
        <Row Name="format_object_base" FullName="llvm.format_object_base">
          <Val>2 methods</Val>
        </Row>
        <Row Name="Option" FullName="llvm.cl.Option">
          <Val>1 method</Val>
        </Row>
        <Row Name="generic_parser_base" FullName="llvm.cl.generic_parser_base">
          <Val>2 methods</Val>
        </Row>
        <Row Name="StringSaver" FullName="llvm.cl.StringSaver">
          <Val>2 methods</Val>
        </Row>
        <Row Name="IO" FullName="llvm.yaml.IO">
          <Val>2 methods</Val>
        </Row>
        <Row Name="process" FullName="llvm.sys.process">
          <Val>2 methods</Val>
        </Row>
        <Row Name="RecTy" FullName="llvm.RecTy">
          <Val>2 methods</Val>
        </Row>
        <Row Name="SetTheory+Operator" FullName="llvm.SetTheory+Operator">
          <Val>2 methods</Val>
        </Row>
        <Row Name="SetTheory+Expander" FullName="llvm.SetTheory+Expander">
          <Val>2 methods</Val>
        </Row>
        <Row Name="TargetIntrinsicInfo" FullName="llvm.TargetIntrinsicInfo">
          <Val>1 method</Val>
        </Row>
        <Row Name="TargetJITInfo" FullName="llvm.TargetJITInfo">
          <Val>1 method</Val>
        </Row>
        <Row Name="TargetLoweringObjectFile" FullName="llvm.TargetLoweringObjectFile">
          <Val>1 method</Val>
        </Row>
        <Row Name="SimplifyFortifiedLibCalls" FullName="llvm.SimplifyFortifiedLibCalls">
          <Val>1 method</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Purity - Immutability - Side-Effects" FullName="Purity - Immutability - Side-Effects" GroupId="GroupOfRules-1580586165" NbQueries="3" NbErrors="0" NbWarns="2" Status="Warn">
    <Query Status="Warn" Name="Structures should be immutable" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Purity - Immutability - Side-Effects \ Structures should be immutable" QueryId="Query3027991085" NbNodeMatched="1107" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Structures&amp;#0160;should&amp;#0160;be&amp;#0160;immutable&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStructure&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsImmutable&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mutableFields&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsImmutable&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mutableFields&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;It&amp;#0160;is&amp;#0160;deemed&amp;#0160;as&amp;#0160;a&amp;#0160;good&amp;#0160;practice&amp;#0160;to&amp;#0160;make&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;your&amp;#0160;structure&amp;#0160;immutable.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;An&amp;#0160;object&amp;#0160;is&amp;#0160;immutable&amp;#0160;if&amp;#0160;its&amp;#0160;state&amp;#0160;doesn’t&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;change&amp;#0160;once&amp;#0160;the&amp;#0160;object&amp;#0160;has&amp;#0160;been&amp;#0160;created.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Consequently,&amp;#0160;a&amp;#0160;structure&amp;#0160;is&amp;#0160;immutable&amp;#0160;if&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;its&amp;#0160;instances&amp;#0160;are&amp;#0160;immutable.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Immutable&amp;#0160;types&amp;#0160;naturally&amp;#0160;simplify&amp;#0160;code&amp;#0160;by&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;limiting&amp;#0160;side-effects.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;See&amp;#0160;some&amp;#0160;explanations&amp;#0160;on&amp;#0160;immutability&amp;#0160;and&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;how&amp;#0160;NDepend&amp;#0160;supports&amp;#0160;it&amp;#0160;here:&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://codebetter.com/blogs/patricksmacchia/archive/2008/01/13/immutable-types-understand-them-and-use-them.aspx" target="_blank"&gt;http://codebetter.com/blogs/patricksmacchia/archive/2008/01/13/immutable-types-understand-them-and-use-them.aspx&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column># lines of code (LOC)</Column>
        <Column>mutableFields</Column>
      </Columns>
      <Rows>
        <Row Name="LargeTestInteger" FullName="llvm.LargeTestInteger">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="NonPOD" FullName="llvm.NonPOD">
          <Val>2</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="InterceptRefCounted" FullName="llvm.InterceptRefCounted">
          <Val>2</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="HashableDummy" FullName="anonymous_namespace{hashingtest.cpp}.HashableDummy">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="Node" FullName="anonymous_namespace{ilisttest.cpp}.Node">
          <Val>2</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ImmutableSetTest+MyIter" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest+MyIter">
          <Val>6</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="MoveOnly" FullName="anonymous_namespace{optionaltest.cpp}.MoveOnly">
          <Val>10</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="PointerUnionTest" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest">
          <Val>6</Val>
          <Val>6 fields</Val>
        </Row>
        <Row Name="notassignable" FullName="anonymous_namespace{smallvectortest.cpp}.notassignable">
          <Val>1</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MovedFrom" FullName="anonymous_namespace{smallvectortest.cpp}.MovedFrom">
          <Val>6</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="Alt" FullName="anonymous_namespace{sparsemultisettest.cpp}.Alt">
          <Val>2</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="Alt" FullName="anonymous_namespace{sparsesettest.cpp}.Alt">
          <Val>2</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="StringMapTestStruct" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTestStruct">
          <Val>1</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MoveOnly" FullName="anonymous_namespace{stringmaptest.cpp}.MoveOnly">
          <Val>4</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="Countable" FullName="anonymous_namespace{stringmaptest.cpp}.Countable">
          <Val>13</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="UnsignedPair" FullName="anonymous_namespace{stringreftest.cpp}.UnsignedPair">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="SignedPair" FullName="anonymous_namespace{stringreftest.cpp}.SignedPair">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="CheckString" FullName="CheckString">
          <Val>83</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="DPass" FullName="llvm.anonymous_namespace{dominatortreetest.cpp}.DPass">
          <Val>222</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ModuleNDNM" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDNM">
          <Val>3</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ModuleNDM" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDM">
          <Val>2</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ModuleNDM2" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDM2">
          <Val>2</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ModuleDNM" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleDNM">
          <Val>8</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="PassTestBase&lt;P&gt;" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.PassTestBase&lt;P&gt;">
          <Val>25</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="PassTest&lt;T,P&gt;" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.PassTest&lt;T,P&gt;">
          <Val>13</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="CGPass" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.CGPass">
          <Val>8</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="FPass" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.FPass">
          <Val>2</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="LPass" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.LPass">
          <Val>21</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="BPass" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.BPass">
          <Val>30</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="OnTheFlyTest" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.OnTheFlyTest">
          <Val>18</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="TestFunctionAnalysis+Result" FullName="anonymous_namespace{passmanagertest.cpp}.TestFunctionAnalysis+Result">
          <Val>1</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="TestModuleAnalysis+Result" FullName="anonymous_namespace{passmanagertest.cpp}.TestModuleAnalysis+Result">
          <Val>1</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="TestModulePass" FullName="anonymous_namespace{passmanagertest.cpp}.TestModulePass">
          <Val>4</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="TestFunctionPass" FullName="anonymous_namespace{passmanagertest.cpp}.TestFunctionPass">
          <Val>18</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="TestInvalidationFunctionPass" FullName="anonymous_namespace{passmanagertest.cpp}.TestInvalidationFunctionPass">
          <Val>3</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="PatternMatchTest" FullName="anonymous_namespace{patternmatch.cpp}.PatternMatchTest">
          <Val>4</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="MyType" FullName="anonymous_namespace{typebuildertest.cpp}.MyType">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="MyPortableType" FullName="anonymous_namespace{typebuildertest.cpp}.MyPortableType">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="LockMutex&lt;KeyT,MutexT&gt;" FullName="anonymous_namespace{valuemaptest.cpp}.LockMutex&lt;KeyT,MutexT&gt;">
          <Val>5</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="LockMutex&lt;KeyT,MutexT&gt;+ExtraData" FullName="anonymous_namespace{valuemaptest.cpp}.LockMutex&lt;KeyT,MutexT&gt;+ExtraData">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="NoFollow&lt;KeyT&gt;" FullName="anonymous_namespace{valuemaptest.cpp}.NoFollow&lt;KeyT&gt;">
          <Val>0</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="CountOps&lt;KeyT&gt;" FullName="anonymous_namespace{valuemaptest.cpp}.CountOps&lt;KeyT&gt;">
          <Val>2</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="CountOps&lt;KeyT&gt;+ExtraData" FullName="anonymous_namespace{valuemaptest.cpp}.CountOps&lt;KeyT&gt;+ExtraData">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ModifyingConfig&lt;KeyT&gt;" FullName="anonymous_namespace{valuemaptest.cpp}.ModifyingConfig&lt;KeyT&gt;">
          <Val>2</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="FunctionEmittedEvent" FullName="anonymous_namespace{jiteventlistenertest.cpp}.FunctionEmittedEvent">
          <Val>0</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="FunctionFreedEvent" FullName="anonymous_namespace{jiteventlistenertest.cpp}.FunctionFreedEvent">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="RecordingJITEventListener" FullName="anonymous_namespace{jiteventlistenertest.cpp} .RecordingJITEventListener">
          <Val>5</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+StartFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+StartFunctionBodyCall">
          <Val>5</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+EndFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+EndFunctionBodyCall">
          <Val>4</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="RecordingJITMemoryManager+DeallocateFunctionBodyCall" FullName="anonymous_namespace{jittest.cpp} .RecordingJITMemoryManager+DeallocateFunctionBodyCall">
          <Val>1</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+TokOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+TokOp">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64Operand+RegOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+RegOp">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="AArch64Operand+VectorListOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+VectorListOp">
          <Val>0</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="AArch64Operand+VectorIndexOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+VectorIndexOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+ImmOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+ImmOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+ShiftedImmOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+ShiftedImmOp">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="AArch64Operand+CondCodeOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+CondCodeOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+FPImmOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+FPImmOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+BarrierOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+BarrierOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+SysRegOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+SysRegOp">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64Operand+SysCRImmOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+SysCRImmOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+PrefetchOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+PrefetchOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64Operand+ShiftExtendOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+ShiftExtendOp">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64Operand+ExtendOp" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64Operand+ExtendOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="LdStNInstrDesc" FullName="LdStNInstrDesc">
          <Val>0</Val>
          <Val>6 fields</Val>
        </Row>
        <Row Name="GenericSetCCInfo" FullName="GenericSetCCInfo">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64SetCCInfo" FullName="AArch64SetCCInfo">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="SetCCInfoAndKind" FullName="SetCCInfoAndKind">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="AArch64BranchRelaxation+BasicBlockInfo" FullName="anonymous_namespace{aarch64branchrelaxation.cpp} .AArch64BranchRelaxation+BasicBlockInfo">
          <Val>5</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="LDTLSCleanup" FullName="anonymous_namespace{aarch64cleanuplocaldynamictlspass.cpp} .LDTLSCleanup">
          <Val>69</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64CollectLOH" FullName="anonymous_namespace{aarch64collectloh.cpp}.AArch64CollectLOH">
          <Val>43</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="AArch64LoadStoreOpt" FullName="anonymous_namespace{aarch64loadstoreoptimizer.cpp}.AArch64LoadStoreOpt">
          <Val>298</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64MCAsmInfoDarwin" FullName="llvm.AArch64MCAsmInfoDarwin">
          <Val>16</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="AArch64MCAsmInfoELF" FullName="llvm.AArch64MCAsmInfoELF">
          <Val>19</Val>
          <Val>0 field</Val>
        </Row>
        <Row Name="AArch64NamedImmMapper" FullName="llvm.AArch64NamedImmMapper">
          <Val>17</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="AArch64NamedImmMapper+Mapping" FullName="llvm.AArch64NamedImmMapper+Mapping">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ATMapper" FullName="llvm.AArch64AT.ATMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="DBarrierMapper" FullName="llvm.AArch64DB.DBarrierMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="DCMapper" FullName="llvm.AArch64DC.DCMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ICMapper" FullName="llvm.AArch64IC.ICMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ISBMapper" FullName="llvm.AArch64ISB.ISBMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="PRFMMapper" FullName="llvm.AArch64PRFM.PRFMMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="PStateMapper" FullName="llvm.AArch64PState.PStateMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="SysRegMapper" FullName="llvm.AArch64SysReg.SysRegMapper">
          <Val>43</Val>
          <Val>5 fields</Val>
        </Row>
        <Row Name="MSRMapper" FullName="llvm.AArch64SysReg.MSRMapper">
          <Val>2</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="MRSMapper" FullName="llvm.AArch64SysReg.MRSMapper">
          <Val>2</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="TLBIMapper" FullName="llvm.AArch64TLBI.TLBIMapper">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ExtMapEntry" FullName="ExtMapEntry">
          <Val>0</Val>
          <Val>3 fields</Val>
        </Row>
        <Row Name="ARMAsmParser+Anonymous" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser+Anonymous">
          <Val>0</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="ARMOperand+CCOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+CCOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+CopOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+CopOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+CoprocOptionOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+CoprocOptionOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+ITMaskOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+ITMaskOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+MBOptOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+MBOptOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+ISBOptOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+ISBOptOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+IFlagsOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+IFlagsOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+MMaskOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+MMaskOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+TokOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+TokOp">
          <Val>0</Val>
          <Val>2 fields</Val>
        </Row>
        <Row Name="ARMOperand+RegOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+RegOp">
          <Val>0</Val>
          <Val>1 field</Val>
        </Row>
        <Row Name="ARMOperand+VectorListOp" FullName="anonymous_namespace{armasmparser.cpp}.ARMOperand+VectorListOp">
          <Val>0</Val>
          <Val>4 fields</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>23 257</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>21.01</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>1 366</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>83.18</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>6 918</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid static fields with a mutable field type" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Purity - Immutability - Side-Effects \ Avoid static fields with a mutable field type" QueryId="Query153266605" NbNodeMatched="1616" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;static&amp;#0160;fields&amp;#0160;with&amp;#0160;a&amp;#0160;mutable&amp;#0160;field&amp;#0160;type&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStatic&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEnumValue&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FieldType&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!=&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;null&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsInterface&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsImmutable&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;mutableFieldType&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;fieldType&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;isFieldImmutable&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsImmutable&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;As&amp;#0160;explained&amp;#0160;in&amp;#0160;this&amp;#0160;blog&amp;#0160;post&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;a href="http://codebetter.com/patricksmacchia/2011/05/04/back-to-basics-usage-of-static-members" target="_blank"&gt;http://codebetter.com/patricksmacchia/2011/05/04/back-to-basics-usage-of-static-members&lt;/a&gt;&lt;/font&gt;&lt;font color='#008000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;static&amp;#0160;fields&amp;#0160;should&amp;#0160;be&amp;#0160;used&amp;#0160;to&amp;#0160;hold&amp;#0160;only&amp;#0160;constant&amp;#0160;and&amp;#0160;immutable&amp;#0160;states.&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
        <Column>mutableFieldType</Column>
        <Column>isFieldImmutable</Column>
      </Columns>
      <Rows>
        <Row Name="InputFilename" FullName="__Globals.InputFilename">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="OutputFilename" FullName="__Globals.OutputFilename">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="ArrayBoundsChecking" FullName="__Globals.ArrayBoundsChecking">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="JIT" FullName="__Globals.JIT">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="CheckFilename" FullName="__Globals.CheckFilename">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="InputFilename" FullName="__Globals.InputFilename">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="CheckPrefixes" FullName="__Globals.CheckPrefixes">
          <Val>list&lt;DataType,Storage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NoCanonicalizeWhiteSpace" FullName="__Globals.NoCanonicalizeWhiteSpace">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="ImplicitCheckNot" FullName="__Globals.ImplicitCheckNot">
          <Val>list&lt;DataType,Storage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheModule" FullName="__Globals.TheModule">
          <Val>Module</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Builder" FullName="__Globals.Builder">
          <Val>IRBuilder&lt;preserveNames,T,Inserter&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheModule" FullName="__Globals.TheModule">
          <Val>Module</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Builder" FullName="__Globals.Builder">
          <Val>IRBuilder&lt;preserveNames,T,Inserter&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheExecutionEngine" FullName="__Globals.TheExecutionEngine">
          <Val>ExecutionEngine</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheModule" FullName="__Globals.TheModule">
          <Val>Module</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Builder" FullName="__Globals.Builder">
          <Val>IRBuilder&lt;preserveNames,T,Inserter&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheExecutionEngine" FullName="__Globals.TheExecutionEngine">
          <Val>ExecutionEngine</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheModule" FullName="__Globals.TheModule">
          <Val>Module</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Builder" FullName="__Globals.Builder">
          <Val>IRBuilder&lt;preserveNames,T,Inserter&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheExecutionEngine" FullName="__Globals.TheExecutionEngine">
          <Val>ExecutionEngine</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheModule" FullName="__Globals.TheModule">
          <Val>Module</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Builder" FullName="__Globals.Builder">
          <Val>IRBuilder&lt;preserveNames,T,Inserter&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TheExecutionEngine" FullName="__Globals.TheExecutionEngine">
          <Val>ExecutionEngine</Val>
          <Val>False</Val>
        </Row>
        <Row Name="LdStNInstInfo" FullName="__Globals.LdStNInstInfo">
          <Val>LdStNInstrDesc</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAddressTypePromotion" FullName="__Globals.EnableAddressTypePromotion">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableMerge" FullName="__Globals.EnableMerge">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TransformAll" FullName="__Globals.TransformAll">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumScalarInsnsUsed" FullName="__Globals.NumScalarInsnsUsed">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCopiesDeleted" FullName="__Globals.NumCopiesDeleted">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCopiesInserted" FullName="__Globals.NumCopiesInserted">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="BranchRelaxation" FullName="__Globals.BranchRelaxation">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="TBZDisplacementBits" FullName="__Globals.TBZDisplacementBits">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="CBZDisplacementBits" FullName="__Globals.CBZDisplacementBits">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="BCCDisplacementBits" FullName="__Globals.BCCDisplacementBits">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumSplit" FullName="__Globals.NumSplit">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumRelaxed" FullName="__Globals.NumRelaxed">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="PreCollectRegister" FullName="__Globals.PreCollectRegister">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="BasicBlockScopeOnly" FullName="__Globals.BasicBlockScopeOnly">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRPSimpleCandidate" FullName="__Globals.NumADRPSimpleCandidate">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRPComplexCandidate2" FullName="__Globals.NumADRPComplexCandidate2">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRPComplexCandidate3" FullName="__Globals.NumADRPComplexCandidate3">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRPComplexCandidateOther" FullName="__Globals.NumADRPComplexCandidateOther">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADDToSTRWithImm" FullName="__Globals.NumADDToSTRWithImm">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumLDRToSTRWithImm" FullName="__Globals.NumLDRToSTRWithImm">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADDToSTR" FullName="__Globals.NumADDToSTR">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumLDRToSTR" FullName="__Globals.NumLDRToSTR">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADDToLDRWithImm" FullName="__Globals.NumADDToLDRWithImm">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumLDRToLDRWithImm" FullName="__Globals.NumLDRToLDRWithImm">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADDToLDR" FullName="__Globals.NumADDToLDR">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumLDRToLDR" FullName="__Globals.NumLDRToLDR">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRPToLDR" FullName="__Globals.NumADRPToLDR">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCplxLvl1" FullName="__Globals.NumCplxLvl1">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumTooCplxLvl1" FullName="__Globals.NumTooCplxLvl1">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCplxLvl2" FullName="__Globals.NumCplxLvl2">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumTooCplxLvl2" FullName="__Globals.NumTooCplxLvl2">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRSimpleCandidate" FullName="__Globals.NumADRSimpleCandidate">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumADRComplexCandidate" FullName="__Globals.NumADRComplexCandidate">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="BlockInstrLimit" FullName="__Globals.BlockInstrLimit">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Stress" FullName="__Globals.Stress">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumConsidered" FullName="__Globals.NumConsidered">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPhiRejs" FullName="__Globals.NumPhiRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPhysRejs" FullName="__Globals.NumPhysRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPhi2Rejs" FullName="__Globals.NumPhi2Rejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumHeadBranchRejs" FullName="__Globals.NumHeadBranchRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCmpBranchRejs" FullName="__Globals.NumCmpBranchRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCmpTermRejs" FullName="__Globals.NumCmpTermRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumImmRangeRejs" FullName="__Globals.NumImmRangeRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumLiveDstRejs" FullName="__Globals.NumLiveDstRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumMultNZCVUses" FullName="__Globals.NumMultNZCVUses">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumUnknNZCVDefs" FullName="__Globals.NumUnknNZCVDefs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumSpeculateRejs" FullName="__Globals.NumSpeculateRejs">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumConverted" FullName="__Globals.NumConverted">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumCompBranches" FullName="__Globals.NumCompBranches">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumDeadDefsReplaced" FullName="__Globals.NumDeadDefsReplaced">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableRedZone" FullName="__Globals.EnableRedZone">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumRedZoneFunctions" FullName="__Globals.NumRedZoneFunctions">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumTailCalls" FullName="__Globals.NumTailCalls">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumShiftInserts" FullName="__Globals.NumShiftInserts">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Align" FullName="__Globals.Align">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAArch64ExtrGeneration" FullName="__Globals.EnableAArch64ExtrGeneration">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAArch64SlrGeneration" FullName="__Globals.EnableAArch64SlrGeneration">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPairCreated" FullName="__Globals.NumPairCreated">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPostFolded" FullName="__Globals.NumPostFolded">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPreFolded" FullName="__Globals.NumPreFolded">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumUnscaledPairCreated" FullName="__Globals.NumUnscaledPairCreated">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="ScanLimit" FullName="__Globals.ScanLimit">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAArch64UnscaledMemOp" FullName="__Globals.EnableAArch64UnscaledMemOp">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Stress" FullName="__Globals.Stress">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPromoted" FullName="__Globals.NumPromoted">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="NumPromotedUses" FullName="__Globals.NumPromotedUses">
          <Val>Statistic</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableEarlyIfConvert" FullName="__Globals.EnableEarlyIfConvert">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableCCMP" FullName="__Globals.EnableCCMP">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableStPairSuppress" FullName="__Globals.EnableStPairSuppress">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAdvSIMDScalar" FullName="__Globals.EnableAdvSIMDScalar">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnablePromoteConstant" FullName="__Globals.EnablePromoteConstant">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableCollectLOH" FullName="__Globals.EnableCollectLOH">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableDeadRegisterElimination" FullName="__Globals.EnableDeadRegisterElimination">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableLoadStoreOpt" FullName="__Globals.EnableLoadStoreOpt">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="EnableAtomicTidy" FullName="__Globals.EnableAtomicTidy">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="AsmWriterVariant" FullName="__Globals.AsmWriterVariant">
          <Val>opt&lt;DataType,ExternalStorage,ParserClass,&gt;</Val>
          <Val>False</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Naming Conventions" FullName="Naming Conventions" GroupId="GroupOfRules1398865418" NbQueries="9" NbErrors="0" NbWarns="7" Status="Warn">
    <Query Status="Warn" Name="Instance fields should be prefixed with a 'm_'" ContentTruncatedThreshold="100" FullName="Naming Conventions \ Instance fields should be prefixed with a 'm_'" QueryId="Query847309376" NbNodeMatched="10" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Instance&amp;#0160;fields&amp;#0160;should&amp;#0160;be&amp;#0160;prefixed&amp;#0160;with&amp;#0160;a&amp;#0160;'m_'&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Fields&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NameLike&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;@"^m_"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStatic&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Don't&amp;#0160;hesitate&amp;#0160;to&amp;#0160;customize&amp;#0160;the&amp;#0160;regex&amp;#0160;of&amp;#0160;NameLike&amp;#0160;to&amp;#0160;your&amp;#0160;preference.&amp;#0160;&lt;br/&gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsEnumValue&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
      </Columns>
      <Rows>
        <Row Name="arr" FullName="llvm.LargeTestInteger.arr" />
        <Row Name="x" FullName="llvm.NonPOD.x" />
        <Row Name="y" FullName="llvm.NonPOD.y" />
        <Row Name="Released" FullName="llvm.InterceptRefCounted.Released" />
        <Row Name="Retained" FullName="llvm.InterceptRefCounted.Retained" />
        <Row Name="Nodes" FullName="llvm.Graph&lt;N&gt;.Nodes" />
        <Row Name="Elements" FullName="llvm.Graph&lt;N&gt;+NodeSubset.Elements" />
        <Row Name="FirstNode" FullName="llvm.Graph&lt;N&gt;+ChildIterator.FirstNode" />
        <Row Name="Children" FullName="llvm.Graph&lt;N&gt;+ChildIterator.Children" />
        <Row Name="FailingSet" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.FixedDAGDeltaAlgorithm .FailingSet" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
    <Query Status="Warn" Name="Static fields should be prefixed with a 's_'" ContentTruncatedThreshold="100" FullName="Naming Conventions \ Static fields should be prefixed with a 's_'" QueryId="Query671052188" NbNodeMatched="10" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Static&amp;#0160;fields&amp;#0160;should&amp;#0160;be&amp;#0160;prefixed&amp;#0160;with&amp;#0160;a&amp;#0160;'s_'&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Fields&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NameLike&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;@"^s_"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsStatic&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Don't&amp;#0160;hesitate&amp;#0160;to&amp;#0160;customize&amp;#0160;the&amp;#0160;regex&amp;#0160;of&amp;#0160;NameLike&amp;#0160;to&amp;#0160;your&amp;#0160;preference.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
      </Columns>
      <Rows>
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_key_ptr" FullName="__Globals.dummy_key_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="dummy_value_ptr" FullName="__Globals.dummy_value_ptr" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types name should begin with an Upper character" ContentTruncatedThreshold="100" FullName="Naming Conventions \ Types name should begin with an Upper character" QueryId="Query3965963567" NbNodeMatched="10" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;name&amp;#0160;should&amp;#0160;begin&amp;#0160;with&amp;#0160;an&amp;#0160;Upper&amp;#0160;character&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Types&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NameLike&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;@"^[A-Z]"&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;name&amp;#0160;of&amp;#0160;a&amp;#0160;type&amp;#0160;should&amp;#0160;begin&amp;#0160;with&amp;#0160;an&amp;#0160;Upper&amp;#0160;letter.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#008000'&gt;//&amp;#0160;Except&amp;#0160;if&amp;#0160;it&amp;#0160;is&amp;#0160;generated&amp;#0160;by&amp;#0160;compiler&amp;#0160;or&amp;#0160;...&lt;br/&gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;NbLinesOfCode&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Take&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;b style="color:#000000;background-color:#FFFF99"&gt;10&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column># lines of code (LOC)</Column>
      </Columns>
      <Rows>
        <Row Name="is_hashable_data&lt;llvm::LargeTestInteger&gt;" FullName="llvm.hashing.detail.is_hashable_data&lt;llvm::LargeTestInteger&gt;">
          <Val>0</Val>
        </Row>
        <Row Name="ilistTest_Basic_Test" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_Basic_Test">
          <Val>27</Val>
        </Row>
        <Row Name="ilistTest_SpliceOne_Test" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_SpliceOne_Test">
          <Val>38</Val>
        </Row>
        <Row Name="ilistTest_UnsafeClear_Test" FullName="anonymous_namespace{ilisttest.cpp}.ilistTest_UnsafeClear_Test">
          <Val>55</Val>
        </Row>
        <Row Name="notassignable" FullName="anonymous_namespace{smallvectortest.cpp}.notassignable">
          <Val>1</Val>
        </Row>
        <Row Name="isPodLike&lt;llvm::bfi_detail::BlockMass&gt;" FullName="llvm.isPodLike&lt;llvm::bfi_detail::BlockMass&gt;">
          <Val>0</Val>
        </Row>
        <Row Name="ilist_traits&lt;llvm::BasicBlock&gt;" FullName="llvm.ilist_traits&lt;llvm::BasicBlock&gt;">
          <Val>4</Val>
        </Row>
        <Row Name="ilist_traits&lt;llvm::Argument&gt;" FullName="llvm.ilist_traits&lt;llvm::Argument&gt;">
          <Val>4</Val>
        </Row>
        <Row Name="ilist_traits&lt;llvm::IVStrideUse&gt;" FullName="llvm.ilist_traits&lt;llvm::IVStrideUse&gt;">
          <Val>3</Val>
        </Row>
        <Row Name="po_iterator_storage&lt;llvm::LoopBlocksTraversal,true&gt;" FullName="llvm.po_iterator_storage&lt;llvm::LoopBlocksTraversal,true&gt;">
          <Val>3</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>135</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>13.5</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>55</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>18.51</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>342.65</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid types with name too long" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Naming Conventions \ Avoid types with name too long" QueryId="Query1618530804" NbNodeMatched="324" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;types&amp;#0160;with&amp;#0160;name&amp;#0160;too&amp;#0160;long&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Length&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;35&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>SimpleName</Column>
      </Columns>
      <Rows>
        <Row Name="SmallPtrSetTest_CopyAndMoveTest_Test" FullName="SmallPtrSetTest_CopyAndMoveTest_Test">
          <Val>SmallPtrSetTest_CopyAndMoveTest_Test</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test">
          <Val>APFloatTest_DecimalStringsWithoutNullTerminators_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test">
          <Val>APFloatTest_fromZeroDecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test">
          <Val>APFloatTest_fromZeroDecimalSingleExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test">
          <Val>APFloatTest_fromZeroDecimalLargeExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test">
          <Val>APFloatTest_fromZeroHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test">
          <Val>APFloatTest_fromHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test">
          <Val>APFloatTest_StringDecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test">
          <Val>APFloatTest_StringDecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test">
          <Val>APFloatTest_StringHexadecimalDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test">
          <Val>APFloatTest_StringHexadecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test">
          <Val>APFloatTest_StringHexadecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test">
          <Val>APFloatTest_getSmallestNormalized_Test</Val>
        </Row>
        <Row Name="APIntTest_LargeAPIntConstruction_Test" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test">
          <Val>APIntTest_LargeAPIntConstruction_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test">
          <Val>IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test">
          <Val>IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test" FullName="llvm.IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test">
          <Val>IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;">
          <Val>BitVectorTest_CompoundAssignment_Test</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;">
          <Val>BitVectorTest_CompoundTestReset_Test</Val>
        </Row>
        <Row Name="DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>DenseMapTest_SingleEntryMapTest_Test</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>DenseMapTest_CopyConstructorTest_Test</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>DenseMapTest_CopyConstructorNotSmallTest_Test</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>DenseMapTest_CopyConstructorFromDefaultTest_Test</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>DenseMapTest_CopyConstructorFromEmptyTest_Test</Val>
        </Row>
        <Row Name="DenseMapCustomTest_SmallDenseMapGrowTest_Test" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_SmallDenseMapGrowTest_Test">
          <Val>DenseMapCustomTest_SmallDenseMapGrowTest_Test</Val>
        </Row>
        <Row Name="DenseSetTest_DoubleEntrySetTest_Test" FullName="anonymous_namespace{densesettest.cpp} .DenseSetTest_DoubleEntrySetTest_Test">
          <Val>DenseSetTest_DoubleEntrySetTest_Test</Val>
        </Row>
        <Row Name="FoldingSetTest_UnalignedStringTest_Test" FullName="anonymous_namespace{foldingset.cpp} .FoldingSetTest_UnalignedStringTest_Test">
          <Val>FoldingSetTest_UnalignedStringTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeBasicTest_Test" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeBasicTest_Test">
          <Val>HashingTest_HashCombineRangeBasicTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeLengthDiff_Test" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeLengthDiff_Test">
          <Val>HashingTest_HashCombineRangeLengthDiff_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeGoldenTest_Test" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeGoldenTest_Test">
          <Val>HashingTest_HashCombineRangeGoldenTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineBasicTest_Test" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineBasicTest_Test">
          <Val>HashingTest_HashCombineBasicTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_EmptyIntMapTest_Test" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_EmptyIntMapTest_Test">
          <Val>ImmutableMapTest_EmptyIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_MultiElemIntMapTest_Test" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_MultiElemIntMapTest_Test">
          <Val>ImmutableMapTest_MultiElemIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_EmptyIntSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_EmptyIntSetTest_Test">
          <Val>ImmutableSetTest_EmptyIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_OneElemIntSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_OneElemIntSetTest_Test">
          <Val>ImmutableSetTest_OneElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_MultiElemIntSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_MultiElemIntSetTest_Test">
          <Val>ImmutableSetTest_MultiElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_RemoveIntSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_RemoveIntSetTest_Test">
          <Val>ImmutableSetTest_RemoveIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_CallbackCharSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_CallbackCharSetTest_Test">
          <Val>ImmutableSetTest_CallbackCharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_Callback2CharSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_Callback2CharSetTest_Test">
          <Val>ImmutableSetTest_Callback2CharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_IterLongSetTest_Test" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_IterLongSetTest_Test">
          <Val>ImmutableSetTest_IterLongSetTest_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RootMultiCoalescing_Test" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RootMultiCoalescing_Test">
          <Val>IntervalMapTest_RootMultiCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RandomCoalescing_Test" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RandomCoalescing_Test">
          <Val>IntervalMapTest_RandomCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_SmallMaps_Test" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_SmallMaps_Test">
          <Val>IntervalMapOverlapsTest_SmallMaps_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_BigMaps_Test" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_BigMaps_Test">
          <Val>IntervalMapOverlapsTest_BigMaps_Test</Val>
        </Row>
        <Row Name="OptionalTest_NonDefaultConstructibleTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NonDefaultConstructibleTest_Test">
          <Val>OptionalTest_NonDefaultConstructibleTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_InitializationLeakTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_InitializationLeakTest_Test">
          <Val>OptionalTest_InitializationLeakTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyConstructionTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyConstructionTest_Test">
          <Val>OptionalTest_CopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_ConstructingCopyAssignmentTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_ConstructingCopyAssignmentTest_Test">
          <Val>OptionalTest_ConstructingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyingCopyAssignmentTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyingCopyAssignmentTest_Test">
          <Val>OptionalTest_CopyingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_DeletingCopyAssignmentTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_DeletingCopyAssignmentTest_Test">
          <Val>OptionalTest_DeletingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_NullCopyConstructionTest_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NullCopyConstructionTest_Test">
          <Val>OptionalTest_NullCopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyConstruction_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyConstruction_Test">
          <Val>OptionalTest_MoveOnlyConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyMoveConstruction_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyMoveConstruction_Test">
          <Val>OptionalTest_MoveOnlyMoveConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssignment_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssignment_Test">
          <Val>OptionalTest_MoveOnlyAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyInitializingAssignment_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyInitializingAssignment_Test">
          <Val>OptionalTest_MoveOnlyInitializingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyNullingAssignment_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyNullingAssignment_Test">
          <Val>OptionalTest_MoveOnlyNullingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssigningAssignment_Test" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssigningAssignment_Test">
          <Val>OptionalTest_MoveOnlyAssigningAssignment_Test</Val>
        </Row>
        <Row Name="PackedVectorTest_UnsignedValues_Test" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_UnsignedValues_Test">
          <Val>PackedVectorTest_UnsignedValues_Test</Val>
        </Row>
        <Row Name="PointerIntPairTest_DefaultInitialize_Test" FullName="anonymous_namespace{pointerintpairtest.cpp} .PointerIntPairTest_DefaultInitialize_Test">
          <Val>PointerIntPairTest_DefaultInitialize_Test</Val>
        </Row>
        <Row Name="PointerIntPairTest_ManyUnusedBits_Test" FullName="anonymous_namespace{pointerintpairtest.cpp} .PointerIntPairTest_ManyUnusedBits_Test">
          <Val>PointerIntPairTest_ManyUnusedBits_Test</Val>
        </Row>
        <Row Name="SmallStringTest_EmptyStringTest_Test" FullName="anonymous_namespace{smallstringtest.cpp} .SmallStringTest_EmptyStringTest_Test">
          <Val>SmallStringTest_EmptyStringTest_Test</Val>
        </Row>
        <Row Name="SmallStringTest_AssignStringRef_Test" FullName="anonymous_namespace{smallstringtest.cpp} .SmallStringTest_AssignStringRef_Test">
          <Val>SmallStringTest_AssignStringRef_Test</Val>
        </Row>
        <Row Name="SmallStringTest_AssignSmallVector_Test" FullName="anonymous_namespace{smallstringtest.cpp} .SmallStringTest_AssignSmallVector_Test">
          <Val>SmallStringTest_AssignSmallVector_Test</Val>
        </Row>
        <Row Name="SmallStringTest_AppendStringRef_Test" FullName="anonymous_namespace{smallstringtest.cpp} .SmallStringTest_AppendStringRef_Test">
          <Val>SmallStringTest_AppendStringRef_Test</Val>
        </Row>
        <Row Name="SmallStringTest_AppendSmallVector_Test" FullName="anonymous_namespace{smallstringtest.cpp} .SmallStringTest_AppendSmallVector_Test">
          <Val>SmallStringTest_AppendSmallVector_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_EmptyVectorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_EmptyVectorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_EmptyVectorTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_ResizeShrinkTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_ResizeShrinkTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_ResizeShrinkTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_ResizeWithElementsTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_ResizeWithElementsTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_ResizeWithElementsTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_AppendRepeatedTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_AppendRepeatedTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_AppendRepeatedTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertRepeatedTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertRepeatedTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertRepeatedTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertRepeatedAtEndTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertRepeatedAtEndTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertRepeatedAtEndTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertRepeatedEmptyTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertRepeatedEmptyTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertRepeatedEmptyTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertRangeTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertRangeTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertRangeTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertRangeAtEndTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertRangeAtEndTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertRangeAtEndTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_InsertEmptyRangeTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_InsertEmptyRangeTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_InsertEmptyRangeTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_ConstVectorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_ConstVectorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_ConstVectorTest_Test</Val>
        </Row>
        <Row Name="SmallVectorTest_DirectVectorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorTest_DirectVectorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>SmallVectorTest_DirectVectorTest_Test</Val>
        </Row>
        <Row Name="SmallVectorCustomTest_NoAssignTest_Test" FullName="anonymous_namespace{smallvectortest.cpp} .SmallVectorCustomTest_NoAssignTest_Test">
          <Val>SmallVectorCustomTest_NoAssignTest_Test</Val>
        </Row>
        <Row Name="SparseBitVectorTest_TrivialOperation_Test" FullName="anonymous_namespace{sparsebitvectortest.cpp} .SparseBitVectorTest_TrivialOperation_Test">
          <Val>SparseBitVectorTest_TrivialOperation_Test</Val>
        </Row>
        <Row Name="SparseMultiSetTest_SingleEntrySet_Test" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_SingleEntrySet_Test">
          <Val>SparseMultiSetTest_SingleEntrySet_Test</Val>
        </Row>
        <Row Name="SparseMultiSetTest_MultipleEntrySet_Test" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_MultipleEntrySet_Test">
          <Val>SparseMultiSetTest_MultipleEntrySet_Test</Val>
        </Row>
        <Row Name="SparseMultiSetTest_AltStructSet_Test" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_AltStructSet_Test">
          <Val>SparseMultiSetTest_AltStructSet_Test</Val>
        </Row>
        <Row Name="StringMapTest_ConstEmptyMapTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_ConstEmptyMapTest_Test">
          <Val>StringMapTest_ConstEmptyMapTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_SingleEntryMapTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_SingleEntryMapTest_Test">
          <Val>StringMapTest_SingleEntryMapTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_EraseIteratorTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_EraseIteratorTest_Test">
          <Val>StringMapTest_EraseIteratorTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_InsertAndEraseTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_InsertAndEraseTest_Test">
          <Val>StringMapTest_InsertAndEraseTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_StringMapEntryTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_StringMapEntryTest_Test">
          <Val>StringMapTest_StringMapEntryTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_InsertRehashingPairTest_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_InsertRehashingPairTest_Test">
          <Val>StringMapTest_InsertRehashingPairTest_Test</Val>
        </Row>
        <Row Name="StringMapTest_NonDefaultConstructable_Test" FullName="anonymous_namespace{stringmaptest.cpp} .StringMapTest_NonDefaultConstructable_Test">
          <Val>StringMapTest_NonDefaultConstructable_Test</Val>
        </Row>
        <Row Name="StringRefTest_getAsUnsignedIntegerBadStrings_Test" FullName="anonymous_namespace{stringreftest.cpp} .StringRefTest_getAsUnsignedIntegerBadStrings_Test">
          <Val>StringRefTest_getAsUnsignedIntegerBadStrings_Test</Val>
        </Row>
        <Row Name="TinyPtrVectorTest_CopyAndMoveCtorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_CopyAndMoveCtorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>TinyPtrVectorTest_CopyAndMoveCtorTest_Test</Val>
        </Row>
        <Row Name="TinyPtrVectorTest_CopyAndMoveTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_CopyAndMoveTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>TinyPtrVectorTest_CopyAndMoveTest_Test</Val>
        </Row>
        <Row Name="TinyPtrVectorTest_EraseRangeTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{tinyptrvectortest.cpp} .TinyPtrVectorTest_EraseRangeTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>TinyPtrVectorTest_EraseRangeTest_Test</Val>
        </Row>
        <Row Name="TripleTest_BitWidthArchVariants_Test" FullName="anonymous_namespace{tripletest.cpp} .TripleTest_BitWidthArchVariants_Test">
          <Val>TripleTest_BitWidthArchVariants_Test</Val>
        </Row>
        <Row Name="TwineTest_toNullTerminatedStringRef_Test" FullName="anonymous_namespace{twinetest.cpp} .TwineTest_toNullTerminatedStringRef_Test">
          <Val>TwineTest_toNullTerminatedStringRef_Test</Val>
        </Row>
        <Row Name="VariadicFunctionTest_WorksForClassTypes_Test" FullName="anonymous_namespace{variadicfunctiontest.cpp} .VariadicFunctionTest_WorksForClassTypes_Test">
          <Val>VariadicFunctionTest_WorksForClassTypes_Test</Val>
        </Row>
        <Row Name="VariadicFunctionTest_WorksForPrimitiveTypes_Test" FullName="anonymous_namespace{variadicfunctiontest.cpp} .VariadicFunctionTest_WorksForPrimitiveTypes_Test">
          <Val>VariadicFunctionTest_WorksForPrimitiveTypes_Test</Val>
        </Row>
        <Row Name="IsPotentiallyReachableTest_SameBlockNoPath_Test" FullName="IsPotentiallyReachableTest_SameBlockNoPath_Test">
          <Val>IsPotentiallyReachableTest_SameBlockNoPath_Test</Val>
        </Row>
        <Row Name="IsPotentiallyReachableTest_SameBlockPath_Test" FullName="IsPotentiallyReachableTest_SameBlockPath_Test">
          <Val>IsPotentiallyReachableTest_SameBlockPath_Test</Val>
        </Row>
        <Row Name="IsPotentiallyReachableTest_SameBlockNoLoop_Test" FullName="IsPotentiallyReachableTest_SameBlockNoLoop_Test">
          <Val>IsPotentiallyReachableTest_SameBlockNoLoop_Test</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid methods with name too long" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Naming Conventions \ Avoid methods with name too long" QueryId="Query3460729287" NbNodeMatched="958" NbNodeTested="60268" KindOfNode=" methods">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;methods&amp;#0160;with&amp;#0160;name&amp;#0160;too&amp;#0160;long&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Length&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;35&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;regex&amp;#0160;matches&amp;#0160;methods&amp;#0160;with&amp;#0160;name&amp;#0160;longer&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;than&amp;#0160;35&amp;#0160;characters.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Method&amp;#0160;Name&amp;#0160;doesn't&amp;#0160;contain&amp;#0160;the&amp;#0160;type&amp;#0160;and&amp;#0160;namespace&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;prefix,&amp;#0160;FullName&amp;#0160;does.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;regex&amp;#0160;computes&amp;#0160;the&amp;#0160;method&amp;#0160;name&amp;#0160;length&amp;#0160;from&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;the&amp;#0160;beginning&amp;#0160;until&amp;#0160;the&amp;#0160;first&amp;#0160;open&amp;#0160;parenthesis&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;or&amp;#0160;first&amp;#0160;lower&amp;#0160;than&amp;#0160;(for&amp;#0160;generic&amp;#0160;methods).&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>methods</Column>
        <Column>SimpleName</Column>
      </Columns>
      <Rows>
        <Row Name="SmallPtrSetTest_CopyAndMoveTest_Test()" FullName="SmallPtrSetTest_CopyAndMoveTest_Test .SmallPtrSetTest_CopyAndMoveTest_Test()">
          <Val>SmallPtrSetTest_CopyAndMoveTest_Test</Val>
        </Row>
        <Row Name="SmallPtrSetTest_CopyAndMoveTest_Test (constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)" FullName="SmallPtrSetTest_CopyAndMoveTest_Test .SmallPtrSetTest_CopyAndMoveTest_Test (constSmallPtrSetTest_CopyAndMoveTest_Test&amp;)">
          <Val>SmallPtrSetTest_CopyAndMoveTest_Test</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test .APFloatTest_DecimalStringsWithoutNullTerminators_Test()">
          <Val>APFloatTest_DecimalStringsWithoutNullTerminators_Test</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test(const&lt;anonymous &gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test .APFloatTest_DecimalStringsWithoutNullTerminators_Test(const&lt;anonymous &gt;::APFloatTest_DecimalStringsWithoutNullTerminators_Test&amp;)">
          <Val>APFloatTest_DecimalStringsWithoutNullTerminators_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test .APFloatTest_fromZeroDecimalString_Test()">
          <Val>APFloatTest_fromZeroDecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test .APFloatTest_fromZeroDecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalString_Test&amp;)">
          <Val>APFloatTest_fromZeroDecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test .APFloatTest_fromZeroDecimalSingleExponentString_Test()">
          <Val>APFloatTest_fromZeroDecimalSingleExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test .APFloatTest_fromZeroDecimalSingleExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalSingleExponentString_Test&amp;)">
          <Val>APFloatTest_fromZeroDecimalSingleExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test .APFloatTest_fromZeroDecimalLargeExponentString_Test()">
          <Val>APFloatTest_fromZeroDecimalLargeExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test .APFloatTest_fromZeroDecimalLargeExponentString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroDecimalLargeExponentString_Test&amp;)">
          <Val>APFloatTest_fromZeroDecimalLargeExponentString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test .APFloatTest_fromZeroHexadecimalString_Test()">
          <Val>APFloatTest_fromZeroHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test .APFloatTest_fromZeroHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromZeroHexadecimalString_Test&amp;)">
          <Val>APFloatTest_fromZeroHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test .APFloatTest_fromHexadecimalString_Test()">
          <Val>APFloatTest_fromHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromHexadecimalString_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test .APFloatTest_fromHexadecimalString_Test(const&lt;anonymous &gt;::APFloatTest_fromHexadecimalString_Test&amp;)">
          <Val>APFloatTest_fromHexadecimalString_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test .APFloatTest_StringDecimalSignificandDeath_Test()">
          <Val>APFloatTest_StringDecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test .APFloatTest_StringDecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalSignificandDeath_Test&amp;)">
          <Val>APFloatTest_StringDecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test .APFloatTest_StringDecimalExponentDeath_Test()">
          <Val>APFloatTest_StringDecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test .APFloatTest_StringDecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringDecimalExponentDeath_Test&amp;)">
          <Val>APFloatTest_StringDecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test .APFloatTest_StringHexadecimalDeath_Test()">
          <Val>APFloatTest_StringHexadecimalDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test .APFloatTest_StringHexadecimalDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalDeath_Test&amp;)">
          <Val>APFloatTest_StringHexadecimalDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test .APFloatTest_StringHexadecimalSignificandDeath_Test()">
          <Val>APFloatTest_StringHexadecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test .APFloatTest_StringHexadecimalSignificandDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalSignificandDeath_Test&amp;)">
          <Val>APFloatTest_StringHexadecimalSignificandDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test .APFloatTest_StringHexadecimalExponentDeath_Test()">
          <Val>APFloatTest_StringHexadecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test .APFloatTest_StringHexadecimalExponentDeath_Test(const&lt;anonymous &gt;::APFloatTest_StringHexadecimalExponentDeath_Test&amp;)">
          <Val>APFloatTest_StringHexadecimalExponentDeath_Test</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test()" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test .APFloatTest_getSmallestNormalized_Test()">
          <Val>APFloatTest_getSmallestNormalized_Test</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test(const&lt;anonymous &gt;::APFloatTest_getSmallestNormalized_Test&amp;)" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test .APFloatTest_getSmallestNormalized_Test(const&lt;anonymous &gt;::APFloatTest_getSmallestNormalized_Test&amp;)">
          <Val>APFloatTest_getSmallestNormalized_Test</Val>
        </Row>
        <Row Name="APIntTest_LargeAPIntConstruction_Test()" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test .APIntTest_LargeAPIntConstruction_Test()">
          <Val>APIntTest_LargeAPIntConstruction_Test</Val>
        </Row>
        <Row Name="APIntTest_LargeAPIntConstruction_Test(const&lt;anonymous &gt;::APIntTest_LargeAPIntConstruction_Test&amp;)" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test .APIntTest_LargeAPIntConstruction_Test(const&lt;anonymous &gt;::APIntTest_LargeAPIntConstruction_Test&amp;)">
          <Val>APIntTest_LargeAPIntConstruction_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test()" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test .IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test()">
          <Val>IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test (constllvm::IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test&amp; )" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test .IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test (constllvm::IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test&amp; )">
          <Val>IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test()" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test .IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test()">
          <Val>IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test (constllvm::IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test&amp;)" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test .IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test (constllvm::IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test&amp;)">
          <Val>IntrusiveRefCntPtr_RefCountedBaseCopyDoesNotLeak_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test()" FullName="llvm.IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test .IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test()">
          <Val>IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test (constllvm::IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test&amp;)" FullName="llvm.IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test .IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test (constllvm::IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test&amp;)">
          <Val>IntrusiveRefCntPtr_UsesTraitsToRetainAndRelease_Test</Val>
        </Row>
        <Row Name="DenseMapCustomTest_SmallDenseMapGrowTest_Test()" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_SmallDenseMapGrowTest_Test .DenseMapCustomTest_SmallDenseMapGrowTest_Test()">
          <Val>DenseMapCustomTest_SmallDenseMapGrowTest_Test</Val>
        </Row>
        <Row Name="DenseMapCustomTest_SmallDenseMapGrowTest_Test(const&lt;anonymous &gt;::DenseMapCustomTest_SmallDenseMapGrowTest_Test&amp;)" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_SmallDenseMapGrowTest_Test .DenseMapCustomTest_SmallDenseMapGrowTest_Test(const&lt;anonymous &gt;::DenseMapCustomTest_SmallDenseMapGrowTest_Test&amp;)">
          <Val>DenseMapCustomTest_SmallDenseMapGrowTest_Test</Val>
        </Row>
        <Row Name="DenseSetTest_DoubleEntrySetTest_Test()" FullName="anonymous_namespace{densesettest.cpp} .DenseSetTest_DoubleEntrySetTest_Test .DenseSetTest_DoubleEntrySetTest_Test()">
          <Val>DenseSetTest_DoubleEntrySetTest_Test</Val>
        </Row>
        <Row Name="DenseSetTest_DoubleEntrySetTest_Test(const&lt;anonymous &gt;::DenseSetTest_DoubleEntrySetTest_Test&amp;)" FullName="anonymous_namespace{densesettest.cpp} .DenseSetTest_DoubleEntrySetTest_Test .DenseSetTest_DoubleEntrySetTest_Test(const&lt;anonymous &gt;::DenseSetTest_DoubleEntrySetTest_Test&amp;)">
          <Val>DenseSetTest_DoubleEntrySetTest_Test</Val>
        </Row>
        <Row Name="FoldingSetTest_UnalignedStringTest_Test()" FullName="anonymous_namespace{foldingset.cpp} .FoldingSetTest_UnalignedStringTest_Test .FoldingSetTest_UnalignedStringTest_Test()">
          <Val>FoldingSetTest_UnalignedStringTest_Test</Val>
        </Row>
        <Row Name="FoldingSetTest_UnalignedStringTest_Test(const&lt;anonymous &gt;::FoldingSetTest_UnalignedStringTest_Test&amp;)" FullName="anonymous_namespace{foldingset.cpp} .FoldingSetTest_UnalignedStringTest_Test .FoldingSetTest_UnalignedStringTest_Test(const&lt;anonymous &gt;::FoldingSetTest_UnalignedStringTest_Test&amp;)">
          <Val>FoldingSetTest_UnalignedStringTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeBasicTest_Test()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeBasicTest_Test .HashingTest_HashCombineRangeBasicTest_Test()">
          <Val>HashingTest_HashCombineRangeBasicTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeBasicTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeBasicTest_Test&amp;)" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeBasicTest_Test .HashingTest_HashCombineRangeBasicTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeBasicTest_Test&amp;)">
          <Val>HashingTest_HashCombineRangeBasicTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeLengthDiff_Test()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeLengthDiff_Test .HashingTest_HashCombineRangeLengthDiff_Test()">
          <Val>HashingTest_HashCombineRangeLengthDiff_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeLengthDiff_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeLengthDiff_Test&amp;)" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeLengthDiff_Test .HashingTest_HashCombineRangeLengthDiff_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeLengthDiff_Test&amp;)">
          <Val>HashingTest_HashCombineRangeLengthDiff_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeGoldenTest_Test()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeGoldenTest_Test .HashingTest_HashCombineRangeGoldenTest_Test()">
          <Val>HashingTest_HashCombineRangeGoldenTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineRangeGoldenTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeGoldenTest_Test&amp;)" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineRangeGoldenTest_Test .HashingTest_HashCombineRangeGoldenTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineRangeGoldenTest_Test&amp;)">
          <Val>HashingTest_HashCombineRangeGoldenTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineBasicTest_Test()" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineBasicTest_Test .HashingTest_HashCombineBasicTest_Test()">
          <Val>HashingTest_HashCombineBasicTest_Test</Val>
        </Row>
        <Row Name="HashingTest_HashCombineBasicTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineBasicTest_Test&amp;)" FullName="anonymous_namespace{hashingtest.cpp} .HashingTest_HashCombineBasicTest_Test .HashingTest_HashCombineBasicTest_Test(const&lt;anonymous &gt;::HashingTest_HashCombineBasicTest_Test&amp;)">
          <Val>HashingTest_HashCombineBasicTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_EmptyIntMapTest_Test()" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_EmptyIntMapTest_Test .ImmutableMapTest_EmptyIntMapTest_Test()">
          <Val>ImmutableMapTest_EmptyIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_EmptyIntMapTest_Test(const&lt;anonymous &gt;::ImmutableMapTest_EmptyIntMapTest_Test&amp;)" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_EmptyIntMapTest_Test .ImmutableMapTest_EmptyIntMapTest_Test(const&lt;anonymous &gt;::ImmutableMapTest_EmptyIntMapTest_Test&amp;)">
          <Val>ImmutableMapTest_EmptyIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_MultiElemIntMapTest_Test()" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_MultiElemIntMapTest_Test .ImmutableMapTest_MultiElemIntMapTest_Test()">
          <Val>ImmutableMapTest_MultiElemIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableMapTest_MultiElemIntMapTest_Test(const&lt;anonymous &gt;::ImmutableMapTest_MultiElemIntMapTest_Test&amp;)" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_MultiElemIntMapTest_Test .ImmutableMapTest_MultiElemIntMapTest_Test(const&lt;anonymous &gt;::ImmutableMapTest_MultiElemIntMapTest_Test&amp;)">
          <Val>ImmutableMapTest_MultiElemIntMapTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_EmptyIntSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_EmptyIntSetTest_Test .ImmutableSetTest_EmptyIntSetTest_Test()">
          <Val>ImmutableSetTest_EmptyIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_EmptyIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_EmptyIntSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_EmptyIntSetTest_Test .ImmutableSetTest_EmptyIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_EmptyIntSetTest_Test&amp;)">
          <Val>ImmutableSetTest_EmptyIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_OneElemIntSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_OneElemIntSetTest_Test .ImmutableSetTest_OneElemIntSetTest_Test()">
          <Val>ImmutableSetTest_OneElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_OneElemIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_OneElemIntSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_OneElemIntSetTest_Test .ImmutableSetTest_OneElemIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_OneElemIntSetTest_Test&amp;)">
          <Val>ImmutableSetTest_OneElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_MultiElemIntSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_MultiElemIntSetTest_Test .ImmutableSetTest_MultiElemIntSetTest_Test()">
          <Val>ImmutableSetTest_MultiElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_MultiElemIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_MultiElemIntSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_MultiElemIntSetTest_Test .ImmutableSetTest_MultiElemIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_MultiElemIntSetTest_Test&amp;)">
          <Val>ImmutableSetTest_MultiElemIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_RemoveIntSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_RemoveIntSetTest_Test .ImmutableSetTest_RemoveIntSetTest_Test()">
          <Val>ImmutableSetTest_RemoveIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_RemoveIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_RemoveIntSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_RemoveIntSetTest_Test .ImmutableSetTest_RemoveIntSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_RemoveIntSetTest_Test&amp;)">
          <Val>ImmutableSetTest_RemoveIntSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_CallbackCharSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_CallbackCharSetTest_Test .ImmutableSetTest_CallbackCharSetTest_Test()">
          <Val>ImmutableSetTest_CallbackCharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_CallbackCharSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_CallbackCharSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_CallbackCharSetTest_Test .ImmutableSetTest_CallbackCharSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_CallbackCharSetTest_Test&amp;)">
          <Val>ImmutableSetTest_CallbackCharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_Callback2CharSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_Callback2CharSetTest_Test .ImmutableSetTest_Callback2CharSetTest_Test()">
          <Val>ImmutableSetTest_Callback2CharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_Callback2CharSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_Callback2CharSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_Callback2CharSetTest_Test .ImmutableSetTest_Callback2CharSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_Callback2CharSetTest_Test&amp;)">
          <Val>ImmutableSetTest_Callback2CharSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_IterLongSetTest_Test()" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_IterLongSetTest_Test .ImmutableSetTest_IterLongSetTest_Test()">
          <Val>ImmutableSetTest_IterLongSetTest_Test</Val>
        </Row>
        <Row Name="ImmutableSetTest_IterLongSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_IterLongSetTest_Test&amp;)" FullName="anonymous_namespace{immutablesettest.cpp} .ImmutableSetTest_IterLongSetTest_Test .ImmutableSetTest_IterLongSetTest_Test(const&lt;anonymous &gt;::ImmutableSetTest_IterLongSetTest_Test&amp;)">
          <Val>ImmutableSetTest_IterLongSetTest_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RootMultiCoalescing_Test()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RootMultiCoalescing_Test .IntervalMapTest_RootMultiCoalescing_Test()">
          <Val>IntervalMapTest_RootMultiCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RootMultiCoalescing_Test(const&lt;anonymous &gt;::IntervalMapTest_RootMultiCoalescing_Test&amp;)" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RootMultiCoalescing_Test .IntervalMapTest_RootMultiCoalescing_Test(const&lt;anonymous &gt;::IntervalMapTest_RootMultiCoalescing_Test&amp;)">
          <Val>IntervalMapTest_RootMultiCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RandomCoalescing_Test()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RandomCoalescing_Test .IntervalMapTest_RandomCoalescing_Test()">
          <Val>IntervalMapTest_RandomCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapTest_RandomCoalescing_Test(const&lt;anonymous &gt;::IntervalMapTest_RandomCoalescing_Test&amp;)" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapTest_RandomCoalescing_Test .IntervalMapTest_RandomCoalescing_Test(const&lt;anonymous &gt;::IntervalMapTest_RandomCoalescing_Test&amp;)">
          <Val>IntervalMapTest_RandomCoalescing_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_SmallMaps_Test()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_SmallMaps_Test .IntervalMapOverlapsTest_SmallMaps_Test()">
          <Val>IntervalMapOverlapsTest_SmallMaps_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_SmallMaps_Test(const&lt;anonymous &gt;::IntervalMapOverlapsTest_SmallMaps_Test&amp;)" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_SmallMaps_Test .IntervalMapOverlapsTest_SmallMaps_Test(const&lt;anonymous &gt;::IntervalMapOverlapsTest_SmallMaps_Test&amp;)">
          <Val>IntervalMapOverlapsTest_SmallMaps_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_BigMaps_Test()" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_BigMaps_Test .IntervalMapOverlapsTest_BigMaps_Test()">
          <Val>IntervalMapOverlapsTest_BigMaps_Test</Val>
        </Row>
        <Row Name="IntervalMapOverlapsTest_BigMaps_Test(const&lt;anonymous &gt;::IntervalMapOverlapsTest_BigMaps_Test&amp;)" FullName="anonymous_namespace{intervalmaptest.cpp} .IntervalMapOverlapsTest_BigMaps_Test .IntervalMapOverlapsTest_BigMaps_Test(const&lt;anonymous &gt;::IntervalMapOverlapsTest_BigMaps_Test&amp;)">
          <Val>IntervalMapOverlapsTest_BigMaps_Test</Val>
        </Row>
        <Row Name="OptionalTest_NonDefaultConstructibleTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NonDefaultConstructibleTest_Test .OptionalTest_NonDefaultConstructibleTest_Test()">
          <Val>OptionalTest_NonDefaultConstructibleTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_NonDefaultConstructibleTest_Test(const&lt;anonymous &gt;::OptionalTest_NonDefaultConstructibleTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NonDefaultConstructibleTest_Test .OptionalTest_NonDefaultConstructibleTest_Test(const&lt;anonymous &gt;::OptionalTest_NonDefaultConstructibleTest_Test&amp;)">
          <Val>OptionalTest_NonDefaultConstructibleTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_InitializationLeakTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_InitializationLeakTest_Test .OptionalTest_InitializationLeakTest_Test()">
          <Val>OptionalTest_InitializationLeakTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_InitializationLeakTest_Test(const&lt;anonymous &gt;::OptionalTest_InitializationLeakTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_InitializationLeakTest_Test .OptionalTest_InitializationLeakTest_Test(const&lt;anonymous &gt;::OptionalTest_InitializationLeakTest_Test&amp;)">
          <Val>OptionalTest_InitializationLeakTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyConstructionTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyConstructionTest_Test .OptionalTest_CopyConstructionTest_Test()">
          <Val>OptionalTest_CopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyConstructionTest_Test(const&lt;anonymous &gt;::OptionalTest_CopyConstructionTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyConstructionTest_Test .OptionalTest_CopyConstructionTest_Test(const&lt;anonymous &gt;::OptionalTest_CopyConstructionTest_Test&amp;)">
          <Val>OptionalTest_CopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_ConstructingCopyAssignmentTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_ConstructingCopyAssignmentTest_Test .OptionalTest_ConstructingCopyAssignmentTest_Test()">
          <Val>OptionalTest_ConstructingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_ConstructingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_ConstructingCopyAssignmentTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_ConstructingCopyAssignmentTest_Test .OptionalTest_ConstructingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_ConstructingCopyAssignmentTest_Test&amp;)">
          <Val>OptionalTest_ConstructingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyingCopyAssignmentTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyingCopyAssignmentTest_Test .OptionalTest_CopyingCopyAssignmentTest_Test()">
          <Val>OptionalTest_CopyingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_CopyingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_CopyingCopyAssignmentTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_CopyingCopyAssignmentTest_Test .OptionalTest_CopyingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_CopyingCopyAssignmentTest_Test&amp;)">
          <Val>OptionalTest_CopyingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_DeletingCopyAssignmentTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_DeletingCopyAssignmentTest_Test .OptionalTest_DeletingCopyAssignmentTest_Test()">
          <Val>OptionalTest_DeletingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_DeletingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_DeletingCopyAssignmentTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_DeletingCopyAssignmentTest_Test .OptionalTest_DeletingCopyAssignmentTest_Test(const&lt;anonymous &gt;::OptionalTest_DeletingCopyAssignmentTest_Test&amp;)">
          <Val>OptionalTest_DeletingCopyAssignmentTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_NullCopyConstructionTest_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NullCopyConstructionTest_Test .OptionalTest_NullCopyConstructionTest_Test()">
          <Val>OptionalTest_NullCopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_NullCopyConstructionTest_Test(const&lt;anonymous &gt;::OptionalTest_NullCopyConstructionTest_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_NullCopyConstructionTest_Test .OptionalTest_NullCopyConstructionTest_Test(const&lt;anonymous &gt;::OptionalTest_NullCopyConstructionTest_Test&amp;)">
          <Val>OptionalTest_NullCopyConstructionTest_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyConstruction_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyConstruction_Test .OptionalTest_MoveOnlyConstruction_Test()">
          <Val>OptionalTest_MoveOnlyConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyConstruction_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyConstruction_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyConstruction_Test .OptionalTest_MoveOnlyConstruction_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyConstruction_Test&amp;)">
          <Val>OptionalTest_MoveOnlyConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyMoveConstruction_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyMoveConstruction_Test .OptionalTest_MoveOnlyMoveConstruction_Test()">
          <Val>OptionalTest_MoveOnlyMoveConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyMoveConstruction_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyMoveConstruction_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyMoveConstruction_Test .OptionalTest_MoveOnlyMoveConstruction_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyMoveConstruction_Test&amp;)">
          <Val>OptionalTest_MoveOnlyMoveConstruction_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssignment_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssignment_Test .OptionalTest_MoveOnlyAssignment_Test()">
          <Val>OptionalTest_MoveOnlyAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyAssignment_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssignment_Test .OptionalTest_MoveOnlyAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyAssignment_Test&amp;)">
          <Val>OptionalTest_MoveOnlyAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyInitializingAssignment_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyInitializingAssignment_Test .OptionalTest_MoveOnlyInitializingAssignment_Test()">
          <Val>OptionalTest_MoveOnlyInitializingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyInitializingAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyInitializingAssignment_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyInitializingAssignment_Test .OptionalTest_MoveOnlyInitializingAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyInitializingAssignment_Test&amp;)">
          <Val>OptionalTest_MoveOnlyInitializingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyNullingAssignment_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyNullingAssignment_Test .OptionalTest_MoveOnlyNullingAssignment_Test()">
          <Val>OptionalTest_MoveOnlyNullingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyNullingAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyNullingAssignment_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyNullingAssignment_Test .OptionalTest_MoveOnlyNullingAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyNullingAssignment_Test&amp;)">
          <Val>OptionalTest_MoveOnlyNullingAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssigningAssignment_Test()" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssigningAssignment_Test .OptionalTest_MoveOnlyAssigningAssignment_Test()">
          <Val>OptionalTest_MoveOnlyAssigningAssignment_Test</Val>
        </Row>
        <Row Name="OptionalTest_MoveOnlyAssigningAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyAssigningAssignment_Test&amp;)" FullName="anonymous_namespace{optionaltest.cpp} .OptionalTest_MoveOnlyAssigningAssignment_Test .OptionalTest_MoveOnlyAssigningAssignment_Test(const&lt;anonymous &gt;::OptionalTest_MoveOnlyAssigningAssignment_Test&amp;)">
          <Val>OptionalTest_MoveOnlyAssigningAssignment_Test</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Avoid fields with name too long" ContentTruncatedThreshold="100" FullName="Naming Conventions \ Avoid fields with name too long" QueryId="Query3313526011" NbNodeMatched="84" NbNodeTested="26990" KindOfNode=" fields">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;fields&amp;#0160;with&amp;#0160;name&amp;#0160;too&amp;#0160;long&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&amp;#0160;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Fields&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Length&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;35&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;f&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;The&amp;#0160;regex&amp;#0160;matches&amp;#0160;fields&amp;#0160;with&amp;#0160;name&amp;#0160;longer&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;than&amp;#0160;35&amp;#0160;characters.&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Field&amp;#0160;Name&amp;#0160;doesn't&amp;#0160;contain&amp;#0160;the&amp;#0160;type&amp;#0160;and&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;namespace&amp;#0160;prefix,&amp;#0160;FullName&amp;#0160;does.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>fields</Column>
      </Columns>
      <Rows>
        <Row Name="gtest_BitVectorTest_TrivialOperation_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_TrivialOperation_registered_" />
        <Row Name="gtest_BitVectorTest_CompoundAssignment_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_CompoundAssignment_registered_" />
        <Row Name="gtest_BitVectorTest_ProxyIndex_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_ProxyIndex_registered_" />
        <Row Name="gtest_BitVectorTest_PortableBitMask_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_PortableBitMask_registered_" />
        <Row Name="gtest_BitVectorTest_BinOps_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_BinOps_registered_" />
        <Row Name="gtest_BitVectorTest_RangeOps_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_RangeOps_registered_" />
        <Row Name="gtest_BitVectorTest_CompoundTestReset_registered_" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals .gtest_BitVectorTest_CompoundTestReset_registered_" />
        <Row Name="gtest_DenseMapTest_EmptyIntMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EmptyIntMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_ConstEmptyMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ConstEmptyMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_SingleEntryMapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_SingleEntryMapTest_registered_" />
        <Row Name="gtest_DenseMapTest_ClearTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ClearTest_registered_" />
        <Row Name="gtest_DenseMapTest_EraseTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EraseTest_registered_" />
        <Row Name="gtest_DenseMapTest_EraseTest2_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_EraseTest2_registered_" />
        <Row Name="gtest_DenseMapTest_InsertTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_InsertTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorNotSmallTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorNotSmallTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorFromDefaultTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorFromDefaultTest_registered_" />
        <Row Name="gtest_DenseMapTest_CopyConstructorFromEmptyTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_CopyConstructorFromEmptyTest_registered_" />
        <Row Name="gtest_DenseMapTest_AssignmentTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_AssignmentTest_registered_" />
        <Row Name="gtest_DenseMapTest_SwapTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_SwapTest_registered_" />
        <Row Name="gtest_DenseMapTest_IterationTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_IterationTest_registered_" />
        <Row Name="gtest_DenseMapTest_ConstIteratorTest_registered_" FullName="anonymous_namespace{densemaptest.cpp}.__Globals .gtest_DenseMapTest_ConstIteratorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_EmptyVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EmptyVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_PushPopTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_PushPopTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ClearTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ClearTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeShrinkTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeShrinkTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeGrowTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeGrowTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeWithElementsTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeWithElementsTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ResizeFillTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ResizeFillTest_registered_" />
        <Row Name="gtest_SmallVectorTest_OverflowTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_OverflowTest_registered_" />
        <Row Name="gtest_SmallVectorTest_IterationTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_IterationTest_registered_" />
        <Row Name="gtest_SmallVectorTest_SwapTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_SwapTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AppendTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AppendTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AppendRepeatedTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AppendRepeatedTest_registered_" />
        <Row Name="gtest_SmallVectorTest_AssignTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_AssignTest_registered_" />
        <Row Name="gtest_SmallVectorTest_MoveAssignTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_MoveAssignTest_registered_" />
        <Row Name="gtest_SmallVectorTest_EraseTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EraseTest_registered_" />
        <Row Name="gtest_SmallVectorTest_EraseRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_EraseRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertCopy_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertCopy_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedAtEndTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedAtEndTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRepeatedEmptyTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRepeatedEmptyTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertRangeAtEndTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertRangeAtEndTest_registered_" />
        <Row Name="gtest_SmallVectorTest_InsertEmptyRangeTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_InsertEmptyRangeTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ComparisonTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ComparisonTest_registered_" />
        <Row Name="gtest_SmallVectorTest_ConstVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_ConstVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_DirectVectorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_DirectVectorTest_registered_" />
        <Row Name="gtest_SmallVectorTest_IteratorTest_registered_" FullName="anonymous_namespace{smallvectortest.cpp}.__Globals .gtest_SmallVectorTest_IteratorTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_EmptyTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_EmptyTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_PushPopBack_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_PushPopBack_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_ClearTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_ClearTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_CopyAndMoveCtorTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_CopyAndMoveCtorTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_CopyAndMoveTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_CopyAndMoveTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_EraseTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_EraseTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_EraseRangeTest_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_EraseRangeTest_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_Insert_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_Insert_registered_" />
        <Row Name="gtest_TinyPtrVectorTest_InsertRange_registered_" FullName="anonymous_namespace{tinyptrvectortest.cpp}.__Globals .gtest_TinyPtrVectorTest_InsertRange_registered_" />
        <Row Name="gtest_ValueMapTest_FollowsValue_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_FollowsValue_registered_" />
        <Row Name="gtest_ValueMapTest_OperationsWork_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_OperationsWork_registered_" />
        <Row Name="gtest_ValueMapTest_Iteration_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_Iteration_registered_" />
        <Row Name="gtest_ValueMapTest_DefaultCollisionBehavior_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_DefaultCollisionBehavior_registered_" />
        <Row Name="gtest_ValueMapTest_ConfiguredCollisionBehavior_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_ConfiguredCollisionBehavior_registered_" />
        <Row Name="gtest_ValueMapTest_LocksMutex_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_LocksMutex_registered_" />
        <Row Name="gtest_ValueMapTest_NoFollowRAUW_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_NoFollowRAUW_registered_" />
        <Row Name="gtest_ValueMapTest_CallsConfig_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_CallsConfig_registered_" />
        <Row Name="gtest_ValueMapTest_SurvivesModificationByConfig_registered_" FullName="anonymous_namespace{valuemaptest.cpp}.__Globals .gtest_ValueMapTest_SurvivesModificationByConfig_registered_" />
        <Row Name="HonorSignDependentRoundingFPMathOption" FullName="llvm.TargetOptions.HonorSignDependentRoundingFPMathOption" />
        <Row Name="LLVMAtomicOrderingSequentiallyConsistent" FullName="LLVMAtomicOrdering.LLVMAtomicOrderingSequentiallyConsistent" />
        <Row Name="MaxNumOfInstsBetweenNewValueStoreAndTFR" FullName="__Globals.MaxNumOfInstsBetweenNewValueStoreAndTFR" />
        <Row Name="HasStaticCtorDtorReferenceInStaticMode" FullName="llvm.MCAsmInfo.HasStaticCtorDtorReferenceInStaticMode" />
        <Row Name="EncodingCounterTagAndExpansionRegionTagBits" FullName="llvm.coverage.Counter.EncodingCounterTagAndExpansionRegionTagBits" />
        <Row Name="ConsideredInstUsesAlreadyWrittenVectorElement" FullName="anonymous_namespace{r600packetizer.cpp}.R600PacketizerList .ConsideredInstUsesAlreadyWrittenVectorElement" />
        <Row Name="LLVMAtomicOrderingSequentiallyConsistent" FullName="LLVMAtomicOrdering.LLVMAtomicOrderingSequentiallyConsistent" />
        <Row Name="macho_fixed_virtual_memory_shared_lib" FullName="llvm.sys.fs.file_magic+Impl.macho_fixed_virtual_memory_shared_lib" />
        <Row Name="macho_dynamically_linked_shared_lib_stub" FullName="llvm.sys.fs.file_magic+Impl.macho_dynamically_linked_shared_lib_stub" />
        <Row Name="ExperimentalVectorWideningLegalization" FullName="__Globals.ExperimentalVectorWideningLegalization" />
        <Row Name="UNWIND_FRAMELESS_STACK_REG_PERMUTATION" FullName="anonymous_namespace{x86asmbackend.cpp}.CU.CompactUnwindEncodings .UNWIND_FRAMELESS_STACK_REG_PERMUTATION" />
        <Row Name="LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN" FullName="lto_symbol_attributes.LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN" />
        <Row Name="LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC" FullName="lto_codegen_model.LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC" />
        <Row Name="gtest_AllocationTestsMappedMemoryTest_dummy_" FullName="anonymous_namespace{memorytest.cpp}.__Globals .gtest_AllocationTestsMappedMemoryTest_dummy_" />
        <Row Name="macho_fixed_virtual_memory_shared_lib" FullName="anonymous_namespace{path.cpp}.__Globals .macho_fixed_virtual_memory_shared_lib" />
        <Row Name="FLAGS_gtest_show_internal_stack_frames" FullName="testing.__Globals.FLAGS_gtest_show_internal_stack_frames" />
        <Row Name="Sum:" FullName="Stat" />
        <Row Name="Average:" FullName="Stat" />
        <Row Name="Minimum:" FullName="Stat" />
        <Row Name="Maximum:" FullName="Stat" />
        <Row Name="Standard deviation:" FullName="Stat" />
        <Row Name="Variance:" FullName="Stat" />
      </Rows>
    </Query>
    <Query Status="Warn" Name="Namespace name should correspond to file location" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Naming Conventions \ Namespace name should correspond to file location" QueryId="Query3195137070" NbNodeMatched="3077" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Namespace&amp;#0160;name&amp;#0160;should&amp;#0160;correspond&amp;#0160;to&amp;#0160;file&amp;#0160;location&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;For&amp;#0160;a&amp;#0160;good&amp;#0160;code&amp;#0160;organization,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;do&amp;#0160;mirror&amp;#0160;the&amp;#0160;namespaces&amp;#0160;hierarchy&amp;#0160;and&amp;#0160;the&amp;#0160;source&amp;#0160;files&amp;#0160;directories&amp;#0160;tree.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Namespaces&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Replace&amp;#0160;dots&amp;#0160;by&amp;#0160;spaces&amp;#0160;in&amp;#0160;namespace&amp;#0160;name&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'.'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Look&amp;#0160;at&amp;#0160;source&amp;#0160;file&amp;#0160;decl&amp;#0160;of&amp;#0160;JustMyCode&amp;#0160;type's&amp;#0160;declared&amp;#0160;in&amp;#0160;n&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToString&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Replace&amp;#0160;dots&amp;#0160;and&amp;#0160;path&amp;#0160;separators&amp;#0160;by&amp;#0160;spaces&amp;#0160;in&amp;#0160;source&amp;#0160;files&amp;#0160;names&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'.'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'\\'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsThirdParty&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&amp;#0160;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>dirCorresponding</Column>
        <Column>sourceFilePath</Column>
      </Columns>
      <Rows>
        <Row Name="APFloatTest_isSignaling_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_next_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_FMA_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_Denormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_Zero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_toString_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_toInteger_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="anonymous_namespace{apfloattest.cpp}.__Globals">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="APFloatTest_makeNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_SemanticsDeath_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_exactInverse_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_roundToIntegral_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getLargest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getSmallest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_convert_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_PPCDoubleDouble_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNegative_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isFinite_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isInfinity_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isFiniteNonZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_add_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_subtract_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_multiply_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_divide_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_ShiftLeftByZero_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i128_NegativeCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i33_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i65_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i128_PositiveCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i1_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i1_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_fromString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_FromArray_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_FromArray_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded8_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded8_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded10_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded16_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded16_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_toString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Log2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Log2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_magic_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magic_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_magicu_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magicu_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringDeath_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringDeath_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_mul_clear_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_mul_clear_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Rotate_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Splat_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Splat_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_tcDecrement_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_tcDecrement_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_arrayAccess_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_arrayAccess_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_LargeAPIntConstruction_Test" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_nearestLogBase2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_nearestLogBase2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APSIntTest_MoveTest_Test" FullName="anonymous_namespace{apsinttest.cpp}.APSIntTest_MoveTest_Test">
          <Val>anonymous_namespace{apsinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APSIntTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="llvm.__Globals">
          <Val>llvm</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="is_hashable_data&lt;llvm::LargeTestInteger&gt;" FullName="llvm.hashing.detail.is_hashable_data&lt;llvm::LargeTestInteger&gt;">
          <Val>llvm hashing detail</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\HashingTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest&lt;T&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest&lt;T&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="anonymous_namespace{bitvectortest.cpp}.__Globals">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_ProxyIndex_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_ProxyIndex_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_BinOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_BinOps_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_RangeOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_RangeOps_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="FixedDAGDeltaAlgorithm" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.FixedDAGDeltaAlgorithm">
          <Val>anonymous_namespace{dagdeltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DAGDeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.__Globals">
          <Val>anonymous_namespace{dagdeltaalgorithmtest cpp}</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="DAGDeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp} .DAGDeltaAlgorithmTest_Basic_Test">
          <Val>anonymous_namespace{dagdeltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DAGDeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="std.__Globals">
          <Val>std</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="FixedDeltaAlgorithm" FullName="anonymous_namespace{deltaalgorithmtest.cpp}.FixedDeltaAlgorithm">
          <Val>anonymous_namespace{deltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="anonymous_namespace{deltaalgorithmtest.cpp}.__Globals">
          <Val>anonymous_namespace{deltaalgorithmtest cpp}</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="DeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{deltaalgorithmtest.cpp} .DeltaAlgorithmTest_Basic_Test">
          <Val>anonymous_namespace{deltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="__Globals" FullName="anonymous_namespace{densemaptest.cpp}.__Globals">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>c:\GlobalMembers</Val>
        </Row>
        <Row Name="CtorTester" FullName="anonymous_namespace{densemaptest.cpp}.CtorTester">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="CtorTesterMapInfo" FullName="anonymous_namespace{densemaptest.cpp}.CtorTesterMapInfo">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest&lt;T&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_ClearTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_ClearTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EraseTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EraseTest2_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest2_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_InsertTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_InsertTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_AssignmentTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_AssignmentTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Source Files Organization" FullName="Source Files Organization" GroupId="GroupOfRules-1327291969" NbQueries="4" NbErrors="0" NbWarns="4" Status="Warn">
    <Query Status="Warn" Name="Avoid defining multiple types in a source file" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Source Files Organization \ Avoid defining multiple types in a source file" QueryId="Query2134412812" NbNodeMatched="665" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Avoid&amp;#0160;defining&amp;#0160;multiple&amp;#0160;types&amp;#0160;in&amp;#0160;a&amp;#0160;source&amp;#0160;file&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Build&amp;#0160;a&amp;#0160;lookup&amp;#0160;indexed&amp;#0160;by&amp;#0160;source&amp;#0160;files,&amp;#0160;values&amp;#0160;being&amp;#0160;a&amp;#0160;sequence&amp;#0160;of&amp;#0160;types&amp;#0160;defined&amp;#0160;in&amp;#0160;the&amp;#0160;source&amp;#0160;file.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;except&amp;#0160;nested&amp;#0160;types&amp;#0160;and&amp;#0160;types&amp;#0160;generated&amp;#0160;by&amp;#0160;compilers!&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGeneratedByCompiler&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsNested&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;It&amp;#0160;could&amp;#0160;make&amp;#0160;sense&amp;#0160;to&amp;#0160;not&amp;#0160;apply&amp;#0160;this&amp;#0160;rule&amp;#0160;for&amp;#0160;enumerations.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;amp;&amp;amp;&amp;#0160;!t.IsEnumeration)&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;We&amp;#0160;use&amp;#0160;multi-key,&amp;#0160;since&amp;#0160;a&amp;#0160;type&amp;#0160;can&amp;#0160;be&amp;#0160;declared&amp;#0160;in&amp;#0160;multiple&amp;#0160;source&amp;#0160;files.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToMultiKeyLookup&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Select&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;d&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;d&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceFile&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFile&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Key&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;CQLinq&amp;#0160;doesn't&amp;#0160;let&amp;#0160;indexing&amp;#0160;result&amp;#0160;with&amp;#0160;sourceFile&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;so&amp;#0160;we&amp;#0160;choose&amp;#0160;a&amp;#0160;typeIndex&amp;#0160;in&amp;#0160;types,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;preferably&amp;#0160;the&amp;#0160;type&amp;#0160;that&amp;#0160;has&amp;#0160;the&amp;#0160;file&amp;#0160;name.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typeWithSourceFileName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FirstOrDefault&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FileNameWithoutExtension&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typeIndex&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typeWithSourceFileName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;First&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typeIndex&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@group&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;as&lt;/font&gt;&amp;#0160;&lt;font color='#2B91BD'&gt;IEnumerable&lt;/font&gt;&lt;font color='#000000'&gt;&amp;lt;&lt;/font&gt;&lt;font color='#2B91BD'&gt;IType&lt;/font&gt;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;sourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FilePathString&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>types</Column>
        <Column>FilePathString</Column>
      </Columns>
      <Rows>
        <Row Name="MapVectorTest_insert_pop_Test" FullName="MapVectorTest_insert_pop_Test">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\MapVectorTest.cpp</Val>
        </Row>
        <Row Name="SmallPtrSetTest_Assignment_Test" FullName="SmallPtrSetTest_Assignment_Test">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SmallPtrSetTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isSignaling_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test">
          <Val>40 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_ShiftLeftByZero_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test">
          <Val>24 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="ArrayRefTest_AllocatorCopy_Test" FullName="llvm.ArrayRefTest_AllocatorCopy_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\ArrayRefTest.cpp</Val>
        </Row>
        <Row Name="LargeTestInteger" FullName="llvm.LargeTestInteger">
          <Val>12 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\HashingTest.cpp</Val>
        </Row>
        <Row Name="IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test" FullName="llvm.IntrusiveRefCntPtr_RefCountedBaseVPTRCopyDoesNotLeak_Test">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\IntrusiveRefCntPtrTest.cpp</Val>
        </Row>
        <Row Name="Graph&lt;N&gt;" FullName="llvm.Graph&lt;N&gt;">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SCCIteratorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest&lt;T&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest&lt;T&gt;">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="FixedDAGDeltaAlgorithm" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.FixedDAGDeltaAlgorithm">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DAGDeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="FixedDeltaAlgorithm" FullName="anonymous_namespace{deltaalgorithmtest.cpp}.FixedDeltaAlgorithm">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest&lt;T&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;">
          <Val>22 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseSetTest" FullName="anonymous_namespace{densesettest.cpp}.DenseSetTest">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseSetTest.cpp</Val>
        </Row>
        <Row Name="Node" FullName="anonymous_namespace{ilisttest.cpp}.Node">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\ilistTest.cpp</Val>
        </Row>
        <Row Name="ImmutableMapTest_EmptyIntMapTest_Test" FullName="anonymous_namespace{immutablemaptest.cpp} .ImmutableMapTest_EmptyIntMapTest_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\ImmutableMapTest.cpp</Val>
        </Row>
        <Row Name="ImmutableSetTest" FullName="anonymous_namespace{immutablesettest.cpp}.ImmutableSetTest">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\ImmutableSetTest.cpp</Val>
        </Row>
        <Row Name="IntervalMapTest_EmptyMap_Test" FullName="anonymous_namespace{intervalmaptest.cpp}.IntervalMapTest_EmptyMap_Test">
          <Val>9 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\IntervalMapTest.cpp</Val>
        </Row>
        <Row Name="MakeUniqueTest_SingleObject_Test" FullName="anonymous_namespace{makeuniquetest.cpp} .MakeUniqueTest_SingleObject_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\MakeUniqueTest.cpp</Val>
        </Row>
        <Row Name="OptionalTest" FullName="anonymous_namespace{optionaltest.cpp}.OptionalTest">
          <Val>18 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\OptionalTest.cpp</Val>
        </Row>
        <Row Name="PackedVectorTest_Operation_Test" FullName="anonymous_namespace{packedvectortest.cpp} .PackedVectorTest_Operation_Test">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\PackedVectorTest.cpp</Val>
        </Row>
        <Row Name="PointerIntPairTest" FullName="anonymous_namespace{pointerintpairtest.cpp}.PointerIntPairTest">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\PointerIntPairTest.cpp</Val>
        </Row>
        <Row Name="PointerUnionTest" FullName="anonymous_namespace{pointeruniontest.cpp}.PointerUnionTest">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\PointerUnionTest.cpp</Val>
        </Row>
        <Row Name="SmallStringTest" FullName="anonymous_namespace{smallstringtest.cpp}.SmallStringTest">
          <Val>14 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SmallStringTest.cpp</Val>
        </Row>
        <Row Name="SmallVectorTest&lt;VectorT&gt;" FullName="anonymous_namespace{smallvectortest.cpp}.SmallVectorTest&lt;VectorT&gt;">
          <Val>35 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SmallVectorTest.cpp</Val>
        </Row>
        <Row Name="SparseMultiSetTest_EmptySet_Test" FullName="anonymous_namespace{sparsemultisettest.cpp} .SparseMultiSetTest_EmptySet_Test">
          <Val>6 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SparseMultiSetTest.cpp</Val>
        </Row>
        <Row Name="SparseSetTest_EmptySet_Test" FullName="anonymous_namespace{sparsesettest.cpp}.SparseSetTest_EmptySet_Test">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\SparseSetTest.cpp</Val>
        </Row>
        <Row Name="StringMapTest" FullName="anonymous_namespace{stringmaptest.cpp}.StringMapTest">
          <Val>22 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\StringMapTest.cpp</Val>
        </Row>
        <Row Name="StringRefTest_Construction_Test" FullName="anonymous_namespace{stringreftest.cpp}.StringRefTest_Construction_Test">
          <Val>24 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\StringRefTest.cpp</Val>
        </Row>
        <Row Name="TinyPtrVectorTest&lt;VectorT&gt;" FullName="anonymous_namespace{tinyptrvectortest.cpp}.TinyPtrVectorTest&lt;VectorT&gt;">
          <Val>10 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\TinyPtrVectorTest.cpp</Val>
        </Row>
        <Row Name="TripleTest_BasicParsing_Test" FullName="anonymous_namespace{tripletest.cpp}.TripleTest_BasicParsing_Test">
          <Val>10 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\TripleTest.cpp</Val>
        </Row>
        <Row Name="TwineTest_Construction_Test" FullName="anonymous_namespace{twinetest.cpp}.TwineTest_Construction_Test">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\TwineTest.cpp</Val>
        </Row>
        <Row Name="VariadicFunctionTest_WorksForClassTypes_Test" FullName="anonymous_namespace{variadicfunctiontest.cpp} .VariadicFunctionTest_WorksForClassTypes_Test">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\VariadicFunctionTest.cpp</Val>
        </Row>
        <Row Name="IsPotentiallyReachableTest_SameBlockNoPath_Test" FullName="IsPotentiallyReachableTest_SameBlockNoPath_Test">
          <Val>16 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\Analysis\CFGTest.cpp</Val>
        </Row>
        <Row Name="LazyCallGraphTest_BasicGraphFormation_Test" FullName="anonymous_namespace{lazycallgraphtest.cpp} .LazyCallGraphTest_BasicGraphFormation_Test">
          <Val>9 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\Analysis\LazyCallGraphTest.cpp</Val>
        </Row>
        <Row Name="ScalarEvolutionsTest" FullName="llvm.anonymous_namespace{scalarevolutiontest.cpp}.ScalarEvolutionsTest">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\Analysis\ScalarEvolutionTest.cpp</Val>
        </Row>
        <Row Name="MixedTBAATest" FullName="llvm.anonymous_namespace{mixedtbaatest.cpp}.MixedTBAATest">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\Analysis\MixedTBAATest.cpp</Val>
        </Row>
        <Row Name="DIEHashTest_Data1_Test" FullName="anonymous_namespace{diehashtest.cpp}.DIEHashTest_Data1_Test">
          <Val>19 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\CodeGen\DIEHashTest.cpp</Val>
        </Row>
        <Row Name="TestDebugIR" FullName="anonymous_namespace{debugir.cpp}.TestDebugIR">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\Transforms\DebugIR\DebugIR.cpp</Val>
        </Row>
        <Row Name="DWARFFormValue_FixedFormSizes_Test" FullName="anonymous_namespace{dwarfformvaluetest.cpp} .DWARFFormValue_FixedFormSizes_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\DebugInfo\DWARFFormValueTest.cpp</Val>
        </Row>
        <Row Name="ExecutionEngineTest" FullName="anonymous_namespace{executionenginetest.cpp}.ExecutionEngineTest">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ExecutionEngine\ExecutionEngineTest.cpp</Val>
        </Row>
        <Row Name="Pattern" FullName="Pattern">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\utils\FileCheck\FileCheck.cpp</Val>
        </Row>
        <Row Name="Attributes_Uniquing_Test" FullName="anonymous_namespace{attributestest.cpp}.Attributes_Uniquing_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\AttributesTest.cpp</Val>
        </Row>
        <Row Name="ConstantRangeTest" FullName="anonymous_namespace{constantrangetest.cpp}.ConstantRangeTest">
          <Val>23 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\ConstantRangeTest.cpp</Val>
        </Row>
        <Row Name="TypeBuilder&lt;&lt;anonymous&gt;::MyType,cross&gt;" FullName="llvm.TypeBuilder&lt;&lt;anonymous&gt;::MyType,cross&gt;">
          <Val>12 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\TypeBuilderTest.cpp</Val>
        </Row>
        <Row Name="ConstantsTest_Integer_i1_Test" FullName="llvm.anonymous_namespace{constantstest.cpp} .ConstantsTest_Integer_i1_Test">
          <Val>6 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\ConstantsTest.cpp</Val>
        </Row>
        <Row Name="DPass" FullName="llvm.anonymous_namespace{dominatortreetest.cpp}.DPass">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\DominatorTreeTest.cpp</Val>
        </Row>
        <Row Name="InstructionsTest_ReturnInst_Test" FullName="llvm.anonymous_namespace{instructionstest.cpp} .InstructionsTest_ReturnInst_Test">
          <Val>10 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\InstructionsTest.cpp</Val>
        </Row>
        <Row Name="ModuleNDNM" FullName="llvm.anonymous_namespace{legacypassmanagertest.cpp}.ModuleNDNM">
          <Val>15 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\LegacyPassManagerTest.cpp</Val>
        </Row>
        <Row Name="VerifierTest_Branch_i1_Test" FullName="llvm.anonymous_namespace{verifiertest.cpp}.VerifierTest_Branch_i1_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\VerifierTest.cpp</Val>
        </Row>
        <Row Name="WaymarkTest_NativeArray_Test" FullName="llvm.anonymous_namespace{waymarktest.cpp}.WaymarkTest_NativeArray_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\WaymarkTest.cpp</Val>
        </Row>
        <Row Name="IRBuilderTest" FullName="anonymous_namespace{irbuildertest.cpp}.IRBuilderTest">
          <Val>9 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\IRBuilderTest.cpp</Val>
        </Row>
        <Row Name="MDBuilderTest" FullName="anonymous_namespace{mdbuildertest.cpp}.MDBuilderTest">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\MDBuilderTest.cpp</Val>
        </Row>
        <Row Name="MetadataTest" FullName="anonymous_namespace{metadatatest.cpp}.MetadataTest">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\MetadataTest.cpp</Val>
        </Row>
        <Row Name="PassManagerTest" FullName="anonymous_namespace{passmanagertest.cpp}.PassManagerTest">
          <Val>10 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\PassManagerTest.cpp</Val>
        </Row>
        <Row Name="PatternMatchTest" FullName="anonymous_namespace{patternmatch.cpp}.PatternMatchTest">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\PatternMatch.cpp</Val>
        </Row>
        <Row Name="ValueHandle" FullName="anonymous_namespace{valuehandletest.cpp}.ValueHandle">
          <Val>18 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\ValueHandleTest.cpp</Val>
        </Row>
        <Row Name="ValueMapTest&lt;T&gt;" FullName="anonymous_namespace{valuemaptest.cpp}.ValueMapTest&lt;T&gt;">
          <Val>15 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\ValueMapTest.cpp</Val>
        </Row>
        <Row Name="ValueTest_UsedInBasicBlock_Test" FullName="anonymous_namespace{valuetest.cpp}.ValueTest_UsedInBasicBlock_Test">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\IR\ValueTest.cpp</Val>
        </Row>
        <Row Name="JITEventListenerTest" FullName="anonymous_namespace{jiteventlistenertest.cpp}.JITEventListenerTest">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ExecutionEngine\JIT\JITEventListenerTest.cpp</Val>
        </Row>
        <Row Name="JITMemoryManagerTest_NoAllocations_Test" FullName="anonymous_namespace{jitmemorymanagertest.cpp} .JITMemoryManagerTest_NoAllocations_Test">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ExecutionEngine\JIT\JITMemoryManagerTest.cpp</Val>
        </Row>
        <Row Name="JITTest" FullName="anonymous_namespace{jittest.cpp}.JITTest">
          <Val>15 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ExecutionEngine\JIT\JITTest.cpp</Val>
        </Row>
        <Row Name="MultiJitTest_EagerMode_Test" FullName="anonymous_namespace{multijittest.cpp}.MultiJitTest_EagerMode_Test">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ExecutionEngine\JIT\MultiJITTest.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter2\toy.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter3\toy.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter4\toy.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>10 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter5\toy.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>11 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter6\toy.cpp</Val>
        </Row>
        <Row Name="Token" FullName="Token">
          <Val>12 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\examples\Kaleidoscope\Chapter7\toy.cpp</Val>
        </Row>
        <Row Name="ScopedHandle&lt;HandleType&gt;" FullName="anonymous_namespace{killthedoctor.cpp}.ScopedHandle&lt;HandleType&gt;">
          <Val>8 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\utils\KillTheDoctor\KillTheDoctor.cpp</Val>
        </Row>
        <Row Name="AArch64AsmParser" FullName="anonymous_namespace{aarch64asmparser.cpp}.AArch64AsmParser">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AsmParser\AArch64AsmParser.cpp</Val>
        </Row>
        <Row Name="AArch64InstPrinter" FullName="llvm.AArch64InstPrinter">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\InstPrinter\AArch64InstPrinter.h</Val>
        </Row>
        <Row Name="WidenVector" FullName="WidenVector">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64ISelDAGToDAG.cpp</Val>
        </Row>
        <Row Name="AlignMode" FullName="AlignMode">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64ISelLowering.cpp</Val>
        </Row>
        <Row Name="AArch64InstrInfo" FullName="llvm.AArch64InstrInfo">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64InstrInfo.h</Val>
        </Row>
        <Row Name="AArch64TargetLowering" FullName="llvm.AArch64TargetLowering">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64ISelLowering.h</Val>
        </Row>
        <Row Name="AArch64TargetMachine" FullName="llvm.AArch64TargetMachine">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64TargetMachine.h</Val>
        </Row>
        <Row Name="AArch64_ELFTargetObjectFile" FullName="llvm.AArch64_ELFTargetObjectFile">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64TargetObjectFile.h</Val>
        </Row>
        <Row Name="AArch64ConditionalCompares" FullName="anonymous_namespace{aarch64conditionalcompares.cpp} .AArch64ConditionalCompares">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\AArch64ConditionalCompares.cpp</Val>
        </Row>
        <Row Name="AArch64MCAsmInfoDarwin" FullName="llvm.AArch64MCAsmInfoDarwin">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\MCTargetDesc\AArch64MCAsmInfo.h</Val>
        </Row>
        <Row Name="MCStreamer" FullName="llvm.MCStreamer">
          <Val>12 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\MC\MCStreamer.h</Val>
        </Row>
        <Row Name="AArch64AsmBackend" FullName="anonymous_namespace{aarch64asmbackend.cpp}.AArch64AsmBackend">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\MCTargetDesc\AArch64AsmBackend.cpp</Val>
        </Row>
        <Row Name="AArch64NamedImmMapper" FullName="llvm.AArch64NamedImmMapper">
          <Val>28 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\Utils\AArch64BaseInfo.h</Val>
        </Row>
        <Row Name="ARMAsmParser" FullName="anonymous_namespace{armasmparser.cpp}.ARMAsmParser">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\AsmParser\ARMAsmParser.cpp</Val>
        </Row>
        <Row Name="ARM_MLxEntry" FullName="ARM_MLxEntry">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMBaseInstrInfo.cpp</Val>
        </Row>
        <Row Name="HABaseType" FullName="HABaseType">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMISelLowering.cpp</Val>
        </Row>
        <Row Name="AlignMode" FullName="AlignMode">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMSubtarget.cpp</Val>
        </Row>
        <Row Name="ARMBaseRegisterInfo" FullName="llvm.ARMBaseRegisterInfo">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMBaseRegisterInfo.h</Val>
        </Row>
        <Row Name="ARMTargetLowering" FullName="llvm.ARMTargetLowering">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMISelLowering.h</Val>
        </Row>
        <Row Name="ARMAsmPrinter" FullName="llvm.ARMAsmPrinter">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMAsmPrinter.h</Val>
        </Row>
        <Row Name="ARMConstantPoolValue" FullName="llvm.ARMConstantPoolValue">
          <Val>6 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMConstantPoolValue.h</Val>
        </Row>
        <Row Name="ARMTargetMachine" FullName="llvm.ARMTargetMachine">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMTargetMachine.h</Val>
        </Row>
        <Row Name="ShiftOpc" FullName="llvm.ARM_AM.ShiftOpc">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\MCTargetDesc\ARMAddressingModes.h</Val>
        </Row>
        <Row Name="ARMExpandPseudo" FullName="anonymous_namespace{armexpandpseudoinsts.cpp}.ARMExpandPseudo">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMExpandPseudoInsts.cpp</Val>
        </Row>
        <Row Name="ARMFastISel" FullName="anonymous_namespace{armfastisel.cpp}.ARMFastISel">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMFastISel.cpp</Val>
        </Row>
        <Row Name="AddrMode2Type" FullName="anonymous_namespace{armiseldagtodag.cpp}.AddrMode2Type">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMISelDAGToDAG.cpp</Val>
        </Row>
        <Row Name="ARMLoadStoreOpt" FullName="anonymous_namespace{armloadstoreoptimizer.cpp}.ARMLoadStoreOpt">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\ARMLoadStoreOptimizer.cpp</Val>
        </Row>
        <Row Name="ReduceEntry" FullName="anonymous_namespace{thumb2sizereduction.cpp}.ReduceEntry">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\Thumb2SizeReduction.cpp</Val>
        </Row>
        <Row Name="MCELFStreamer" FullName="llvm.MCELFStreamer">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\MC\MCELFStreamer.h</Val>
        </Row>
        <Row Name="ARMMCAsmInfoDarwin" FullName="llvm.ARMMCAsmInfoDarwin">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\MCTargetDesc\ARMMCAsmInfo.h</Val>
        </Row>
        <Row Name="CondCodes" FullName="llvm.ARMCC.CondCodes">
          <Val>9 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\MCTargetDesc\ARMBaseInfo.h</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Namespace name should correspond to file location" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Source Files Organization \ Namespace name should correspond to file location" QueryId="Query403511532" NbNodeMatched="2804" NbNodeTested="6784" KindOfNode=" types">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Namespace&amp;#0160;name&amp;#0160;should&amp;#0160;correspond&amp;#0160;to&amp;#0160;file&amp;#0160;location&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;For&amp;#0160;a&amp;#0160;good&amp;#0160;code&amp;#0160;organization,&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;do&amp;#0160;mirror&amp;#0160;the&amp;#0160;namespaces&amp;#0160;hierarchy&amp;#0160;and&amp;#0160;the&amp;#0160;source&amp;#0160;files&amp;#0160;directories&amp;#0160;tree.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Namespaces&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Replace&amp;#0160;dots&amp;#0160;by&amp;#0160;spaces&amp;#0160;in&amp;#0160;namespace&amp;#0160;name&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Name&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'.'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Look&amp;#0160;at&amp;#0160;source&amp;#0160;file&amp;#0160;decl&amp;#0160;of&amp;#0160;JustMyCode&amp;#0160;type's&amp;#0160;declared&amp;#0160;in&amp;#0160;n&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;n&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToString&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Replace&amp;#0160;dots&amp;#0160;and&amp;#0160;path&amp;#0160;separators&amp;#0160;by&amp;#0160;spaces&amp;#0160;in&amp;#0160;source&amp;#0160;files&amp;#0160;names&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'.'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Replace&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#A31515'&gt;'\\'&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#A31515'&gt;'&amp;#0160;'&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirCorresponding&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;,&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;sourceFilePath&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&amp;#0160;</QueryHtml>
      <Columns>
        <Column>types</Column>
        <Column>dirCorresponding</Column>
        <Column>sourceFilePath</Column>
      </Columns>
      <Rows>
        <Row Name="APFloatTest_isSignaling_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isSignaling_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_next_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_next_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_FMA_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_FMA_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_Denormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Denormal_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_Zero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_Zero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_DecimalStringsWithoutNullTerminators_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_DecimalStringsWithoutNullTerminators_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalSingleExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalSingleExponentString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroDecimalLargeExponentString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroDecimalLargeExponentString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromZeroHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromZeroHexadecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromDecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromDecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_fromHexadecimalString_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_fromHexadecimalString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_toString_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toString_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_toInteger_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_toInteger_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_makeNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_makeNaN_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_SemanticsDeath_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_SemanticsDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalSignificandDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringDecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringDecimalExponentDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalSignificandDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalSignificandDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_StringHexadecimalExponentDeath_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_StringHexadecimalExponentDeath_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_exactInverse_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_exactInverse_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_roundToIntegral_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_roundToIntegral_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getLargest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getLargest_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getSmallest_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getSmallest_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getSmallestNormalized_Test" FullName="anonymous_namespace{apfloattest.cpp} .APFloatTest_getSmallestNormalized_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_getZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_getZero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_convert_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_convert_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_PPCDoubleDouble_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_PPCDoubleDouble_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNegative_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNegative_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNormal_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNormal_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isFinite_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFinite_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isInfinity_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isInfinity_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isNaN_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isNaN_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_isFiniteNonZero_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_isFiniteNonZero_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_add_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_add_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_subtract_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_subtract_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_multiply_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_multiply_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APFloatTest_divide_Test" FullName="anonymous_namespace{apfloattest.cpp}.APFloatTest_divide_Test">
          <Val>anonymous_namespace{apfloattest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APFloatTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_ShiftLeftByZero_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_ShiftLeftByZero_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i128_NegativeCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_NegativeCount_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i33_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i33_Count_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i65_Count_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i65_Count_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i128_PositiveCount_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i128_PositiveCount_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_i1_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_i1_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_fromString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_fromString_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_FromArray_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_FromArray_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded8_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded8_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded10_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded10_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringBitsNeeded16_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringBitsNeeded16_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_toString_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_toString_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Log2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Log2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_magic_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magic_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_magicu_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_magicu_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_StringDeath_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_StringDeath_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_mul_clear_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_mul_clear_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Rotate_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Rotate_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_Splat_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_Splat_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_tcDecrement_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_tcDecrement_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_arrayAccess_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_arrayAccess_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_LargeAPIntConstruction_Test" FullName="anonymous_namespace{apinttest.cpp} .APIntTest_LargeAPIntConstruction_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APIntTest_nearestLogBase2_Test" FullName="anonymous_namespace{apinttest.cpp}.APIntTest_nearestLogBase2_Test">
          <Val>anonymous_namespace{apinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APIntTest.cpp</Val>
        </Row>
        <Row Name="APSIntTest_MoveTest_Test" FullName="anonymous_namespace{apsinttest.cpp}.APSIntTest_MoveTest_Test">
          <Val>anonymous_namespace{apsinttest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\APSIntTest.cpp</Val>
        </Row>
        <Row Name="is_hashable_data&lt;llvm::LargeTestInteger&gt;" FullName="llvm.hashing.detail.is_hashable_data&lt;llvm::LargeTestInteger&gt;">
          <Val>llvm hashing detail</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\HashingTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest&lt;T&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest&lt;T&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_TrivialOperation_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundAssignment_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_ProxyIndex_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_ProxyIndex_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_PortableBitMask_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_BinOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_BinOps_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_RangeOps_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp}.BitVectorTest_RangeOps_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{bitvectortest.cpp} .BitVectorTest_CompoundTestReset_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{bitvectortest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\BitVectorTest.cpp</Val>
        </Row>
        <Row Name="FixedDAGDeltaAlgorithm" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp}.FixedDAGDeltaAlgorithm">
          <Val>anonymous_namespace{dagdeltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DAGDeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="DAGDeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{dagdeltaalgorithmtest.cpp} .DAGDeltaAlgorithmTest_Basic_Test">
          <Val>anonymous_namespace{dagdeltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DAGDeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="FixedDeltaAlgorithm" FullName="anonymous_namespace{deltaalgorithmtest.cpp}.FixedDeltaAlgorithm">
          <Val>anonymous_namespace{deltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="DeltaAlgorithmTest_Basic_Test" FullName="anonymous_namespace{deltaalgorithmtest.cpp} .DeltaAlgorithmTest_Basic_Test">
          <Val>anonymous_namespace{deltaalgorithmtest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DeltaAlgorithmTest.cpp</Val>
        </Row>
        <Row Name="CtorTester" FullName="anonymous_namespace{densemaptest.cpp}.CtorTester">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="CtorTesterMapInfo" FullName="anonymous_namespace{densemaptest.cpp}.CtorTesterMapInfo">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest&lt;T&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest&lt;T&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_EmptyIntMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_ConstEmptyMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_SingleEntryMapTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_ClearTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_ClearTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EraseTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_EraseTest2_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_EraseTest2_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_InsertTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_InsertTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorNotSmallTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromDefaultTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_CopyConstructorFromEmptyTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_AssignmentTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_AssignmentTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_SwapTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_SwapTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_IterationTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp}.DenseMapTest_IterationTest_Test &lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapTest_ConstIteratorTest_Test&lt;gtest_TypeParam_&gt;" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapTest_ConstIteratorTest_Test&lt;gtest_TypeParam_&gt;">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="TestDenseMapInfo" FullName="anonymous_namespace{densemaptest.cpp}.TestDenseMapInfo">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapCustomTest_FindAsTest_Test" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_FindAsTest_Test">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="ContiguousDenseMapInfo" FullName="anonymous_namespace{densemaptest.cpp}.ContiguousDenseMapInfo">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="DenseMapCustomTest_SmallDenseMapGrowTest_Test" FullName="anonymous_namespace{densemaptest.cpp} .DenseMapCustomTest_SmallDenseMapGrowTest_Test">
          <Val>anonymous_namespace{densemaptest cpp}</Val>
          <Val>C:\Users\lacti\Desktop\llvm\unittests\ADT\DenseMapTest.cpp</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types with source files stored in the same directory, should be declared in the same namespace" ContentTruncatedThreshold="100" NbNodeListed="100" FullName="Source Files Organization \ Types with source files stored in the same directory, should be declared in the same namespace" QueryId="Query2913857207" NbNodeMatched="103" NbNodeTested="1141" KindOfNode=" namespaces">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;with&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;directory,&amp;#0160;should&amp;#0160;be&amp;#0160;declared&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;namespace&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Group&amp;#0160;JustMyCode&amp;#0160;types&amp;#0160;in&amp;#0160;a&amp;#0160;lookup&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;where&amp;#0160;groups&amp;#0160;are&amp;#0160;keyed&amp;#0160;with&amp;#0160;directories&amp;#0160;that&amp;#0160;contain&amp;#0160;the&amp;#0160;types'&amp;#0160;source&amp;#0160;file(s).&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Note&amp;#0160;that&amp;#0160;a&amp;#0160;type&amp;#0160;can&amp;#0160;be&amp;#0160;contained&amp;#0160;in&amp;#0160;several&amp;#0160;groups&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;if&amp;#0160;it&amp;#0160;is&amp;#0160;declared&amp;#0160;in&amp;#0160;several&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;different&amp;#0160;directories.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToMultiKeyLookup&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Select&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;decl&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentDirectoryPath&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Distinct&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;groupOfTypes&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;parentNamespaces&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;groupOfTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentNamespaces&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;group&amp;#0160;of&amp;#0160;types&amp;#0160;(with&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;directory)&amp;#0160;...&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;...&amp;#0160;but&amp;#0160;contained&amp;#0160;in&amp;#0160;several&amp;#0160;namespaces&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;parentNamespaces&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;mainNamespaces&amp;#0160;is&amp;#0160;the&amp;#0160;namespace&amp;#0160;that&amp;#0160;contains&amp;#0160;many&amp;#0160;types&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;declared&amp;#0160;in&amp;#0160;the&amp;#0160;directory&amp;#0160;groupOfTypes&amp;#0160;.key&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainNamespace&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;groupOfTypes&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToLookup&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentNamespace&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;OrderByDescending&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;g&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;g&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;First&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Key&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Select&amp;#0160;types&amp;#0160;with&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;directory,&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;but&amp;#0160;contained&amp;#0160;in&amp;#0160;namespaces&amp;#0160;different&amp;#0160;than&amp;#0160;mainNamespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOutOfMainNamespace&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;groupOfTypes&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentNamespace&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainNamespace&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Filter&amp;#0160;types&amp;#0160;declared&amp;#0160;on&amp;#0160;several&amp;#0160;source&amp;#0160;files&amp;#0160;that&amp;#0160;contain&amp;#0160;generated&amp;#0160;methods&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;because&amp;#0160;typically&amp;#0160;such&amp;#0160;type&amp;#0160;contains&amp;#0160;one&amp;#0160;or&amp;#0160;several&amp;#0160;partial&amp;#0160;definitions&amp;#0160;generated.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;These&amp;#0160;partially&amp;#0160;generated&amp;#0160;types&amp;#0160;would&amp;#0160;be&amp;#0160;false&amp;#0160;positive&amp;#0160;for&amp;#0160;the&amp;#0160;present&amp;#0160;rule.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesOutOfMainNamespace&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainNamespace&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Typically&amp;#0160;a&amp;#0160;type&amp;#0160;in&amp;#0160;typesOutOfMainNamespace&amp;#0160;...&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;1)&amp;#0160;...&amp;#0160;is&amp;#0160;contained&amp;#0160;in&amp;#0160;the&amp;#0160;wrong&amp;#0160;namespace&amp;#0160;but&amp;#0160;its&amp;#0160;source&amp;#0160;file(s)&amp;#0160;is&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;right&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;In&amp;#0160;such&amp;#0160;situation&amp;#0160;the&amp;#0160;type&amp;#0160;should&amp;#0160;be&amp;#0160;contained&amp;#0160;in&amp;#0160;mainNamespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;2)&amp;#0160;...&amp;#0160;is&amp;#0160;contained&amp;#0160;in&amp;#0160;the&amp;#0160;right&amp;#0160;namespace&amp;#0160;but&amp;#0160;its&amp;#0160;source&amp;#0160;file(s)&amp;#0160;is&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;wrong&amp;#0160;directory&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;In&amp;#0160;such&amp;#0160;situation&amp;#0160;the&amp;#0160;source&amp;#0160;file&amp;#0160;of&amp;#0160;type&amp;#0160;must&amp;#0160;be&amp;#0160;moved&amp;#0160;to&amp;#0160;the&amp;#0160;parent&amp;#0160;namespace&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;3)&amp;#0160;...&amp;#0160;is&amp;#0160;declared&amp;#0160;in&amp;#0160;multiple&amp;#0160;source&amp;#0160;files,&amp;#0160;stored&amp;#0160;in&amp;#0160;different&amp;#0160;directories.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;It&amp;#0160;would&amp;#0160;be&amp;#0160;preferable&amp;#0160;that&amp;#0160;all&amp;#0160;source&amp;#0160;files&amp;#0160;are&amp;#0160;stored&amp;#0160;in&amp;#0160;a&amp;#0160;single&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;typesOutOfMainNamespace&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;}&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>namespaces</Column>
        <Column>typesOutOfMainNamespace</Column>
      </Columns>
      <Rows>
        <Row Name="anonymous_namespace{apfloattest.cpp}" FullName="anonymous_namespace{apfloattest.cpp}">
          <Val>288 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>15 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{constantrangetest.cpp}" FullName="anonymous_namespace{constantrangetest.cpp}">
          <Val>137 types</Val>
        </Row>
        <Row Name="anonymous_namespace{jittest.cpp}" FullName="anonymous_namespace{jittest.cpp}">
          <Val>18 types</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{toy.cpp}" FullName="anonymous_namespace{toy.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>28 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>12 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>28 types</Val>
        </Row>
        <Row Name="llvm.AArch64SysReg" FullName="llvm.AArch64SysReg">
          <Val>22 types</Val>
        </Row>
        <Row Name="anonymous_namespace{armasmparser.cpp}" FullName="anonymous_namespace{armasmparser.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>43 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>34 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>28 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>70 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>24 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>116 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>7 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>81 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>124 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>34 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>24 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>302 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>15 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>10 types</Val>
        </Row>
        <Row Name="anonymous_namespace{executionengine.cpp}" FullName="anonymous_namespace{executionengine.cpp}">
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>23 types</Val>
        </Row>
        <Row Name="llvm.HexagonII" FullName="llvm.HexagonII">
          <Val>2 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>10 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{memorysanitizer.cpp}" FullName="anonymous_namespace{memorysanitizer.cpp}">
          <Val>27 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{jitemitter.cpp}" FullName="anonymous_namespace{jitemitter.cpp}">
          <Val>8 types</Val>
        </Row>
        <Row Name="anonymous_namespace{wincoffobjectwriter.cpp}" FullName="anonymous_namespace{wincoffobjectwriter.cpp}">
          <Val>14 types</Val>
        </Row>
        <Row Name="llvm.yaml" FullName="llvm.yaml">
          <Val>12 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="anonymous_namespace{asmparser.cpp}" FullName="anonymous_namespace{asmparser.cpp}">
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>11 types</Val>
        </Row>
        <Row Name="llvm.Mips" FullName="llvm.Mips">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>38 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>5 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>24 types</Val>
        </Row>
        <Row Name="llvm.objcarc" FullName="llvm.objcarc">
          <Val>9 types</Val>
        </Row>
        <Row Name="llvm.yaml.anonymous_namespace{coffyaml.cpp}" FullName="llvm.yaml.anonymous_namespace{coffyaml.cpp}">
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm.object" FullName="llvm.object">
          <Val>72 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>26 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>11 types</Val>
        </Row>
        <Row Name="llvm.coverage" FullName="llvm.coverage">
          <Val>18 types</Val>
        </Row>
        <Row Name="anonymous_namespace{coveragemappingreader.cpp}" FullName="anonymous_namespace{coveragemappingreader.cpp}">
          <Val>6 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>39 types</Val>
        </Row>
        <Row Name="anonymous_namespace{amdgpuasmbackend.cpp}" FullName="anonymous_namespace{amdgpuasmbackend.cpp}">
          <Val>9 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>6 types</Val>
        </Row>
        <Row Name="anonymous_namespace{loopstrengthreduce.cpp}" FullName="anonymous_namespace{loopstrengthreduce.cpp}">
          <Val>113 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>34 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>12 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>5 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>27 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>110 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>23 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
        </Row>
        <Row Name="anonymous_namespace{settheory.cpp}" FullName="anonymous_namespace{settheory.cpp}">
          <Val>12 types</Val>
        </Row>
        <Row Name="anonymous_namespace{simplifylibcalls.cpp}" FullName="anonymous_namespace{simplifylibcalls.cpp}">
          <Val>33 types</Val>
        </Row>
        <Row Name="anonymous_namespace{loopvectorize.cpp}" FullName="anonymous_namespace{loopvectorize.cpp}">
          <Val>8 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>9 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>33 types</Val>
        </Row>
        <Row Name="anonymous_namespace{x86asmbackend.cpp}" FullName="anonymous_namespace{x86asmbackend.cpp}">
          <Val>21 types</Val>
        </Row>
        <Row Name="llvm.X86Disassembler" FullName="llvm.X86Disassembler">
          <Val>4 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>11 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>7 types</Val>
        </Row>
        <Row Name="anonymous_namespace{deadargumentelimination.cpp}" FullName="anonymous_namespace{deadargumentelimination.cpp}">
          <Val>31 types</Val>
        </Row>
        <Row Name="anonymous_namespace{mcjitmultiplemoduletest.cpp}" FullName="anonymous_namespace{mcjitmultiplemoduletest.cpp}">
          <Val>27 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>3 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>1 type</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>294 types</Val>
        </Row>
        <Row Name="anonymous_namespace{cloning.cpp}" FullName="anonymous_namespace{cloning.cpp}">
          <Val>10 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>13 types</Val>
        </Row>
        <Row Name="testing.internal" FullName="testing.internal">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>2 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>1 type</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>2 types</Val>
        </Row>
        <Row Name="anonymous_namespace{llvm-nm.cpp}" FullName="anonymous_namespace{llvm-nm.cpp}">
          <Val>1 type</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>15 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>86 types</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>2 types</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
    <Query Status="Warn" Name="Types declared in the same namespace, should have their source files stored in the same directory" ContentTruncatedThreshold="100" FullName="Source Files Organization \ Types declared in the same namespace, should have their source files stored in the same directory" QueryId="Query2935739846" NbNodeMatched="36" NbNodeTested="1141" KindOfNode=" namespaces">
      <QueryHtml>&lt;font color='#008000'&gt;//&amp;#0160;&amp;lt;Name&amp;gt;&lt;/font&gt;&lt;b style="color:#008000;background-color:#E6FFE6"&gt;Types&amp;#0160;declared&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;namespace,&amp;#0160;should&amp;#0160;have&amp;#0160;their&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;same&amp;#0160;directory&lt;/b&gt;&lt;font color='#008000'&gt;&amp;lt;/Name&amp;gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;warnif&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;count&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;from&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@namespace&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;in&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;Application&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Namespaces&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Group&amp;#0160;types&amp;#0160;of&amp;#0160;@namespace&amp;#0160;in&amp;#0160;a&amp;#0160;lookup&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;where&amp;#0160;groups&amp;#0160;are&amp;#0160;keyed&amp;#0160;with&amp;#0160;directories&amp;#0160;that&amp;#0160;contain&amp;#0160;the&amp;#0160;types'&amp;#0160;source&amp;#0160;file(s).&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Note&amp;#0160;that&amp;#0160;a&amp;#0160;type&amp;#0160;can&amp;#0160;be&amp;#0160;contained&amp;#0160;in&amp;#0160;several&amp;#0160;groups&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;if&amp;#0160;it&amp;#0160;is&amp;#0160;declared&amp;#0160;in&amp;#0160;several&amp;#0160;source&amp;#0160;files&amp;#0160;stored&amp;#0160;in&amp;#0160;different&amp;#0160;directories.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@namespace&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ChildTypes&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;IsGlobal&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;amp;&amp;amp;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToMultiKeyLookup&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Select&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;decl&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;decl&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceFile&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FilePath&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ParentDirectoryPath&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Distinct&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Are&amp;#0160;types&amp;#0160;of&amp;#0160;@namespaces&amp;#0160;declared&amp;#0160;in&amp;#0160;more&amp;#0160;than&amp;#0160;one&amp;#0160;directory?&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Infer&amp;#0160;the&amp;#0160;main&amp;#0160;directory,&amp;#0160;preferably&amp;#0160;the&amp;#0160;one&amp;#0160;that&amp;#0160;has&amp;#0160;the&amp;#0160;same&amp;#0160;name&amp;#0160;as&amp;#0160;the&amp;#0160;namespace.&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirs&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Select&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Key&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainDirNullable&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirs&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;d&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;d&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;DirectoryName&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@namespace&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SimpleName&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;FirstOrDefault&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainDir&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainDirNullable&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;?&lt;/font&gt;&lt;font color='#000000'&gt;?&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;dirs&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;First&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Types&amp;#0160;declared&amp;#0160;out&amp;#0160;of&amp;#0160;mainDir,&amp;#0160;are&amp;#0160;types&amp;#0160;in&amp;#0160;group&amp;#0160;of&amp;#0160;types&amp;#0160;declared&amp;#0160;in&amp;#0160;a&amp;#0160;directory&amp;#0160;different&amp;#0160;than&amp;#0160;mainDir!&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;let&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesDeclaredOutOfMainDir&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;lookup&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Key&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;!=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainDir&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SelectMany&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;types&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;types&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Filter&amp;#0160;types&amp;#0160;declared&amp;#0160;on&amp;#0160;several&amp;#0160;source&amp;#0160;files&amp;#0160;that&amp;#0160;contain&amp;#0160;generated&amp;#0160;methods&amp;#0160;&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;because&amp;#0160;typically&amp;#0160;such&amp;#0160;type&amp;#0160;contains&amp;#0160;one&amp;#0160;or&amp;#0160;several&amp;#0160;partial&amp;#0160;definitions&amp;#0160;generated.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;These&amp;#0160;partially&amp;#0160;generated&amp;#0160;types&amp;#0160;would&amp;#0160;be&amp;#0160;false&amp;#0160;positive&amp;#0160;for&amp;#0160;the&amp;#0160;present&amp;#0160;rule.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Where&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;SourceDecls&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;1&lt;/b&gt;&amp;#0160;&lt;font color='#000000'&gt;||&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;t&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Methods&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000064;background-color:#E8E8FF"&gt;JustMyCode&lt;/b&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Contains&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;m&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;==&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;where&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;typesDeclaredOutOfMainDir&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;Count&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;&amp;gt;&lt;/font&gt;&amp;#0160;&lt;b style="color:#000000;background-color:#FFFF99"&gt;0&lt;/b&gt;&lt;font color='#000000'&gt;&lt;br/&gt;&lt;br/&gt;&lt;/font&gt;&lt;font color='#0000FF'&gt;select&lt;/font&gt;&amp;#0160;&lt;font color='#0000FF'&gt;new&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;{&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;@namespace&lt;/font&gt;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;Typically&amp;#0160;a&amp;#0160;type&amp;#0160;in&amp;#0160;typesDeclaredOutOfMainDir&amp;#0160;...&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;1)&amp;#0160;...&amp;#0160;is&amp;#0160;contained&amp;#0160;in&amp;#0160;the&amp;#0160;wrong&amp;#0160;namespace&amp;#0160;but&amp;#0160;its&amp;#0160;source&amp;#0160;file(s)&amp;#0160;is&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;right&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;In&amp;#0160;such&amp;#0160;situation&amp;#0160;the&amp;#0160;type&amp;#0160;parent&amp;#0160;namespace&amp;#0160;should&amp;#0160;be&amp;#0160;the&amp;#0160;namespace&amp;#0160;corresponding&amp;#0160;to&amp;#0160;the&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;2)&amp;#0160;...&amp;#0160;is&amp;#0160;contained&amp;#0160;in&amp;#0160;the&amp;#0160;right&amp;#0160;namespace&amp;#0160;but&amp;#0160;its&amp;#0160;source&amp;#0160;file(s)&amp;#0160;is&amp;#0160;stored&amp;#0160;in&amp;#0160;the&amp;#0160;wrong&amp;#0160;directory&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;In&amp;#0160;such&amp;#0160;situation&amp;#0160;the&amp;#0160;type&amp;#0160;source&amp;#0160;file&amp;#0160;should&amp;#0160;be&amp;#0160;moved&amp;#0160;to&amp;#0160;mainDir.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;3)&amp;#0160;...&amp;#0160;is&amp;#0160;declared&amp;#0160;in&amp;#0160;multiple&amp;#0160;source&amp;#0160;files,&amp;#0160;stored&amp;#0160;in&amp;#0160;different&amp;#0160;directories.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#008000'&gt;//&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;--&amp;gt;&amp;#0160;It&amp;#0160;would&amp;#0160;be&amp;#0160;preferable&amp;#0160;that&amp;#0160;all&amp;#0160;source&amp;#0160;files&amp;#0160;are&amp;#0160;stored&amp;#0160;in&amp;#0160;a&amp;#0160;single&amp;#0160;directory.&lt;br/&gt;&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;typesDeclaredOutOfMainDir&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;,&lt;/font&gt;&lt;font color='#000000'&gt;&amp;#0160;&lt;br/&gt;&lt;br/&gt;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&amp;#0160;&lt;/font&gt;&lt;font color='#000000'&gt;mainDir&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;=&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;mainDir&lt;/font&gt;&lt;font color='#000000'&gt;.&lt;/font&gt;&lt;font color='#000000'&gt;ToString&lt;/font&gt;&lt;font color='#000000'&gt;(&lt;/font&gt;&lt;font color='#000000'&gt;)&lt;/font&gt;&amp;#0160;&lt;font color='#000000'&gt;}&lt;/font&gt;</QueryHtml>
      <Columns>
        <Column>namespaces</Column>
        <Column>typesDeclaredOutOfMainDir</Column>
        <Column>mainDir</Column>
      </Columns>
      <Rows>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\AArch64\MCTargetDesc</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>6 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\ARM\MCTargetDesc</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>6 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm-c</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>37 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\Analysis</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\CodeGen\AsmPrinter</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>7 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Bitcode\Reader</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Bitcode\Writer</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>272 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\CodeGen</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>14 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\IR</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>416 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm</Val>
        </Row>
        <Row Name="llvm.legacy" FullName="llvm.legacy">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\IR</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>38 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\DebugInfo</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\Transforms</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\ExecutionEngine\JIT</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\LineEditor</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\MC</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\MC\MCAnalysis</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>25 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\MC\MCDisassembler</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\ExecutionEngine\MCJIT</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>5 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\MC\MCParser</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\Mips\MCTargetDesc</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\PowerPC\MCTargetDesc</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\ProfileData</Val>
        </Row>
        <Row Name="llvm.IndexedInstrProf" FullName="llvm.IndexedInstrProf">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\ProfileData</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\ExecutionEngine\RuntimeDyld</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>41 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\CodeGen</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\Sparc\MCTargetDesc</Val>
        </Row>
        <Row Name="" FullName="">
          <Val>16 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Support</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>109 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\ADT</Val>
        </Row>
        <Row Name="llvm.yaml" FullName="llvm.yaml">
          <Val>3 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\Support</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>44 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\TableGen</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\Transforms\Utils</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>1 type</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Target\XCore\MCTargetDesc</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>2 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm\Analysis</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>4 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\lib\Transforms\IPO</Val>
        </Row>
        <Row Name="llvm" FullName="llvm">
          <Val>223 types</Val>
          <Val>C:\Users\lacti\Desktop\llvm\include\llvm</Val>
        </Row>
        <Row Name="Sum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Average:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Minimum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Maximum:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Standard deviation:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
        <Row Name="Variance:" FullName="Stat">
          <Val>0</Val>
          <Val>0</Val>
        </Row>
      </Rows>
    </Query>
  </Group>
  <Group Name="Trend Metrics" FullName="Trend Metrics" GroupId="GroupOfRules1484902036" NbQueries="0" NbErrors="0" NbWarns="0" Status="Ok">
    <Group Name="Code Size" FullName="Trend Metrics \ Code Size" GroupId="GroupOfRules-337341142" NbQueries="17" NbErrors="0" NbWarns="0" Status="Ok" />
    <Group Name="Maximum and Average" FullName="Trend Metrics \ Maximum and Average" GroupId="GroupOfRules852421456" NbQueries="15" NbErrors="0" NbWarns="0" Status="Ok" />
    <Group Name="Third-Party Usage" FullName="Trend Metrics \ Third-Party Usage" GroupId="GroupOfRules-1243195645" NbQueries="5" NbErrors="0" NbWarns="0" Status="Ok" />
  </Group>
  <Group Name="Defining JustMyCode" FullName="Defining JustMyCode" GroupId="GroupOfRules-1894704231" NbQueries="2" NbErrors="0" NbWarns="0" Status="Ok" />
  <Group Name="Rules extracted from Source Code" FullName="Rules extracted from Source Code" GroupId="GroupOfRules1206142379" NbQueries="0" NbErrors="0" NbWarns="0" Status="Not yet compiled" />
</RuleResult>