<Externals>
<cr namespace="llvm" access="none" depth="1" kind="class" name="MallocAllocator" id="298ee3b516b75e5e51d374f449d428e0_41f62756ce537b75de5aae58f0259c31" file="2" linestart="89" lineend="106">
<base access="public">
<tss>
<templatebase id="298ee3b516b75e5e51d374f449d428e0_aab66a6eee763ba249f70003e6bb422e"/>
<template_arguments>
<rt>
<cr id="298ee3b516b75e5e51d374f449d428e0_41f62756ce537b75de5aae58f0259c31"/>
</rt>
</template_arguments>
</tss>
</base>
</cr>
<tm namespace="llvm" access="none" depth="1" kind="class" name="BumpPtrAllocatorImpl" id="298ee3b516b75e5e51d374f449d428e0_211a4c61975e0be6ec6d5d7ebe7d1417" file="2" linestart="130" lineend="346">
<template_parameters>
<ttp name="AllocatorT" id="298ee3b516b75e5e51d374f449d428e0_6c3e808eb05f159467848bbe76cee599" depth="" index="" proto="type-parameter-0-0">
<rt>
<cr id="298ee3b516b75e5e51d374f449d428e0_41f62756ce537b75de5aae58f0259c31"/>
</rt>
</ttp>
</template_parameters>
<cr namespace="llvm" access="none" depth="1" kind="class" name="BumpPtrAllocatorImpl" id="298ee3b516b75e5e51d374f449d428e0_2d2ecd613e5628e2c4d76b4ad26e952c" file="2" linestart="132" lineend="346">
<base access="public">
<tss>
<templatebase id="298ee3b516b75e5e51d374f449d428e0_aab66a6eee763ba249f70003e6bb422e"/>
<template_arguments>
<tss>
<templatebase id="298ee3b516b75e5e51d374f449d428e0_2d2ecd613e5628e2c4d76b4ad26e952c"/>
<template_arguments>
<ttp/>
</template_arguments>
</tss>
</template_arguments>
</tss>
</base>
<cr access="public" kind="class" name="BumpPtrAllocatorImpl" id="298ee3b516b75e5e51d374f449d428e0_527ce7bf517a98a4df8fc5848ea6ac73" file="2" linestart="132" lineend="132"/>
</cr>
</tm>
<cr namespace="llvm" access="none" depth="0" kind="class" name="RecyclingAllocator" id="5887d70f825d0190a841fcebee077c69_66aad7f39c584508a73e25bf5129faf9" file="3" linestart="27" lineend="58"/>
<tm namespace="llvm" access="none" depth="0" pod="true" kind="struct" name="IntervalMapInfo" id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784" file="4" linestart="131" lineend="152">
<template_parameters>
<ttp name="T" id="edff16bc5f27ed7d6470caac8826098d_9731eaef24b064cf863855790397779a" depth="" index="" proto="type-parameter-0-0"/>
</template_parameters>
<cr namespace="llvm" access="none" depth="0" pod="true" kind="struct" name="IntervalMapInfo" id="edff16bc5f27ed7d6470caac8826098d_51a63a8345cc5c39eba9c41c45a02575" file="4" linestart="132" lineend="152">
<cr access="public" kind="struct" name="IntervalMapInfo" id="edff16bc5f27ed7d6470caac8826098d_af30aa7fd1fc35d56efa06ae1f06b0e0" file="4" linestart="132" lineend="132"/>
</cr>
</tm>
<e namespace="llvm.IntervalMapImpl" access="none" name="" id="edff16bc5f27ed7d6470caac8826098d_8b0b2b0fc4a75b75353424e390e95b91" file="4" linestart="421" lineend="427" fixed="true">
<promotion_type>
<bt name="int"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
<ec name="CacheLineBytes" id="edff16bc5f27ed7d6470caac8826098d_276ac971a35471cc308e9e7929b135ac" file="4" linestart="425" lineend="425">
<et>
<e id="edff16bc5f27ed7d6470caac8826098d_8b0b2b0fc4a75b75353424e390e95b91"/>
</et>
</ec>
</e>
<tm namespace="llvm" access="none" depth="0" kind="class" name="IntervalMap" id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5" file="4" linestart="928" lineend="1147">
<template_parameters>
<ttp name="KeyT" id="edff16bc5f27ed7d6470caac8826098d_012440653c637ff76637ee6b488931ae" depth="" index="" proto="type-parameter-0-0"/>
<ttp name="ValT" id="edff16bc5f27ed7d6470caac8826098d_71ce9b2e1972a982faf1a6767df4c929" depth="" index="" proto="type-parameter-0-1"/>
<ttp name="Traits" id="edff16bc5f27ed7d6470caac8826098d_4ae2a38e44ad1a5aa1d660ad1b4efcb2" depth="" index="" proto="type-parameter-0-3">
<tss>
<templatebase id="edff16bc5f27ed7d6470caac8826098d_51a63a8345cc5c39eba9c41c45a02575"/>
<template_arguments>
<ttp/>
</template_arguments>
</tss>
</ttp>
</template_parameters>
<cr namespace="llvm" access="none" depth="0" kind="class" name="IntervalMap" id="edff16bc5f27ed7d6470caac8826098d_33e84b43fd9a611be45a7843c2697f22" file="4" linestart="931" lineend="1147">
<cr access="public" kind="class" name="IntervalMap" id="edff16bc5f27ed7d6470caac8826098d_ff81b3344626ba2f26a34e2371b6be60" file="4" linestart="931" lineend="931"/>
<e parent="edff16bc5f27ed7d6470caac8826098d_33e84b43fd9a611be45a7843c2697f22" access="private" name="" id="edff16bc5f27ed7d6470caac8826098d_4db728efd8a628f46b10f7606ed3ab88" file="4" linestart="941" lineend="945" fixed="true">
<promotion_type>
<bt name="&lt;dependent type&gt;"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
</e>
<e parent="edff16bc5f27ed7d6470caac8826098d_33e84b43fd9a611be45a7843c2697f22" access="private" name="" id="edff16bc5f27ed7d6470caac8826098d_2fd0833a747ecd91835b549fbde58c4b" file="4" linestart="956" lineend="959" fixed="true">
<promotion_type>
<bt name="&lt;dependent type&gt;"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
</e>
<c name="IntervalMap&lt;KeyT, ValT, N, Traits&gt;" id="edff16bc5f27ed7d6470caac8826098d_3147e956121fe4409e8701d426d12d2c" file="4" linestart="1053" lineend="1057" explicit="true" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="a" proto="Allocator &amp;" isRef="true" access2="none">
<lrf>
<Tdef>
<DependentName/>
</Tdef>
</lrf>
</p>
<initlist id="edff16bc5f27ed7d6470caac8826098d_c0e5434e66b274156732ea126e866011"/>
<initlist id="edff16bc5f27ed7d6470caac8826098d_86c2c6156590d870cf5e5acac3b8e037"/>
<initlist id="edff16bc5f27ed7d6470caac8826098d_571bb4f0723a841585cc4efbc1d6f2a8"/>
</c>
<m name="empty" id="edff16bc5f27ed7d6470caac8826098d_23c94090d0573ca6c6a7053cf54b0fc9" file="4" linestart="1065" lineend="1067" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="bool">
<bt name="bool"/>
</fpt>
</m>
<m name="start" id="edff16bc5f27ed7d6470caac8826098d_f457b4292187b8b039441402282b3cdd" file="4" linestart="1070" lineend="1073" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="KeyT">
<ttp/>
</fpt>
</m>
<m name="stop" id="edff16bc5f27ed7d6470caac8826098d_7ce1cfb8fa6a7b558def687ed45ffe94" file="4" linestart="1076" lineend="1080" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="KeyT">
<ttp/>
</fpt>
</m>
<m name="lookup" id="edff16bc5f27ed7d6470caac8826098d_2432ebaa61276e9f1abff814f1ffd80e" file="4" linestart="1083" lineend="1088" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="ValT">
<ttp/>
</fpt>
<p name="x" proto="KeyT" access2="none">
<ttp/>
</p>
<p name="NotFound" proto="ValT" init="true" access2="none">
<ttp/>
</p>
</m>
<m name="insert" id="edff16bc5f27ed7d6470caac8826098d_f84b97ae333090c28ed77fc5eff80565" file="4" linestart="1093" lineend="1100" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="a" proto="KeyT" access2="none">
<ttp/>
</p>
<p name="b" proto="KeyT" access2="none">
<ttp/>
</p>
<p name="y" proto="ValT" access2="none">
<ttp/>
</p>
</m>
<m name="clear" id="edff16bc5f27ed7d6470caac8826098d_03ccbab28331123844340c407796cdef" file="4" linestart="1103" lineend="1103" access="public" hasbody="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="begin" id="edff16bc5f27ed7d6470caac8826098d_381759a793bd86e376c215f071f47d42" file="4" linestart="1116" lineend="1120" access="public" hasbody="true" isdef="true">
<fpt proto="llvm::IntervalMap::iterator">
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_c8c5dfed707eb72507e56298f1637827"/>
</rt>
</fpt>
</m>
<m name="end" id="edff16bc5f27ed7d6470caac8826098d_ea2ffe87837be1e6e499f104e0bb350c" file="4" linestart="1128" lineend="1132" access="public" hasbody="true" isdef="true">
<fpt proto="llvm::IntervalMap::iterator">
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_c8c5dfed707eb72507e56298f1637827"/>
</rt>
</fpt>
</m>
</cr>
</tm>
<tm namespace="llvm" access="none" depth="0" kind="class" name="IntervalMapOverlaps" id="edff16bc5f27ed7d6470caac8826098d_daa3bc2d4b4cc93d211b9acc6ed74d98" file="4" linestart="2057" lineend="2162">
<template_parameters>
<ttp name="MapA" id="edff16bc5f27ed7d6470caac8826098d_c1b3a982c45163aa4a1e4e579e64f217" depth="" index="" proto="type-parameter-0-0"/>
<ttp name="MapB" id="edff16bc5f27ed7d6470caac8826098d_0f842199230473913e1a5d10a17b828f" depth="" index="" proto="type-parameter-0-1"/>
</template_parameters>
<cr namespace="llvm" access="none" depth="0" kind="class" name="IntervalMapOverlaps" id="edff16bc5f27ed7d6470caac8826098d_54aa48cbcb3f02e69e08668e95d2477f" file="4" linestart="2058" lineend="2162">
<cr access="public" kind="class" name="IntervalMapOverlaps" id="edff16bc5f27ed7d6470caac8826098d_0af9f40c37e9c1aa11ffab7f7dbddd18" file="4" linestart="2058" lineend="2058"/>
<c name="IntervalMapOverlaps&lt;MapA, MapB&gt;" id="edff16bc5f27ed7d6470caac8826098d_b9fd75db3af0955beaacc87e7474e3eb" file="4" linestart="2099" lineend="2101" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="a" proto="const MapA &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="b" proto="const MapB &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<initlist id="edff16bc5f27ed7d6470caac8826098d_50cc7c1853875de0ec0dbb4fdaee5142"/>
<initlist id="edff16bc5f27ed7d6470caac8826098d_5ffb2b078ab60c0a1cc2c13d3eada933"/>
</c>
<m name="valid" id="edff16bc5f27ed7d6470caac8826098d_49fad23570f46f6e4da4cc0855988160" file="4" linestart="2104" lineend="2106" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="bool">
<bt name="bool"/>
</fpt>
</m>
<m name="a" id="edff16bc5f27ed7d6470caac8826098d_7df6e6f20ddbb6f408c2ba694f06d73b" file="4" linestart="2109" lineend="2109" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="const typename MapA::const_iterator &amp;">
<lrf>
<QualType const="true">
<DependentName/>
</QualType>
</lrf>
</fpt>
</m>
<m name="b" id="edff16bc5f27ed7d6470caac8826098d_1f2f94fc8f0f51dca277b6ff5ad6f1d8" file="4" linestart="2112" lineend="2112" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="const typename MapB::const_iterator &amp;">
<lrf>
<QualType const="true">
<DependentName/>
</QualType>
</lrf>
</fpt>
</m>
<m name="skipA" id="edff16bc5f27ed7d6470caac8826098d_ed8ac7b1f668a08d7b2aa4be1f721439" file="4" linestart="2129" lineend="2132" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="skipB" id="edff16bc5f27ed7d6470caac8826098d_eb45c36a9baf4ec3c0620599694def61" file="4" linestart="2135" lineend="2138" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="operator++" id="edff16bc5f27ed7d6470caac8826098d_2a4b4e6336721eec9b7a4fd2399a6d57" file="4" linestart="2141" lineend="2148" operator="true" access="public" hasbody="true" isdef="true">
<fpt proto="IntervalMapOverlaps&lt;MapA, MapB&gt; &amp;">
<lrf>
<InjectedClassName>
<cr id="edff16bc5f27ed7d6470caac8826098d_54aa48cbcb3f02e69e08668e95d2477f"/>
</InjectedClassName>
</lrf>
</fpt>
</m>
<m name="advanceTo" id="edff16bc5f27ed7d6470caac8826098d_bc8c235a91b52e08664f491f055217f7" file="4" linestart="2152" lineend="2161" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="x" proto="KeyType" access2="none">
<Tdef>
<DependentName/>
</Tdef>
</p>
</m>
</cr>
</tm>
<cr namespace="testing.internal" access="none" depth="0" kind="class" name="String" id="062315ef9bdab19c3cabee16a5b6d183_29162408a07bf0ba0270baefa060f9ab" file="5" linestart="81" lineend="312" previous="0c2fb77eb4696cd7e7faa021a7cafdaf_29162408a07bf0ba0270baefa060f9ab">
<m name="c_str" id="062315ef9bdab19c3cabee16a5b6d183_e758dca70b3e639bd69cdff32808e0ba" file="5" linestart="275" lineend="275" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="const char *">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</fpt>
</m>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="Message" id="d6da877cd43d9ea62976e055cbb7a3f4_a57271b22cdb2fdb3d50588243bf5562" file="6" linestart="82" lineend="221" previous="361592d094a324447c0b12d8c282c7d5_a57271b22cdb2fdb3d50588243bf5562">
<c name="Message" id="d6da877cd43d9ea62976e055cbb7a3f4_21a3d36d55284f1d8751ec8cddd8c404" file="6" linestart="94" lineend="98" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<initlist id="d6da877cd43d9ea62976e055cbb7a3f4_b337e99236191cea06ced5fb66037052"/>
</c>
</cr>
<e parent="562ee964b610e766d302b8dfed46fd41_5f4fb82d9196d416897f8942199b65f3" access="public" name="Type" id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1" file="7" linestart="51" lineend="55" fixed="true">
<promotion_type>
<bt name="int"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
<ec name="kNonFatalFailure" id="562ee964b610e766d302b8dfed46fd41_383aae76b62cf18ba08225968ae6e7a3" file="7" linestart="53" lineend="53">
<et>
<e id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1"/>
</et>
</ec>
<ec name="kFatalFailure" id="562ee964b610e766d302b8dfed46fd41_eacd07025a4b6e36b1bcec4641b342a0" file="7" linestart="54" lineend="54">
<et>
<e id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1"/>
</et>
</ec>
</e>
<cr namespace="testing" access="none" depth="0" kind="class" name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d" file="8" linestart="265" lineend="321" previous="361592d094a324447c0b12d8c282c7d5_1b0b5edb5a536c8577b46f6e0d5d791d">
<c name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_90376d02aab3f76734cce9b29267f2af" file="8" linestart="269" lineend="269" copyconst="true" access="public">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="other" proto="const testing::AssertionResult &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</QualType>
</lrf>
</p>
</c>
<c name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_fee14873f9723f27fcfae57f274d270a" file="8" linestart="271" lineend="271" explicit="true" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="success" proto="bool" isLiteral="true" isPrimitive="true" access2="none">
<bt name="bool"/>
</p>
<initlist id="0dc4cd8d4d61c13ddce2ee0effc89eca_8990cdf704a69c8c0203b7ece72cad83"/>
</c>
<cv name="operator bool" id="0dc4cd8d4d61c13ddce2ee0effc89eca_c2f20ab10b1a1c248f08973b7014d633" file="8" linestart="274" lineend="274" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="bool">
<bt name="bool"/>
</fpt>
</cv>
<m name="failure_message" id="0dc4cd8d4d61c13ddce2ee0effc89eca_50b6fa066d3e0d41ee32ad34528c8103" file="8" linestart="288" lineend="288" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="const char *">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</fpt>
</m>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="Test" id="0dc4cd8d4d61c13ddce2ee0effc89eca_964ac3d325bf97cf954384b45d20b6e8" file="8" linestart="356" lineend="463" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_964ac3d325bf97cf954384b45d20b6e8">
<m name="SetUpTestCase" id="0dc4cd8d4d61c13ddce2ee0effc89eca_9a9dc2bca30077fcc6a89530f92e1339" file="8" linestart="374" lineend="374" access="public" storage="static" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="TearDownTestCase" id="0dc4cd8d4d61c13ddce2ee0effc89eca_d2e5bc6dcdf9b44bb09113afda19cad7" file="8" linestart="382" lineend="382" access="public" storage="static" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<c name="Test" id="0dc4cd8d4d61c13ddce2ee0effc89eca_84d92362fbd4a41dfcdd762261a24cf5" file="8" linestart="411" lineend="411" access="protected">
<fpt proto="void">
<bt name="void"/>
</fpt>
</c>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="TestInfo" id="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e" file="8" linestart="625" lineend="735" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e"/>
<tm namespace="testing.internal" access="none" depth="0" pod="true" kind="class" name="EqHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_350bece42c7c2286ac893ed2f9905d9f" file="8" linestart="1346" lineend="1372">
<template_parameters/>
<cr namespace="testing.internal" access="none" depth="0" pod="true" kind="class" name="EqHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_9f03c6b4788c855604a1b39f6bd8c43f" file="8" linestart="1347" lineend="1372">
<cr access="public" kind="class" name="EqHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_07febb784a13e0e5d35719b4531e86a5" file="8" linestart="1347" lineend="1347"/>
<ft name="Compare" id="0dc4cd8d4d61c13ddce2ee0effc89eca_54323f0a38144261d59641f516370cec" file="8" linestart="1350" lineend="1357">
<template_parameters>
<ttp name="T1" id="0dc4cd8d4d61c13ddce2ee0effc89eca_81567f84e62214361ffb26585bf6df11" depth="" index="" proto="type-parameter-1-0"/>
<ttp name="T2" id="0dc4cd8d4d61c13ddce2ee0effc89eca_2230f6b110d39b1dbbe144486c06d097" depth="" index="" proto="type-parameter-1-1"/>
</template_parameters>
<m name="Compare" id="0dc4cd8d4d61c13ddce2ee0effc89eca_032d369924e43a9a8eb727d96d7cd8b0" file="8" linestart="1351" lineend="1357" access="public" storage="static" hasbody="true" isdef="true">
<fpt proto="testing::AssertionResult">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</fpt>
<p name="expected_expression" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="actual_expression" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expected" proto="const T1 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="actual" proto="const T2 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
</m>
</ft>
</cr>
</tm>
<cts Spec="&lt;true&gt;" namespace="testing.internal" access="none" depth="0" pod="true" kind="class" name="EqHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_4d7f03a8973ce1f7829c35839e1377ee" file="8" linestart="1376" lineend="1417">
<ft name="Compare" id="0dc4cd8d4d61c13ddce2ee0effc89eca_45553afc752455fd11ef5236e49535ce" file="8" linestart="1383" lineend="1397">
<template_parameters>
<ttp name="T1" id="0dc4cd8d4d61c13ddce2ee0effc89eca_e3d6e2b892bcd3be04a4bc206004c805" depth="" index="" proto="type-parameter-0-0"/>
<ttp name="T2" id="0dc4cd8d4d61c13ddce2ee0effc89eca_719b38c802ab33d64cd777f448b1ca7c" depth="" index="" proto="type-parameter-0-1"/>
</template_parameters>
</ft>
</cts>
<cr namespace="testing.internal" access="none" depth="0" kind="class" name="AssertHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_7260371f7d6759cab9d4e4b45f795755" file="8" linestart="1594" lineend="1631" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_7260371f7d6759cab9d4e4b45f795755">
<c name="AssertHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_5f3bae04f063d84394fe9d50198f2c6a" file="8" linestart="1597" lineend="1600" access="public">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="type" proto="TestPartResult::Type" isLiteral="true" access2="none">
<ety>
<et>
<e id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1"/>
</et>
</ety>
</p>
<p name="file" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="line" proto="int" isLiteral="true" isPrimitive="true" access2="none">
<bt name="int"/>
</p>
<p name="message" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
</c>
<m name="operator=" id="0dc4cd8d4d61c13ddce2ee0effc89eca_7c7803b0e3e57d066468d0bec8cde703" file="8" linestart="1605" lineend="1605" operator="true" access="public">
<fpt const="true" proto="void">
<bt name="void"/>
</fpt>
<p name="message" proto="const testing::Message &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="d6da877cd43d9ea62976e055cbb7a3f4_a57271b22cdb2fdb3d50588243bf5562"/>
</rt>
</QualType>
</lrf>
</p>
</m>
</cr>
<e parent="edff16bc5f27ed7d6470caac8826098d_1372c078fe5aa80dc44ecadd57bd60d3" access="public" name="" id="edff16bc5f27ed7d6470caac8826098d_e9bb72785b2fb61b95fd163247cc7c15" file="4" linestart="445" lineend="445" fixed="true">
<promotion_type>
<bt name="int"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
<ec name="AllocBytes" id="edff16bc5f27ed7d6470caac8826098d_42d4396c256b5344bdb5888a0a6b74da" file="4" linestart="448" lineend="448">
<et>
<e id="edff16bc5f27ed7d6470caac8826098d_e9bb72785b2fb61b95fd163247cc7c15"/>
</et>
</ec>
</e>
<cr parent="edff16bc5f27ed7d6470caac8826098d_d39020cee30d43f52c4c5f5cc026ebab" access="public" depth="1" kind="class" name="const_iterator" id="edff16bc5f27ed7d6470caac8826098d_7983df37344637d5722fb08e3e065945" file="4" linestart="1295" lineend="1450">
<base access="public">
<ety>
<tss>
<templatebase id="41b1f1ab5ff3e4379a0c88a111c98396_8e1e21739821c44b37903676a5898bf6"/>
<template_arguments>
<ety>
<rt>
<cr id="41b1f1ab5ff3e4379a0c88a111c98396_ea4f2d43b59c6218f7a0b9198eff7e0e"/>
</rt>
</ety>
<sttp/>
</template_arguments>
</tss>
</ety>
</base>
<m name="operator=" id="edff16bc5f27ed7d6470caac8826098d_f768024bead6ba8a8399b2b516ab6519" file="4" linestart="1295" lineend="1295" implicit="true" operator="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="llvm::IntervalMap&lt;unsigned int, unsigned int, 4, llvm::IntervalMapInfo&lt;unsigned int&gt;&gt;::const_iterator &amp;">
<lrf>
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</lrf>
</fpt>
<p name="" proto="llvm::IntervalMap&lt;unsigned int, unsigned int, 4, llvm::IntervalMapInfo&lt;unsigned int&gt;&gt;::const_iterator &amp;&amp;" isRef="true" isLiteral="true" access2="none">
<rrf>
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</rrf>
</p>
</m>
</cr>
<cr parent="edff16bc5f27ed7d6470caac8826098d_d39020cee30d43f52c4c5f5cc026ebab" access="public" depth="2" kind="class" name="iterator" id="edff16bc5f27ed7d6470caac8826098d_2d2081529afe26d8baa1e8fdb7a1b8f6" file="4" linestart="1519" lineend="1603">
<base access="public">
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</base>
<c name="iterator" id="edff16bc5f27ed7d6470caac8826098d_1ea8434f26c7debeabf12d24384feef7" file="4" linestart="1519" lineend="1519" implicit="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="" proto="llvm::IntervalMap&lt;unsigned int, unsigned int, 4, llvm::IntervalMapInfo&lt;unsigned int&gt;&gt;::iterator &amp;&amp;" isRef="true" isLiteral="true" access2="none">
<rrf>
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</rrf>
</p>
</c>
<m name="operator=" id="edff16bc5f27ed7d6470caac8826098d_c1adf3b8d527f39422f5dbe8f6ae9b62" file="4" linestart="1519" lineend="1519" implicit="true" operator="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="llvm::IntervalMap&lt;unsigned int, unsigned int, 4, llvm::IntervalMapInfo&lt;unsigned int&gt;&gt;::iterator &amp;">
<lrf>
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</lrf>
</fpt>
<p name="" proto="llvm::IntervalMap&lt;unsigned int, unsigned int, 4, llvm::IntervalMapInfo&lt;unsigned int&gt;&gt;::iterator &amp;&amp;" isRef="true" isLiteral="true" access2="none">
<rrf>
<rt>
<cr id="edff16bc5f27ed7d6470caac8826098d_756f1e0931736241bbb308a79cfba0b5">
<template_arguments>
<bt name="unsigned int"/>
<bt name="unsigned int"/>
<integer value="4"/>
<rt>
<cts id="edff16bc5f27ed7d6470caac8826098d_7c40760caa2d763788526dfa2ae21784">
<template_arguments>
<bt name="unsigned int"/>
</template_arguments>
</cts>
</rt>
</template_arguments>
</cr>
</rt>
</rrf>
</p>
</m>
</cr>
<f namespace="std" name="distance" id="41b1f1ab5ff3e4379a0c88a111c98396_9e948540ed8088b6778b1c26868fe16e" file="9" linestart="753" lineend="760" access="none" inline="true" hasbody="true" isdef="true">
<fpt proto="typename iterator_traits&lt;_InIt&gt;::difference_type">
<DependentName/>
</fpt>
<p name="_First" proto="_InIt" access2="none">
<ttp/>
</p>
<p name="_Last" proto="_InIt" access2="none">
<ttp/>
</p>
</f>
<ft name="distance" id="41b1f1ab5ff3e4379a0c88a111c98396_0157aab7a6f14fa66d630b426d5f8066" file="9" linestart="753" lineend="760">
<template_parameters>
<ttp name="_InIt" id="41b1f1ab5ff3e4379a0c88a111c98396_34bd519b81679c7f8ee9021d46f05dcd" depth="" index="" proto="type-parameter-0-0"/>
</template_parameters>
<f namespace="std" name="distance" id="41b1f1ab5ff3e4379a0c88a111c98396_9e948540ed8088b6778b1c26868fe16e" file="9" linestart="753" lineend="760" access="none" inline="true" hasbody="true" isdef="true">
<fpt proto="typename iterator_traits&lt;_InIt&gt;::difference_type">
<DependentName/>
</fpt>
<p name="_First" proto="_InIt" access2="none">
<ttp/>
</p>
<p name="_Last" proto="_InIt" access2="none">
<ttp/>
</p>
</f>
</ft>
<f namespace="testing.internal" name="GetBoolAssertionFailureMessage" id="361592d094a324447c0b12d8c282c7d5_7cde1b8033a9720b7ea4fb7d1438b38c" file="10" linestart="310" lineend="314" access="none">
<fpt proto="testing::internal::String">
<rt>
<cr id="062315ef9bdab19c3cabee16a5b6d183_29162408a07bf0ba0270baefa060f9ab"/>
</rt>
</fpt>
<p name="assertion_result" proto="const testing::AssertionResult &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</QualType>
</lrf>
</p>
<p name="expression_text" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="actual_predicate_value" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expected_predicate_value" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
</f>
<f namespace="testing.internal" name="GetTestTypeId" id="361592d094a324447c0b12d8c282c7d5_e8ecc4c7ff1c3d40cce55780474106a4" file="10" linestart="534" lineend="534" access="none">
<fpt proto="TypeId">
<Tdef>
<pt>
<QualType const="true">
<bt name="void"/>
</QualType>
</pt>
</Tdef>
</fpt>
</f>
<f namespace="testing.internal" name="MakeAndRegisterTestInfo" id="361592d094a324447c0b12d8c282c7d5_c94e15073fa33c9f81254abdf66926e3" file="10" linestart="595" lineend="602" access="none">
<fpt proto="testing::TestInfo *">
<pt>
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e"/>
</rt>
</pt>
</fpt>
<p name="test_case_name" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="name" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="type_param" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="value_param" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="fixture_class_id" proto="TypeId" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<QualType const="true">
<bt name="void"/>
</QualType>
</pt>
</Tdef>
</p>
<p name="set_up_tc" proto="SetUpTestCaseFunc" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<Paren/>
</pt>
</Tdef>
</p>
<p name="tear_down_tc" proto="TearDownTestCaseFunc" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<Paren/>
</pt>
</Tdef>
</p>
<p name="factory" proto="testing::internal::TestFactoryBase *" isPtr="true" isLiteral="true" access2="none">
<pt>
<rt>
<cr id="361592d094a324447c0b12d8c282c7d5_ebebd0ac8a5c6834880cc16f32b5b90a"/>
</rt>
</pt>
</p>
</f>
<f namespace="testing.internal" name="CmpHelperLE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_1091d30b48b9fb1d629f32678a768a8c" file="8" linestart="1450" lineend="1450" access="none" hasbody="true" isdef="true">
<fpt proto="testing::AssertionResult">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</fpt>
<p name="expr1" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expr2" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="val1" proto="const T1 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="val2" proto="const T2 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
</f>
<ft name="CmpHelperLE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_e01a6202bee25704d992de991a19b2d2" file="8" linestart="1450" lineend="1450">
<template_parameters>
<ttp name="T1" id="0dc4cd8d4d61c13ddce2ee0effc89eca_ae0d84d43016835271799c869f266bfa" depth="" index="" proto="type-parameter-0-0"/>
<ttp name="T2" id="0dc4cd8d4d61c13ddce2ee0effc89eca_f347fb15c00f08fab607693fbe0565e1" depth="" index="" proto="type-parameter-0-1"/>
</template_parameters>
<f namespace="testing.internal" name="CmpHelperLE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_1091d30b48b9fb1d629f32678a768a8c" file="8" linestart="1450" lineend="1450" access="none" hasbody="true" isdef="true">
<fpt proto="testing::AssertionResult">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</fpt>
<p name="expr1" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expr2" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="val1" proto="const T1 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="val2" proto="const T2 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
</f>
</ft>
<f namespace="testing.internal" name="CmpHelperGE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_5abb4441c9faae1bb1632caca7cd6c85" file="8" linestart="1454" lineend="1454" access="none" hasbody="true" isdef="true">
<fpt proto="testing::AssertionResult">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</fpt>
<p name="expr1" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expr2" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="val1" proto="const T1 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="val2" proto="const T2 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
</f>
<ft name="CmpHelperGE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_14893bcf44a6f4b5307da2d6c853913d" file="8" linestart="1454" lineend="1454">
<template_parameters>
<ttp name="T1" id="0dc4cd8d4d61c13ddce2ee0effc89eca_690f10983f9195d152eb573362c28d20" depth="" index="" proto="type-parameter-0-0"/>
<ttp name="T2" id="0dc4cd8d4d61c13ddce2ee0effc89eca_11bf5c49fd144edefa4f45cba8890e4d" depth="" index="" proto="type-parameter-0-1"/>
</template_parameters>
<f namespace="testing.internal" name="CmpHelperGE" id="0dc4cd8d4d61c13ddce2ee0effc89eca_5abb4441c9faae1bb1632caca7cd6c85" file="8" linestart="1454" lineend="1454" access="none" hasbody="true" isdef="true">
<fpt proto="testing::AssertionResult">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</fpt>
<p name="expr1" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expr2" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="val1" proto="const T1 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
<p name="val2" proto="const T2 &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<ttp/>
</QualType>
</lrf>
</p>
</f>
</ft>
</Externals>
