<Externals>
<tm namespace="llvm" access="none" depth="0" kind="class" name="RefCountedBase" id="7b324dba5072e0919792f438fcc29977_9790c950084a912aeb14d2d14e242c9d" file="2" linestart="44" lineend="57">
<template_parameters>
<ttp name="Derived" id="7b324dba5072e0919792f438fcc29977_ab6973f4d2a64898e71679300e4b5721" depth="" index="" proto="type-parameter-0-0"/>
</template_parameters>
<cr namespace="llvm" access="none" depth="0" kind="class" name="RefCountedBase" id="7b324dba5072e0919792f438fcc29977_6992c6af0d94383503407006aeb628dc" file="2" linestart="45" lineend="57">
<cr access="public" kind="class" name="RefCountedBase" id="7b324dba5072e0919792f438fcc29977_3cfeb6f37917eaa3bf3d0a7c76533110" file="2" linestart="45" lineend="45"/>
<c name="RefCountedBase&lt;Derived&gt;" id="7b324dba5072e0919792f438fcc29977_e0837f506abef9a6fb6d99272b486aee" file="2" linestart="49" lineend="49" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<initlist id="7b324dba5072e0919792f438fcc29977_6e6ff1e3e8bff2984b0bb6764daab526"/>
</c>
<c name="RefCountedBase&lt;Derived&gt;" id="7b324dba5072e0919792f438fcc29977_6f0e9b960cc8c58953ba6037ba873b91" file="2" linestart="50" lineend="50" copyconst="true" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="" proto="const RefCountedBase&lt;Derived&gt; &amp;" isRef="true" access2="none">
<lrf>
<QualType const="true">
<InjectedClassName>
<cr id="7b324dba5072e0919792f438fcc29977_6992c6af0d94383503407006aeb628dc"/>
</InjectedClassName>
</QualType>
</lrf>
</p>
<initlist id="7b324dba5072e0919792f438fcc29977_6e6ff1e3e8bff2984b0bb6764daab526"/>
</c>
<m name="Retain" id="7b324dba5072e0919792f438fcc29977_5c7d2c58773fce898c372014e61467ee" file="2" linestart="52" lineend="52" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="Release" id="7b324dba5072e0919792f438fcc29977_365c9514f4e79a43f7993a994bd8a1be" file="2" linestart="53" lineend="56" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="void">
<bt name="void"/>
</fpt>
</m>
</cr>
</tm>
<cr namespace="llvm" access="none" depth="0" kind="class" name="RefCountedBaseVPTR" id="7b324dba5072e0919792f438fcc29977_79426986d856495ccec785fc91685e55" file="2" linestart="67" lineend="85">
<c name="RefCountedBaseVPTR" id="7b324dba5072e0919792f438fcc29977_060df78c96b0d49558878c0eef5888ce" file="2" linestart="72" lineend="72" access="protected" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<initlist id="7b324dba5072e0919792f438fcc29977_4f02200d68787ed3a82039c00a5e51af"/>
</c>
<c name="RefCountedBaseVPTR" id="7b324dba5072e0919792f438fcc29977_a99a4f3f3bce744673ffb7b7f4a503a8" file="2" linestart="73" lineend="73" copyconst="true" access="protected" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="" proto="const llvm::RefCountedBaseVPTR &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="7b324dba5072e0919792f438fcc29977_79426986d856495ccec785fc91685e55"/>
</rt>
</QualType>
</lrf>
</p>
<initlist id="7b324dba5072e0919792f438fcc29977_4f02200d68787ed3a82039c00a5e51af"/>
</c>
</cr>
<tm namespace="llvm" access="none" depth="0" kind="class" name="IntrusiveRefCntPtr" id="7b324dba5072e0919792f438fcc29977_675cf69927f786e7b696aea0054e1521" file="2" linestart="135" lineend="200" previous="7b324dba5072e0919792f438fcc29977_675cf69927f786e7b696aea0054e1521">
<template_parameters>
<ttp name="T" id="7b324dba5072e0919792f438fcc29977_b278b5e3d7c9a89b985f7e08268cd6de" depth="" index="" proto="type-parameter-0-0"/>
</template_parameters>
<cr namespace="llvm" access="none" depth="0" kind="class" name="IntrusiveRefCntPtr" id="7b324dba5072e0919792f438fcc29977_88eef9064eb283db2b303f9bee4394d4" file="2" linestart="136" lineend="200" previous="7b324dba5072e0919792f438fcc29977_88eef9064eb283db2b303f9bee4394d4">
<cr access="public" kind="class" name="IntrusiveRefCntPtr" id="7b324dba5072e0919792f438fcc29977_bf93eac54b774965c69e48fd1b40d8a5" file="2" linestart="136" lineend="136"/>
<c name="IntrusiveRefCntPtr&lt;T&gt;" id="7b324dba5072e0919792f438fcc29977_69c75ea1d2bc19fc8656eef4dea1f9fc" file="2" linestart="144" lineend="146" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="obj" proto="T *" isPtr="true" access2="none">
<pt>
<ttp/>
</pt>
</p>
<initlist id="7b324dba5072e0919792f438fcc29977_e00a0cb34a5b19b790c307afc47cbb4f"/>
</c>
<c name="IntrusiveRefCntPtr&lt;T&gt;" id="7b324dba5072e0919792f438fcc29977_e0634a0f5c270e64bde4d3b7dc8f5dd8" file="2" linestart="152" lineend="154" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="S" proto="IntrusiveRefCntPtr&lt;T&gt; &amp;&amp;" isRef="true" access2="none">
<rrf>
<InjectedClassName>
<cr id="7b324dba5072e0919792f438fcc29977_88eef9064eb283db2b303f9bee4394d4"/>
</InjectedClassName>
</rrf>
</p>
<initlist id="7b324dba5072e0919792f438fcc29977_e00a0cb34a5b19b790c307afc47cbb4f"/>
</c>
</cr>
</tm>
<cr namespace="testing.internal" access="none" depth="0" kind="class" name="String" id="062315ef9bdab19c3cabee16a5b6d183_29162408a07bf0ba0270baefa060f9ab" file="3" linestart="81" lineend="312" previous="0c2fb77eb4696cd7e7faa021a7cafdaf_29162408a07bf0ba0270baefa060f9ab">
<m name="c_str" id="062315ef9bdab19c3cabee16a5b6d183_e758dca70b3e639bd69cdff32808e0ba" file="3" linestart="275" lineend="275" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="const char *">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</fpt>
</m>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="Message" id="d6da877cd43d9ea62976e055cbb7a3f4_a57271b22cdb2fdb3d50588243bf5562" file="4" linestart="82" lineend="221" previous="361592d094a324447c0b12d8c282c7d5_a57271b22cdb2fdb3d50588243bf5562">
<c name="Message" id="d6da877cd43d9ea62976e055cbb7a3f4_21a3d36d55284f1d8751ec8cddd8c404" file="4" linestart="94" lineend="98" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<initlist id="d6da877cd43d9ea62976e055cbb7a3f4_b337e99236191cea06ced5fb66037052"/>
</c>
</cr>
<e parent="562ee964b610e766d302b8dfed46fd41_5f4fb82d9196d416897f8942199b65f3" access="public" name="Type" id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1" file="5" linestart="51" lineend="55" fixed="true">
<promotion_type>
<bt name="int"/>
</promotion_type>
<integer_type>
<bt name="int"/>
</integer_type>
<ec name="kNonFatalFailure" id="562ee964b610e766d302b8dfed46fd41_383aae76b62cf18ba08225968ae6e7a3" file="5" linestart="53" lineend="53">
<et>
<e id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1"/>
</et>
</ec>
</e>
<cr namespace="testing" access="none" depth="0" kind="class" name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d" file="6" linestart="265" lineend="321" previous="361592d094a324447c0b12d8c282c7d5_1b0b5edb5a536c8577b46f6e0d5d791d">
<c name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_90376d02aab3f76734cce9b29267f2af" file="6" linestart="269" lineend="269" copyconst="true" access="public">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="other" proto="const testing::AssertionResult &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</QualType>
</lrf>
</p>
</c>
<c name="AssertionResult" id="0dc4cd8d4d61c13ddce2ee0effc89eca_fee14873f9723f27fcfae57f274d270a" file="6" linestart="271" lineend="271" explicit="true" access="public" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="success" proto="bool" isLiteral="true" isPrimitive="true" access2="none">
<bt name="bool"/>
</p>
<initlist id="0dc4cd8d4d61c13ddce2ee0effc89eca_8990cdf704a69c8c0203b7ece72cad83"/>
</c>
<cv name="operator bool" id="0dc4cd8d4d61c13ddce2ee0effc89eca_c2f20ab10b1a1c248f08973b7014d633" file="6" linestart="274" lineend="274" access="public" hasbody="true" isdef="true">
<fpt const="true" proto="bool">
<bt name="bool"/>
</fpt>
</cv>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="Test" id="0dc4cd8d4d61c13ddce2ee0effc89eca_964ac3d325bf97cf954384b45d20b6e8" file="6" linestart="356" lineend="463" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_964ac3d325bf97cf954384b45d20b6e8">
<m name="SetUpTestCase" id="0dc4cd8d4d61c13ddce2ee0effc89eca_9a9dc2bca30077fcc6a89530f92e1339" file="6" linestart="374" lineend="374" access="public" storage="static" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<m name="TearDownTestCase" id="0dc4cd8d4d61c13ddce2ee0effc89eca_d2e5bc6dcdf9b44bb09113afda19cad7" file="6" linestart="382" lineend="382" access="public" storage="static" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</m>
<c name="Test" id="0dc4cd8d4d61c13ddce2ee0effc89eca_84d92362fbd4a41dfcdd762261a24cf5" file="6" linestart="411" lineend="411" access="protected">
<fpt proto="void">
<bt name="void"/>
</fpt>
</c>
</cr>
<cr namespace="testing" access="none" depth="0" kind="class" name="TestInfo" id="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e" file="6" linestart="625" lineend="735" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e"/>
<cr namespace="testing.internal" access="none" depth="0" kind="class" name="AssertHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_7260371f7d6759cab9d4e4b45f795755" file="6" linestart="1594" lineend="1631" previous="0dc4cd8d4d61c13ddce2ee0effc89eca_7260371f7d6759cab9d4e4b45f795755">
<c name="AssertHelper" id="0dc4cd8d4d61c13ddce2ee0effc89eca_5f3bae04f063d84394fe9d50198f2c6a" file="6" linestart="1597" lineend="1600" access="public">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="type" proto="TestPartResult::Type" isLiteral="true" access2="none">
<ety>
<et>
<e id="562ee964b610e766d302b8dfed46fd41_67f4b207fbe04cf7dec53cc0d08539d1"/>
</et>
</ety>
</p>
<p name="file" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="line" proto="int" isLiteral="true" isPrimitive="true" access2="none">
<bt name="int"/>
</p>
<p name="message" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
</c>
<m name="operator=" id="0dc4cd8d4d61c13ddce2ee0effc89eca_7c7803b0e3e57d066468d0bec8cde703" file="6" linestart="1605" lineend="1605" operator="true" access="public">
<fpt const="true" proto="void">
<bt name="void"/>
</fpt>
<p name="message" proto="const testing::Message &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="d6da877cd43d9ea62976e055cbb7a3f4_a57271b22cdb2fdb3d50588243bf5562"/>
</rt>
</QualType>
</lrf>
</p>
</m>
</cr>
<cr namespace="anonymous_namespace{intrusiverefcntptrtest.cpp}" access="none" depth="1" kind="struct" name="VirtualRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_01f0ed588d64ce2fc8ffb0f242cd2e26" file="1" linestart="14" lineend="16">
<base access="public">
<ety>
<rt>
<cr id="7b324dba5072e0919792f438fcc29977_79426986d856495ccec785fc91685e55"/>
</rt>
</ety>
</base>
<c name="VirtualRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_9975b848c6057593b7b74377183fcb65" file="1" linestart="14" lineend="14" implicit="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</c>
<c name="VirtualRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_41a57ae07ebd49eca04647e45aa115be" file="1" linestart="14" lineend="14" copyconst="true" implicit="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="" proto="const &lt;anonymous&gt;::VirtualRefCounted &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="e97afcfb76b01c0bb884017ae75ec4f7_01f0ed588d64ce2fc8ffb0f242cd2e26"/>
</rt>
</QualType>
</lrf>
</p>
</c>
</cr>
<cr namespace="llvm" access="none" depth="1" kind="struct" name="SimpleRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_65975ab5345e164086679366a709c303" file="1" linestart="29" lineend="29">
<base access="public">
<tss>
<templatebase id="7b324dba5072e0919792f438fcc29977_6992c6af0d94383503407006aeb628dc"/>
<template_arguments>
<rt>
<cr id="e97afcfb76b01c0bb884017ae75ec4f7_65975ab5345e164086679366a709c303"/>
</rt>
</template_arguments>
</tss>
</base>
<c name="SimpleRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_3ec6d0774e6bcae2c5a6d891b43d35c7" file="1" linestart="29" lineend="29" implicit="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
</c>
<c name="SimpleRefCounted" id="e97afcfb76b01c0bb884017ae75ec4f7_f82796e4c03aec0355d5621faf1b57f1" file="1" linestart="29" lineend="29" copyconst="true" implicit="true" access="public" inline="true" hasbody="true" isdef="true">
<fpt proto="void">
<bt name="void"/>
</fpt>
<p name="" proto="const llvm::SimpleRefCounted &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="e97afcfb76b01c0bb884017ae75ec4f7_65975ab5345e164086679366a709c303"/>
</rt>
</QualType>
</lrf>
</p>
</c>
</cr>
<f namespace="testing.internal" name="GetBoolAssertionFailureMessage" id="361592d094a324447c0b12d8c282c7d5_7cde1b8033a9720b7ea4fb7d1438b38c" file="7" linestart="310" lineend="314" access="none">
<fpt proto="testing::internal::String">
<rt>
<cr id="062315ef9bdab19c3cabee16a5b6d183_29162408a07bf0ba0270baefa060f9ab"/>
</rt>
</fpt>
<p name="assertion_result" proto="const testing::AssertionResult &amp;" isRef="true" isLiteral="true" access2="none">
<lrf>
<QualType const="true">
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_1b0b5edb5a536c8577b46f6e0d5d791d"/>
</rt>
</QualType>
</lrf>
</p>
<p name="expression_text" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="actual_predicate_value" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="expected_predicate_value" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
</f>
<f namespace="testing.internal" name="GetTestTypeId" id="361592d094a324447c0b12d8c282c7d5_e8ecc4c7ff1c3d40cce55780474106a4" file="7" linestart="534" lineend="534" access="none">
<fpt proto="TypeId">
<Tdef>
<pt>
<QualType const="true">
<bt name="void"/>
</QualType>
</pt>
</Tdef>
</fpt>
</f>
<f namespace="testing.internal" name="MakeAndRegisterTestInfo" id="361592d094a324447c0b12d8c282c7d5_c94e15073fa33c9f81254abdf66926e3" file="7" linestart="595" lineend="602" access="none">
<fpt proto="testing::TestInfo *">
<pt>
<rt>
<cr id="0dc4cd8d4d61c13ddce2ee0effc89eca_ae44971a2ffb8623a217837d7c76110e"/>
</rt>
</pt>
</fpt>
<p name="test_case_name" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="name" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="type_param" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="value_param" proto="const char *" isPtr="true" isLiteral="true" access2="none">
<pt>
<QualType const="true">
<bt name="char"/>
</QualType>
</pt>
</p>
<p name="fixture_class_id" proto="TypeId" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<QualType const="true">
<bt name="void"/>
</QualType>
</pt>
</Tdef>
</p>
<p name="set_up_tc" proto="SetUpTestCaseFunc" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<Paren/>
</pt>
</Tdef>
</p>
<p name="tear_down_tc" proto="TearDownTestCaseFunc" isPtr="true" isLiteral="true" access2="none">
<Tdef>
<pt>
<Paren/>
</pt>
</Tdef>
</p>
<p name="factory" proto="testing::internal::TestFactoryBase *" isPtr="true" isLiteral="true" access2="none">
<pt>
<rt>
<cr id="361592d094a324447c0b12d8c282c7d5_ebebd0ac8a5c6834880cc16f32b5b90a"/>
</rt>
</pt>
</p>
</f>
</Externals>
