데이터베이스 설계
2011-10-08 오전 11:16:26
데이터베이스는 데이터가 모여있는 것이다.
그 데이터를 보다 효율적으로 관리하기 위해 나온게 관리 시스템이고,
덕분에 데이터베이스라고 하면 데이터베이스 관리 시스템(Database Management System) 으로 MSSQL 이나 MySQL 을 떠오르게 됬다.

데이터들의 효율적인 관리를 하려다 보니
데이터들의 상관 관계를 고려해서, 중복된 데이터를 없애고 무결성이 깨지는 일이 없도록 제약조건을 걸게 되었다
그러다가 아직까지 주도권을 잡고 있는 관계형 데이터베이스가 나왔고.

덕분에 데이터베이스에 뭔가를 저장하기 위해서는
데이터베이스 테이블을 설계해야하고, 각 column 들 간의 관계와 제약조건을 잘 설정해서,
중복된 데이터를 없애고 무결성을 지키는게 당연하게 여기게 되었는데

사실 데이터베이스 시스템의 목적이 단순히 데이터의 persistence 만을 위한 것이라면
데이터를 어떻게 저장하든 크게 상관 없는거잖아?

게임 서버를 만든다고 할 때, 사용자의 정보를 데이터베이스로 관리한다고 해보자.
그러면 사용자의 정보의 각 항목에 해당되는 column 을 갖는 table 을 만들어서 잘 넣어주고 관리할 수도 있고,
아니면 게임 서버에서 쓰는 구조체 binary 를 그냥 blob 으로 넣어버릴 수도 있겠다.

당연히 양자간의 장단점이 존재하고(심지어 후자의 방법도 장점이 존재한다, parsing 비용이 안 드니까)
뭐가 더 좋냐, 라고 하면
당연히 그 상황에서 더 적합한 방법이 더 좋은 방법이라고 할 수 밖에 없다.

하지만 통상적으로, 게임 내 사용자 정보 같은 경우는, column 의 개수가 추가되고 변경될 일이 있으니까
binary 로 넣어버리면, column 이 하나 추가될 때마다 기존 사용자들의 데이터를 migration 하느라 꽤 시간을 소모하게 될 것이다.

풀씨 게시판은
읽은 사람을 검사하기 위해서 CSV(comma separated value) 형태로 사용자의 id 를 저장하는 field 를 갖고 있다.
lacti,dizzyherb,bluewizard 이런 식으로 말이다.

물론, 정보를 보다 정교하게 관리하려면,
글과 사용자 테이블의 관계를 맺어 어떤 글을 어떤 사람이 읽었는지를 따로 테이블로 구성해서 저장해야하고,
그러면 그거 관련해서 데이터 분석의 여지가 더 있을 것이다. 예를 들면 누가 어떤 글을 읽었는지를 확인한다던가 하는 것.

물론 지금도 가능하다.
LIKE %% 를 쓰면 글쓴이 id 목록에서 원하는 사람을 찾아서 검색할 수 있다.
하지만 integer key index 검사하는 것과 string match 를 검사하는 것의 엄청난 속도 차이는 굳이 이야기하지 않아도 다들 잘 알 것이다.
하지만 뭐, 우린 시스템이 작으니까 상관없어! 라고 말하면 할 말 없다.
자기 만들기 편한대로 하는게 맞으니까.

하지만 그러면 query 는 점점 복잡해질 것이고, 데이터베이스는 단지 거들 뿐, 모든 작업은 모든 데이터를 fetching 해와서 실제 로직에서 다 처리하고 있고, 더 이상 디비도 프로그램 코드도 관리가 불가능해질 정도로 엔트로피가 올라가고 ...

뭐, 데이터베이스 설계 이야기를 제대로 하려면 왜 느린지, 어떻게 해야 빠른지, 왜 그렇게 해야하는지를 설명해야겠지만
그럴 능력도 없고, 그러고 싶어서 쓴 글도 아니다.

그냥 read_users 랑 똑같은 구조를 갖는 like_users 를 보니까 그냥 한 번 이야기해보고 싶어서 [...]
